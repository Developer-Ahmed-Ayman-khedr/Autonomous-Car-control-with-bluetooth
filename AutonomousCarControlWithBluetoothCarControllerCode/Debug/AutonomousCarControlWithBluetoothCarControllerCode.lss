
AutonomousCarControlWithBluetoothCarControllerCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  00002a80  00002b14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  0080018c  0080018c  00002c40  2**0
                  ALLOC
  3 .stab         00002844  00000000  00000000  00002c40  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017e4  00000000  00000000  00005484  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009405  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a78b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b964  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000bb24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000be1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c788  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <__vector_1>
       8:	0c 94 0a 0a 	jmp	0x1414	; 0x1414 <__vector_2>
       c:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3a       	cpi	r26, 0xA5	; 165
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <main>
      8a:	0c 94 3e 15 	jmp	0x2a7c	; 0x2a7c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 23 15 	jmp	0x2a46	; 0x2a46 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 23 15 	jmp	0x2a46	; 0x2a46 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0f 15 	jmp	0x2a1e	; 0x2a1e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 0f 15 	jmp	0x2a1e	; 0x2a1e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <TIMER2_VoidInit>:


/**********************************************************************************
 *********************************************************************************/
void TIMER2_VoidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62


/**************************************/
#elif  MOOD2==PWM2_MOOD
/**************************************/
	TCCR2_REG->TCCR2_WGM00=1;
     e36:	e5 e4       	ldi	r30, 0x45	; 69
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	80 64       	ori	r24, 0x40	; 64
     e3e:	80 83       	st	Z, r24
	TCCR2_REG->TCCR2_WGM01=1;
     e40:	e5 e4       	ldi	r30, 0x45	; 69
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	88 60       	ori	r24, 0x08	; 8
     e48:	80 83       	st	Z, r24

	TCCR2_REG->TCCR2_COM = PWM2_COMPARE_MATCH;
     e4a:	e5 e4       	ldi	r30, 0x45	; 69
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	8f 7c       	andi	r24, 0xCF	; 207
     e52:	80 62       	ori	r24, 0x20	; 32
     e54:	80 83       	st	Z, r24
#endif /*Related to (#if MOOD==NORMAL_MOOD) and (#elif MOOD==CTC_MOOD) and (#elif MOOD==PWM_MOOD) */
	/**************************************/



}
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	08 95       	ret

00000e5c <TIMER2_VoidStop>:

/*****************************************************************************/
void TIMER2_VoidStop(void)
{
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
	TCCR2_REG->TCCR2_CS0=No2_FREQ;
     e64:	e5 e4       	ldi	r30, 0x45	; 69
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	88 7f       	andi	r24, 0xF8	; 248
     e6c:	80 83       	st	Z, r24

}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <TIMER2_VoidStart>:


/*****************************************************************************/
void TIMER2_VoidStart(void)
{
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62

	TCCR2_REG->TCCR2_CS0=PRESCALER2;
     e7c:	e5 e4       	ldi	r30, 0x45	; 69
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	88 7f       	andi	r24, 0xF8	; 248
     e84:	85 60       	ori	r24, 0x05	; 5
     e86:	80 83       	st	Z, r24

}
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <TIMER2_VoidSetPreload>:

/*****************************************************************************/
void TIMER2_VoidSetPreload(u8 copy_u8PRELOAD )
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	0f 92       	push	r0
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	89 83       	std	Y+1, r24	; 0x01

	TCNT2_REG=copy_u8PRELOAD;
     e9a:	e4 e4       	ldi	r30, 0x44	; 68
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	80 83       	st	Z, r24
}
     ea2:	0f 90       	pop	r0
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <TIMER2_VoidVal>:

/*****************************************************************************/

u8 TIMER2_VoidVal(void )
{
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62

	return  TCNT2_REG ;
     eb2:	e4 e4       	ldi	r30, 0x44	; 68
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
}
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <TIMER2_VoidSetPWMCompareMatch>:

/*****************************************************************************/
void TIMER2_VoidSetPWMCompareMatch(u8 copy_u8Val )
{
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	0f 92       	push	r0
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	89 83       	std	Y+1, r24	; 0x01
#if PWM_COMPARE_MATCH == CLEAR_ON_COMPARE_MATCH_SET_ON_TOP
	//OCR2_REG =   ( ( (f32)copy_u8Val / 100 ) * (255) );
	  OCR2_REG =   ( ( (u32)copy_u8Val * 255 ) / (100) );
     ece:	03 e4       	ldi	r16, 0x43	; 67
     ed0:	10 e0       	ldi	r17, 0x00	; 0
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	88 2f       	mov	r24, r24
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	a0 e0       	ldi	r26, 0x00	; 0
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	2f ef       	ldi	r18, 0xFF	; 255
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	40 e0       	ldi	r20, 0x00	; 0
     ee2:	50 e0       	ldi	r21, 0x00	; 0
     ee4:	bc 01       	movw	r22, r24
     ee6:	cd 01       	movw	r24, r26
     ee8:	0e 94 c6 14 	call	0x298c	; 0x298c <__mulsi3>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	24 e6       	ldi	r18, 0x64	; 100
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	40 e0       	ldi	r20, 0x00	; 0
     ef6:	50 e0       	ldi	r21, 0x00	; 0
     ef8:	bc 01       	movw	r22, r24
     efa:	cd 01       	movw	r24, r26
     efc:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__udivmodsi4>
     f00:	da 01       	movw	r26, r20
     f02:	c9 01       	movw	r24, r18
     f04:	f8 01       	movw	r30, r16
     f06:	80 83       	st	Z, r24

#elif PWM_COMPARE_MATCH == SET_ON_COMPARE_MATCH_CLR_ON_TOP
	//OCR2_REG = (255) - ( ( (f32)copy_u8Val / 100 ) * (255) ) ;
	  OCR2_REG = (255) - ( ( (u32)copy_u8Val * 255 ) / (100) ) ;
#endif
}
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	1f 91       	pop	r17
     f10:	0f 91       	pop	r16
     f12:	08 95       	ret

00000f14 <TIMER1_voidPwm1Init>:
#include "TIMER1_config.h"



void TIMER1_voidPwm1Init(void)
{
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
	/* to enable output circuit for PD5 pin */

	DIO_voidSetPinDirection(PORTD_ID,PIN5,PIN_OUTPUT);
     f1c:	83 e0       	ldi	r24, 0x03	; 3
     f1e:	65 e0       	ldi	r22, 0x05	; 5
     f20:	41 e0       	ldi	r20, 0x01	; 1
     f22:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <DIO_voidSetPinDirection>

	/* to select mode 14 in table 47 */
	CLR_BIT(TCCR1A_REG,WGM10);
     f26:	af e4       	ldi	r26, 0x4F	; 79
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	ef e4       	ldi	r30, 0x4F	; 79
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	8e 7f       	andi	r24, 0xFE	; 254
     f32:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_REG,WGM11);
     f34:	af e4       	ldi	r26, 0x4F	; 79
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	ef e4       	ldi	r30, 0x4F	; 79
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	82 60       	ori	r24, 0x02	; 2
     f40:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,WGM12);
     f42:	ae e4       	ldi	r26, 0x4E	; 78
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	ee e4       	ldi	r30, 0x4E	; 78
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	88 60       	ori	r24, 0x08	; 8
     f4e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,WGM13);
     f50:	ae e4       	ldi	r26, 0x4E	; 78
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	ee e4       	ldi	r30, 0x4E	; 78
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	80 61       	ori	r24, 0x10	; 16
     f5c:	8c 93       	st	X, r24

	/* to select non inverting mode */
	SET_BIT(TCCR1A_REG,COM1A1);
     f5e:	af e4       	ldi	r26, 0x4F	; 79
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	ef e4       	ldi	r30, 0x4F	; 79
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	80 68       	ori	r24, 0x80	; 128
     f6a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A_REG,COM1A0);
     f6c:	af e4       	ldi	r26, 0x4F	; 79
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	ef e4       	ldi	r30, 0x4F	; 79
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	8f 7b       	andi	r24, 0xBF	; 191
     f78:	8c 93       	st	X, r24
}
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <TIMER1_voidPwm1SetTop>:
void TIMER1_voidPwm1SetTop(void)
{
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
	//PRESCALER = 8  at  16M F
	/*ICR1_REG=624;*/
	ICR1_REG = 40000;
     f88:	e6 e4       	ldi	r30, 0x46	; 70
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 e4       	ldi	r24, 0x40	; 64
     f8e:	9c e9       	ldi	r25, 0x9C	; 156
     f90:	91 83       	std	Z+1, r25	; 0x01
     f92:	80 83       	st	Z, r24
}
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <TIMER1_voidPwm1SetDutyCycle>:

void TIMER1_voidPwm1SetDutyCycle(void)
{
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
	// pass num between 25 and 65
	//OCR1A_REG = 62;

	OCR1A_REG = 30500;
     fa2:	ea e4       	ldi	r30, 0x4A	; 74
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	84 e2       	ldi	r24, 0x24	; 36
     fa8:	97 e7       	ldi	r25, 0x77	; 119
     faa:	91 83       	std	Z+1, r25	; 0x01
     fac:	80 83       	st	Z, r24

}
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <TIMER1_voidPwm1Start>:
void TIMER1_voidPwm1Start(void)
{
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
#elif TIMER1_PRESCALER   ==   64
	SET_BIT(TCCR1B_REG,CS10);
	SET_BIT(TCCR1B_REG,CS11);
	CLR_BIT(TCCR1B_REG,CS12);
#elif TIMER1_PRESCALER   ==   8
	CLR_BIT(TCCR1B_REG,CS10);
     fbc:	ae e4       	ldi	r26, 0x4E	; 78
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	ee e4       	ldi	r30, 0x4E	; 78
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	8e 7f       	andi	r24, 0xFE	; 254
     fc8:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,CS11);
     fca:	ae e4       	ldi	r26, 0x4E	; 78
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	ee e4       	ldi	r30, 0x4E	; 78
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	82 60       	ori	r24, 0x02	; 2
     fd6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,CS12);
     fd8:	ae e4       	ldi	r26, 0x4E	; 78
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	ee e4       	ldi	r30, 0x4E	; 78
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	8b 7f       	andi	r24, 0xFB	; 251
     fe4:	8c 93       	st	X, r24
#endif
}
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <TIMER1_voidPwm1Stop>:
void TIMER1_voidPwm1Stop(void)
{
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B_REG,CS10);
     ff4:	ae e4       	ldi	r26, 0x4E	; 78
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	ee e4       	ldi	r30, 0x4E	; 78
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	8e 7f       	andi	r24, 0xFE	; 254
    1000:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,CS11);
    1002:	ae e4       	ldi	r26, 0x4E	; 78
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	ee e4       	ldi	r30, 0x4E	; 78
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	8d 7f       	andi	r24, 0xFD	; 253
    100e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,CS12);
    1010:	ae e4       	ldi	r26, 0x4E	; 78
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	ee e4       	ldi	r30, 0x4E	; 78
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	8b 7f       	andi	r24, 0xFB	; 251
    101c:	8c 93       	st	X, r24
}
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <TIMER0_voidSetCallBack>:
//global pointer to fun
static void (*TIMER0_callBack)(void);

//call back fun
void TIMER0_voidSetCallBack(  void (*ptr_timer)(void) )
{
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	00 d0       	rcall	.+0      	; 0x102a <TIMER0_voidSetCallBack+0x6>
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	9a 83       	std	Y+2, r25	; 0x02
    1030:	89 83       	std	Y+1, r24	; 0x01

	if(ptr_timer!=NULL)
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	9a 81       	ldd	r25, Y+2	; 0x02
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	31 f0       	breq	.+12     	; 0x1046 <TIMER0_voidSetCallBack+0x22>
	{
		TIMER0_callBack=ptr_timer ;
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	9a 81       	ldd	r25, Y+2	; 0x02
    103e:	90 93 8d 01 	sts	0x018D, r25
    1042:	80 93 8c 01 	sts	0x018C, r24
	}
}
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	08 95       	ret

00001050 <__vector_11>:


#if MOOD== NORMAL_MOOD
void __vector_11 () __attribute__  ((signal));
void __vector_11 ()
{
    1050:	1f 92       	push	r1
    1052:	0f 92       	push	r0
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	0f 92       	push	r0
    1058:	11 24       	eor	r1, r1
    105a:	2f 93       	push	r18
    105c:	3f 93       	push	r19
    105e:	4f 93       	push	r20
    1060:	5f 93       	push	r21
    1062:	6f 93       	push	r22
    1064:	7f 93       	push	r23
    1066:	8f 93       	push	r24
    1068:	9f 93       	push	r25
    106a:	af 93       	push	r26
    106c:	bf 93       	push	r27
    106e:	ef 93       	push	r30
    1070:	ff 93       	push	r31
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62

	TIMER0_callBack();
    107a:	e0 91 8c 01 	lds	r30, 0x018C
    107e:	f0 91 8d 01 	lds	r31, 0x018D
    1082:	09 95       	icall

}
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	ff 91       	pop	r31
    108a:	ef 91       	pop	r30
    108c:	bf 91       	pop	r27
    108e:	af 91       	pop	r26
    1090:	9f 91       	pop	r25
    1092:	8f 91       	pop	r24
    1094:	7f 91       	pop	r23
    1096:	6f 91       	pop	r22
    1098:	5f 91       	pop	r21
    109a:	4f 91       	pop	r20
    109c:	3f 91       	pop	r19
    109e:	2f 91       	pop	r18
    10a0:	0f 90       	pop	r0
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	0f 90       	pop	r0
    10a6:	1f 90       	pop	r1
    10a8:	18 95       	reti

000010aa <TIMER0_VoidInit>:


/**********************************************************************************
 *********************************************************************************/
void TIMER0_VoidInit(void)
{
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62

/**************************************/
#if MOOD==NORMAL_MOOD
/**************************************/
	TCCR0_REG->TCCR0_WGM00 = ZERO;
    10b2:	e3 e5       	ldi	r30, 0x53	; 83
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	8f 7b       	andi	r24, 0xBF	; 191
    10ba:	80 83       	st	Z, r24
	TCCR0_REG->TCCR0_WGM01 = ZERO;
    10bc:	e3 e5       	ldi	r30, 0x53	; 83
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	87 7f       	andi	r24, 0xF7	; 247
    10c4:	80 83       	st	Z, r24
	TCNT0_REG=PRELOAD;
    10c6:	e2 e5       	ldi	r30, 0x52	; 82
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	10 82       	st	Z, r1
	/*------------------------------------*/
#if ISR == ISR_EN
	/*enabel  NORMAL_MOOD interrupt*/
	TIMSK_REG->TIMSK_TOIE0 = ONE ;
    10cc:	e9 e5       	ldi	r30, 0x59	; 89
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	81 60       	ori	r24, 0x01	; 1
    10d4:	80 83       	st	Z, r24
#endif /*Related to (#if MOOD==NORMAL_MOOD) and (#elif MOOD==CTC_MOOD) and (#elif MOOD==PWM_MOOD) */
	/**************************************/



}
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <TIMER0_VoidStop>:

/*****************************************************************************/
void TIMER0_VoidStop(void)
{
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG->TCCR0_CS0=No_FREQ;
    10e4:	e3 e5       	ldi	r30, 0x53	; 83
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	88 7f       	andi	r24, 0xF8	; 248
    10ec:	80 83       	st	Z, r24

}
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <TIMER0_VoidStart>:


/*****************************************************************************/
void TIMER0_VoidStart(void)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62

	TCCR0_REG->TCCR0_CS0=PRESCALER;
    10fc:	e3 e5       	ldi	r30, 0x53	; 83
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	88 7f       	andi	r24, 0xF8	; 248
    1104:	83 60       	ori	r24, 0x03	; 3
    1106:	80 83       	st	Z, r24

}
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	08 95       	ret

0000110e <TIMER0_VoidSetPreload>:

/*****************************************************************************/
void TIMER0_VoidSetPreload(u8 copy_u8PRELOAD )
{
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	0f 92       	push	r0
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	89 83       	std	Y+1, r24	; 0x01

	TCNT0_REG=copy_u8PRELOAD;
    111a:	e2 e5       	ldi	r30, 0x52	; 82
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	80 83       	st	Z, r24
}
    1122:	0f 90       	pop	r0
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	08 95       	ret

0000112a <TIMER0_VoidVal>:

/*****************************************************************************/

u8 TIMER0_VoidVal(void )
{
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62

	return  TCNT0_REG ;
    1132:	e2 e5       	ldi	r30, 0x52	; 82
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
}
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <TIMER0_VoidSetPWMCompareMatch>:

/*****************************************************************************/
void TIMER0_VoidSetPWMCompareMatch(u8 copy_u8Val )
{
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	0f 92       	push	r0
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	89 83       	std	Y+1, r24	; 0x01

#elif PWM_COMPARE_MATCH == SET_ON_COMPARE_MATCH_CLR_ON_TOP
	//OCR0_REG = (255) - ( ( (f32)copy_u8Val / 100 ) * (255) ) ;
	  OCR0_REG = (255) - ( ( (u32)copy_u8Val * 255 ) / (100) ) ;
#endif
}
    114a:	0f 90       	pop	r0
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	08 95       	ret

00001152 <WDT_VoidEnabel>:

/*
 * watch dog timer IN TIMER_1
 */
void WDT_VoidEnabel(void )
{
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62

	//SET_BIT(WDTCR_,3);
	WDTCR_REG->WDTCR_WDE=1;
    115a:	e1 e4       	ldi	r30, 0x41	; 65
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	88 60       	ori	r24, 0x08	; 8
    1162:	80 83       	st	Z, r24
}
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <WDT_VoidDisEnabel>:

void WDT_VoidDisEnabel(void )
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
//	WDTCR_==(1<<4)|(1<<3);
//	WDTCR_=0 ;

WDTCR_REG->WDTCR_Data=(1<<4)|(1<<3);
    1172:	e1 e4       	ldi	r30, 0x41	; 65
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	88 e1       	ldi	r24, 0x18	; 24
    1178:	80 83       	st	Z, r24
WDTCR_REG->WDTCR_WDE=0;
    117a:	e1 e4       	ldi	r30, 0x41	; 65
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	87 7f       	andi	r24, 0xF7	; 247
    1182:	80 83       	st	Z, r24
}
    1184:	cf 91       	pop	r28
    1186:	df 91       	pop	r29
    1188:	08 95       	ret

0000118a <WDT_VoidSleep>:
void WDT_VoidSleep(u8 sleep_time )
{
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	0f 92       	push	r0
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	89 83       	std	Y+1, r24	; 0x01

	//WDTCR_=(WDTCR_&0xF8) |sleep_time ;

	WDTCR_REG->WDTCR_WDP=sleep_time;
    1196:	e1 e4       	ldi	r30, 0x41	; 65
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	87 70       	andi	r24, 0x07	; 7
    119e:	98 2f       	mov	r25, r24
    11a0:	97 70       	andi	r25, 0x07	; 7
    11a2:	80 81       	ld	r24, Z
    11a4:	88 7f       	andi	r24, 0xF8	; 248
    11a6:	89 2b       	or	r24, r25
    11a8:	80 83       	st	Z, r24

}
    11aa:	0f 90       	pop	r0
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <GIE_Enable>:
#include "GIE_Interface.h"
#include "GIE_private.h"


void GIE_Enable(void)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
     SET_BIT(GIE_SREG,I_bit);
    11ba:	af e5       	ldi	r26, 0x5F	; 95
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	ef e5       	ldi	r30, 0x5F	; 95
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	80 68       	ori	r24, 0x80	; 128
    11c6:	8c 93       	st	X, r24

}
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <GIE_Disable>:

void GIE_Disable(void)
{
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
 CLR_BIT(GIE_SREG,I_bit);
    11d6:	af e5       	ldi	r26, 0x5F	; 95
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	ef e5       	ldi	r30, 0x5F	; 95
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	8f 77       	andi	r24, 0x7F	; 127
    11e2:	8c 93       	st	X, r24

}
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	08 95       	ret

000011ea <EXTINT_voidInit>:



#ifdef EXT_Init_NORMAL
void EXTINT_voidInit(u8 copy_u8ExtNum,u8 copy_u8ControlSens)
{
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <EXTINT_voidInit+0x6>
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <EXTINT_voidInit+0x8>
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	89 83       	std	Y+1, r24	; 0x01
    11f8:	6a 83       	std	Y+2, r22	; 0x02

	switch(copy_u8ExtNum)
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	3c 83       	std	Y+4, r19	; 0x04
    1202:	2b 83       	std	Y+3, r18	; 0x03
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	9c 81       	ldd	r25, Y+4	; 0x04
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	91 05       	cpc	r25, r1
    120c:	d9 f1       	breq	.+118    	; 0x1284 <EXTINT_voidInit+0x9a>
    120e:	2b 81       	ldd	r18, Y+3	; 0x03
    1210:	3c 81       	ldd	r19, Y+4	; 0x04
    1212:	22 30       	cpi	r18, 0x02	; 2
    1214:	31 05       	cpc	r19, r1
    1216:	09 f4       	brne	.+2      	; 0x121a <EXTINT_voidInit+0x30>
    1218:	65 c0       	rjmp	.+202    	; 0x12e4 <EXTINT_voidInit+0xfa>
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	9c 81       	ldd	r25, Y+4	; 0x04
    121e:	00 97       	sbiw	r24, 0x00	; 0
    1220:	09 f0       	breq	.+2      	; 0x1224 <EXTINT_voidInit+0x3a>
    1222:	81 c0       	rjmp	.+258    	; 0x1326 <EXTINT_voidInit+0x13c>
	{
	case EXT0_ID :

		DIO_voidSetPinDirection(PORTD_ID,PIN2,PIN_INPUT);
    1224:	83 e0       	ldi	r24, 0x03	; 3
    1226:	62 e0       	ldi	r22, 0x02	; 2
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <DIO_voidSetPinDirection>

		if(copy_u8ControlSens==FALLING_EDGE)
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	88 23       	and	r24, r24
    1232:	79 f4       	brne	.+30     	; 0x1252 <EXTINT_voidInit+0x68>
		{

			CLR_BIT(MCUCR_REG,MCUCR_ISC00);
    1234:	a5 e5       	ldi	r26, 0x55	; 85
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e5 e5       	ldi	r30, 0x55	; 85
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	8e 7f       	andi	r24, 0xFE	; 254
    1240:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,MCUCR_ISC01);
    1242:	a5 e5       	ldi	r26, 0x55	; 85
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e5 e5       	ldi	r30, 0x55	; 85
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	82 60       	ori	r24, 0x02	; 2
    124e:	8c 93       	st	X, r24
    1250:	11 c0       	rjmp	.+34     	; 0x1274 <EXTINT_voidInit+0x8a>

		}


		else if(copy_u8ControlSens==RISING_EDGE)
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	81 30       	cpi	r24, 0x01	; 1
    1256:	71 f4       	brne	.+28     	; 0x1274 <EXTINT_voidInit+0x8a>
		{
			SET_BIT(MCUCR_REG,MCUCR_ISC00);
    1258:	a5 e5       	ldi	r26, 0x55	; 85
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e5 e5       	ldi	r30, 0x55	; 85
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	81 60       	ori	r24, 0x01	; 1
    1264:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,MCUCR_ISC01);
    1266:	a5 e5       	ldi	r26, 0x55	; 85
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e5 e5       	ldi	r30, 0x55	; 85
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	82 60       	ori	r24, 0x02	; 2
    1272:	8c 93       	st	X, r24
		}

		SET_BIT(GICR_REG,GICR_INT0);
    1274:	ab e5       	ldi	r26, 0x5B	; 91
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	eb e5       	ldi	r30, 0x5B	; 91
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	80 64       	ori	r24, 0x40	; 64
    1280:	8c 93       	st	X, r24
    1282:	51 c0       	rjmp	.+162    	; 0x1326 <EXTINT_voidInit+0x13c>
		break ;


	case EXT1_ID :

		DIO_voidSetPinDirection(PORTD_ID,PIN3,PIN_INPUT);
    1284:	83 e0       	ldi	r24, 0x03	; 3
    1286:	63 e0       	ldi	r22, 0x03	; 3
    1288:	40 e0       	ldi	r20, 0x00	; 0
    128a:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <DIO_voidSetPinDirection>

		if(copy_u8ControlSens==FALLING_EDGE)
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	88 23       	and	r24, r24
    1292:	79 f4       	brne	.+30     	; 0x12b2 <EXTINT_voidInit+0xc8>
		{

			CLR_BIT(MCUCR_REG,MCUCR_ISC10);
    1294:	a5 e5       	ldi	r26, 0x55	; 85
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e5 e5       	ldi	r30, 0x55	; 85
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	8b 7f       	andi	r24, 0xFB	; 251
    12a0:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,MCUCR_ISC11);
    12a2:	a5 e5       	ldi	r26, 0x55	; 85
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e5 e5       	ldi	r30, 0x55	; 85
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	88 60       	ori	r24, 0x08	; 8
    12ae:	8c 93       	st	X, r24
    12b0:	11 c0       	rjmp	.+34     	; 0x12d4 <EXTINT_voidInit+0xea>

		}

		else if(copy_u8ControlSens==RISING_EDGE)
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	71 f4       	brne	.+28     	; 0x12d4 <EXTINT_voidInit+0xea>
		{
			SET_BIT(MCUCR_REG,MCUCR_ISC10);
    12b8:	a5 e5       	ldi	r26, 0x55	; 85
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e5 e5       	ldi	r30, 0x55	; 85
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	84 60       	ori	r24, 0x04	; 4
    12c4:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,MCUCR_ISC11);
    12c6:	a5 e5       	ldi	r26, 0x55	; 85
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e5 e5       	ldi	r30, 0x55	; 85
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	88 60       	ori	r24, 0x08	; 8
    12d2:	8c 93       	st	X, r24
		}
		SET_BIT(GICR_REG,GICR_INT1);
    12d4:	ab e5       	ldi	r26, 0x5B	; 91
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	eb e5       	ldi	r30, 0x5B	; 91
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	80 68       	ori	r24, 0x80	; 128
    12e0:	8c 93       	st	X, r24
    12e2:	21 c0       	rjmp	.+66     	; 0x1326 <EXTINT_voidInit+0x13c>

		break ;

	case EXT2_ID :

		DIO_voidSetPinDirection(PORTB_ID,PIN2,PIN_INPUT);
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	62 e0       	ldi	r22, 0x02	; 2
    12e8:	40 e0       	ldi	r20, 0x00	; 0
    12ea:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <DIO_voidSetPinDirection>

		if(copy_u8ControlSens==FALLING_EDGE)
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	88 23       	and	r24, r24
    12f2:	41 f4       	brne	.+16     	; 0x1304 <EXTINT_voidInit+0x11a>
		{
			CLR_BIT(MCUCSR_REG,MCUCSR_ISC2);
    12f4:	a4 e5       	ldi	r26, 0x54	; 84
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e4 e5       	ldi	r30, 0x54	; 84
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	8f 7b       	andi	r24, 0xBF	; 191
    1300:	8c 93       	st	X, r24
    1302:	0a c0       	rjmp	.+20     	; 0x1318 <EXTINT_voidInit+0x12e>
		}

		else if(copy_u8ControlSens==RISING_EDGE)
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	39 f4       	brne	.+14     	; 0x1318 <EXTINT_voidInit+0x12e>
		{
			SET_BIT(MCUCSR_REG,MCUCSR_ISC2);
    130a:	a4 e5       	ldi	r26, 0x54	; 84
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e4 e5       	ldi	r30, 0x54	; 84
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	80 64       	ori	r24, 0x40	; 64
    1316:	8c 93       	st	X, r24
		}
		SET_BIT(GICR_REG,GICR_INT2);
    1318:	ab e5       	ldi	r26, 0x5B	; 91
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	eb e5       	ldi	r30, 0x5B	; 91
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	80 62       	ori	r24, 0x20	; 32
    1324:	8c 93       	st	X, r24

		break ;

	}
}
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	08 95       	ret

00001334 <EXTINT_voidSetCallBack>:




void EXTINT_voidSetCallBack (  void (*ptr_ext)(void) ,u8 copy_u8ExtNum )
{
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	00 d0       	rcall	.+0      	; 0x133a <EXTINT_voidSetCallBack+0x6>
    133a:	00 d0       	rcall	.+0      	; 0x133c <EXTINT_voidSetCallBack+0x8>
    133c:	0f 92       	push	r0
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    1342:	9a 83       	std	Y+2, r25	; 0x02
    1344:	89 83       	std	Y+1, r24	; 0x01
    1346:	6b 83       	std	Y+3, r22	; 0x03

	if(ptr_ext!=NULL)
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	9a 81       	ldd	r25, Y+2	; 0x02
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	39 f1       	breq	.+78     	; 0x139e <EXTINT_voidSetCallBack+0x6a>
	{
		switch(copy_u8ExtNum)
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	3d 83       	std	Y+5, r19	; 0x05
    1358:	2c 83       	std	Y+4, r18	; 0x04
    135a:	8c 81       	ldd	r24, Y+4	; 0x04
    135c:	9d 81       	ldd	r25, Y+5	; 0x05
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	91 05       	cpc	r25, r1
    1362:	81 f0       	breq	.+32     	; 0x1384 <EXTINT_voidSetCallBack+0x50>
    1364:	2c 81       	ldd	r18, Y+4	; 0x04
    1366:	3d 81       	ldd	r19, Y+5	; 0x05
    1368:	22 30       	cpi	r18, 0x02	; 2
    136a:	31 05       	cpc	r19, r1
    136c:	91 f0       	breq	.+36     	; 0x1392 <EXTINT_voidSetCallBack+0x5e>
    136e:	8c 81       	ldd	r24, Y+4	; 0x04
    1370:	9d 81       	ldd	r25, Y+5	; 0x05
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	a1 f4       	brne	.+40     	; 0x139e <EXTINT_voidSetCallBack+0x6a>
		{
		case EXT0_ID:
			ptr_ArrCallBack[ 0 ]= ptr_ext;
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	9a 81       	ldd	r25, Y+2	; 0x02
    137a:	90 93 8f 01 	sts	0x018F, r25
    137e:	80 93 8e 01 	sts	0x018E, r24
    1382:	0d c0       	rjmp	.+26     	; 0x139e <EXTINT_voidSetCallBack+0x6a>
			break;
		case EXT1_ID:
			ptr_ArrCallBack[ 1 ]= ptr_ext;
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	9a 81       	ldd	r25, Y+2	; 0x02
    1388:	90 93 91 01 	sts	0x0191, r25
    138c:	80 93 90 01 	sts	0x0190, r24
    1390:	06 c0       	rjmp	.+12     	; 0x139e <EXTINT_voidSetCallBack+0x6a>
			break;
		case EXT2_ID:
			ptr_ArrCallBack[ 2 ]= ptr_ext;
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	9a 81       	ldd	r25, Y+2	; 0x02
    1396:	90 93 93 01 	sts	0x0193, r25
    139a:	80 93 92 01 	sts	0x0192, r24
		}



	}
}
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	cf 91       	pop	r28
    13aa:	df 91       	pop	r29
    13ac:	08 95       	ret

000013ae <__vector_1>:



void __vector_1 () __attribute__ ((signal));
void __vector_1 ()
{
    13ae:	1f 92       	push	r1
    13b0:	0f 92       	push	r0
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	0f 92       	push	r0
    13b6:	11 24       	eor	r1, r1
    13b8:	2f 93       	push	r18
    13ba:	3f 93       	push	r19
    13bc:	4f 93       	push	r20
    13be:	5f 93       	push	r21
    13c0:	6f 93       	push	r22
    13c2:	7f 93       	push	r23
    13c4:	8f 93       	push	r24
    13c6:	9f 93       	push	r25
    13c8:	af 93       	push	r26
    13ca:	bf 93       	push	r27
    13cc:	ef 93       	push	r30
    13ce:	ff 93       	push	r31
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62

	if(ptr_ArrCallBack[0] !=NULL)
    13d8:	80 91 8e 01 	lds	r24, 0x018E
    13dc:	90 91 8f 01 	lds	r25, 0x018F
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	29 f0       	breq	.+10     	; 0x13ee <__vector_1+0x40>
	{
		ptr_ArrCallBack[0]();
    13e4:	e0 91 8e 01 	lds	r30, 0x018E
    13e8:	f0 91 8f 01 	lds	r31, 0x018F
    13ec:	09 95       	icall
	}



}
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	ff 91       	pop	r31
    13f4:	ef 91       	pop	r30
    13f6:	bf 91       	pop	r27
    13f8:	af 91       	pop	r26
    13fa:	9f 91       	pop	r25
    13fc:	8f 91       	pop	r24
    13fe:	7f 91       	pop	r23
    1400:	6f 91       	pop	r22
    1402:	5f 91       	pop	r21
    1404:	4f 91       	pop	r20
    1406:	3f 91       	pop	r19
    1408:	2f 91       	pop	r18
    140a:	0f 90       	pop	r0
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	0f 90       	pop	r0
    1410:	1f 90       	pop	r1
    1412:	18 95       	reti

00001414 <__vector_2>:

void __vector_2 () __attribute__ ((signal));
void __vector_2 ()
{
    1414:	1f 92       	push	r1
    1416:	0f 92       	push	r0
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	0f 92       	push	r0
    141c:	11 24       	eor	r1, r1
    141e:	2f 93       	push	r18
    1420:	3f 93       	push	r19
    1422:	4f 93       	push	r20
    1424:	5f 93       	push	r21
    1426:	6f 93       	push	r22
    1428:	7f 93       	push	r23
    142a:	8f 93       	push	r24
    142c:	9f 93       	push	r25
    142e:	af 93       	push	r26
    1430:	bf 93       	push	r27
    1432:	ef 93       	push	r30
    1434:	ff 93       	push	r31
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
	if(ptr_ArrCallBack[1] !=NULL)
    143e:	80 91 90 01 	lds	r24, 0x0190
    1442:	90 91 91 01 	lds	r25, 0x0191
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	29 f0       	breq	.+10     	; 0x1454 <__vector_2+0x40>
		{
		ptr_ArrCallBack[1]();
    144a:	e0 91 90 01 	lds	r30, 0x0190
    144e:	f0 91 91 01 	lds	r31, 0x0191
    1452:	09 95       	icall
		}


}
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	ff 91       	pop	r31
    145a:	ef 91       	pop	r30
    145c:	bf 91       	pop	r27
    145e:	af 91       	pop	r26
    1460:	9f 91       	pop	r25
    1462:	8f 91       	pop	r24
    1464:	7f 91       	pop	r23
    1466:	6f 91       	pop	r22
    1468:	5f 91       	pop	r21
    146a:	4f 91       	pop	r20
    146c:	3f 91       	pop	r19
    146e:	2f 91       	pop	r18
    1470:	0f 90       	pop	r0
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	0f 90       	pop	r0
    1476:	1f 90       	pop	r1
    1478:	18 95       	reti

0000147a <__vector_3>:

void __vector_3 () __attribute__ ((signal));
void __vector_3 ()
{
    147a:	1f 92       	push	r1
    147c:	0f 92       	push	r0
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	0f 92       	push	r0
    1482:	11 24       	eor	r1, r1
    1484:	2f 93       	push	r18
    1486:	3f 93       	push	r19
    1488:	4f 93       	push	r20
    148a:	5f 93       	push	r21
    148c:	6f 93       	push	r22
    148e:	7f 93       	push	r23
    1490:	8f 93       	push	r24
    1492:	9f 93       	push	r25
    1494:	af 93       	push	r26
    1496:	bf 93       	push	r27
    1498:	ef 93       	push	r30
    149a:	ff 93       	push	r31
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
	if(ptr_ArrCallBack[2] !=NULL)
    14a4:	80 91 92 01 	lds	r24, 0x0192
    14a8:	90 91 93 01 	lds	r25, 0x0193
    14ac:	00 97       	sbiw	r24, 0x00	; 0
    14ae:	29 f0       	breq	.+10     	; 0x14ba <__vector_3+0x40>
		{
		ptr_ArrCallBack[2]();
    14b0:	e0 91 92 01 	lds	r30, 0x0192
    14b4:	f0 91 93 01 	lds	r31, 0x0193
    14b8:	09 95       	icall
		}


}
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	ff 91       	pop	r31
    14c0:	ef 91       	pop	r30
    14c2:	bf 91       	pop	r27
    14c4:	af 91       	pop	r26
    14c6:	9f 91       	pop	r25
    14c8:	8f 91       	pop	r24
    14ca:	7f 91       	pop	r23
    14cc:	6f 91       	pop	r22
    14ce:	5f 91       	pop	r21
    14d0:	4f 91       	pop	r20
    14d2:	3f 91       	pop	r19
    14d4:	2f 91       	pop	r18
    14d6:	0f 90       	pop	r0
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	0f 90       	pop	r0
    14dc:	1f 90       	pop	r1
    14de:	18 95       	reti

000014e0 <DIO_voidSetPortDirection>:
#include"DIO_Interface.h"

/*****************************************************************************/

void DIO_voidSetPortDirection(u8 Copy_u8portID,u8 Copy_u8PortDir )
{
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	00 d0       	rcall	.+0      	; 0x14e6 <DIO_voidSetPortDirection+0x6>
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <DIO_voidSetPortDirection+0x8>
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
    14ec:	89 83       	std	Y+1, r24	; 0x01
    14ee:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8portID)
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	3c 83       	std	Y+4, r19	; 0x04
    14f8:	2b 83       	std	Y+3, r18	; 0x03
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	9c 81       	ldd	r25, Y+4	; 0x04
    14fe:	81 30       	cpi	r24, 0x01	; 1
    1500:	91 05       	cpc	r25, r1
    1502:	d1 f0       	breq	.+52     	; 0x1538 <DIO_voidSetPortDirection+0x58>
    1504:	2b 81       	ldd	r18, Y+3	; 0x03
    1506:	3c 81       	ldd	r19, Y+4	; 0x04
    1508:	22 30       	cpi	r18, 0x02	; 2
    150a:	31 05       	cpc	r19, r1
    150c:	2c f4       	brge	.+10     	; 0x1518 <DIO_voidSetPortDirection+0x38>
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	9c 81       	ldd	r25, Y+4	; 0x04
    1512:	00 97       	sbiw	r24, 0x00	; 0
    1514:	61 f0       	breq	.+24     	; 0x152e <DIO_voidSetPortDirection+0x4e>
    1516:	1e c0       	rjmp	.+60     	; 0x1554 <DIO_voidSetPortDirection+0x74>
    1518:	2b 81       	ldd	r18, Y+3	; 0x03
    151a:	3c 81       	ldd	r19, Y+4	; 0x04
    151c:	22 30       	cpi	r18, 0x02	; 2
    151e:	31 05       	cpc	r19, r1
    1520:	81 f0       	breq	.+32     	; 0x1542 <DIO_voidSetPortDirection+0x62>
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	9c 81       	ldd	r25, Y+4	; 0x04
    1526:	83 30       	cpi	r24, 0x03	; 3
    1528:	91 05       	cpc	r25, r1
    152a:	81 f0       	breq	.+32     	; 0x154c <DIO_voidSetPortDirection+0x6c>
    152c:	13 c0       	rjmp	.+38     	; 0x1554 <DIO_voidSetPortDirection+0x74>
	{
	case PORTA_ID :   DDRA_REG= Copy_u8PortDir ; break ;
    152e:	ea e3       	ldi	r30, 0x3A	; 58
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	80 83       	st	Z, r24
    1536:	0e c0       	rjmp	.+28     	; 0x1554 <DIO_voidSetPortDirection+0x74>
	case PORTB_ID :   DDRB_REG= Copy_u8PortDir ; break ;
    1538:	e7 e3       	ldi	r30, 0x37	; 55
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	80 83       	st	Z, r24
    1540:	09 c0       	rjmp	.+18     	; 0x1554 <DIO_voidSetPortDirection+0x74>
	case PORTC_ID :   DDRC_REG= Copy_u8PortDir ; break ;
    1542:	e4 e3       	ldi	r30, 0x34	; 52
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	80 83       	st	Z, r24
    154a:	04 c0       	rjmp	.+8      	; 0x1554 <DIO_voidSetPortDirection+0x74>
	case PORTD_ID :   DDRD_REG= Copy_u8PortDir ; break ;
    154c:	e1 e3       	ldi	r30, 0x31	; 49
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	80 83       	st	Z, r24

	}
}
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	cf 91       	pop	r28
    155e:	df 91       	pop	r29
    1560:	08 95       	ret

00001562 <DIO_voidSetPortValue>:
/*****************************************************************************/

void DIO_voidSetPortValue(u8 Copy_u8PortID,u8 Copy_u8PortVal )

{
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	00 d0       	rcall	.+0      	; 0x1568 <DIO_voidSetPortValue+0x6>
    1568:	00 d0       	rcall	.+0      	; 0x156a <DIO_voidSetPortValue+0x8>
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
    156e:	89 83       	std	Y+1, r24	; 0x01
    1570:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8PortID)
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	3c 83       	std	Y+4, r19	; 0x04
    157a:	2b 83       	std	Y+3, r18	; 0x03
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	9c 81       	ldd	r25, Y+4	; 0x04
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	91 05       	cpc	r25, r1
    1584:	d1 f0       	breq	.+52     	; 0x15ba <DIO_voidSetPortValue+0x58>
    1586:	2b 81       	ldd	r18, Y+3	; 0x03
    1588:	3c 81       	ldd	r19, Y+4	; 0x04
    158a:	22 30       	cpi	r18, 0x02	; 2
    158c:	31 05       	cpc	r19, r1
    158e:	2c f4       	brge	.+10     	; 0x159a <DIO_voidSetPortValue+0x38>
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	00 97       	sbiw	r24, 0x00	; 0
    1596:	61 f0       	breq	.+24     	; 0x15b0 <DIO_voidSetPortValue+0x4e>
    1598:	1e c0       	rjmp	.+60     	; 0x15d6 <DIO_voidSetPortValue+0x74>
    159a:	2b 81       	ldd	r18, Y+3	; 0x03
    159c:	3c 81       	ldd	r19, Y+4	; 0x04
    159e:	22 30       	cpi	r18, 0x02	; 2
    15a0:	31 05       	cpc	r19, r1
    15a2:	81 f0       	breq	.+32     	; 0x15c4 <DIO_voidSetPortValue+0x62>
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	9c 81       	ldd	r25, Y+4	; 0x04
    15a8:	83 30       	cpi	r24, 0x03	; 3
    15aa:	91 05       	cpc	r25, r1
    15ac:	81 f0       	breq	.+32     	; 0x15ce <DIO_voidSetPortValue+0x6c>
    15ae:	13 c0       	rjmp	.+38     	; 0x15d6 <DIO_voidSetPortValue+0x74>
	{

	case PORTA_ID :   PORTA_REG= Copy_u8PortVal ; break ;
    15b0:	eb e3       	ldi	r30, 0x3B	; 59
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	80 83       	st	Z, r24
    15b8:	0e c0       	rjmp	.+28     	; 0x15d6 <DIO_voidSetPortValue+0x74>
	case PORTB_ID :   PORTB_REG= Copy_u8PortVal ; break ;
    15ba:	e8 e3       	ldi	r30, 0x38	; 56
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	80 83       	st	Z, r24
    15c2:	09 c0       	rjmp	.+18     	; 0x15d6 <DIO_voidSetPortValue+0x74>
	case PORTC_ID :   PORTC_REG= Copy_u8PortVal ; break ;
    15c4:	e5 e3       	ldi	r30, 0x35	; 53
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	80 83       	st	Z, r24
    15cc:	04 c0       	rjmp	.+8      	; 0x15d6 <DIO_voidSetPortValue+0x74>
	case PORTD_ID :   PORTD_REG= Copy_u8PortVal ; break ;
    15ce:	e2 e3       	ldi	r30, 0x32	; 50
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	80 83       	st	Z, r24

	}
}
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	cf 91       	pop	r28
    15e0:	df 91       	pop	r29
    15e2:	08 95       	ret

000015e4 <DIO_voidSetPinDirection>:

/*****************************************************************************/


void	DIO_voidSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinDir)
{
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	27 97       	sbiw	r28, 0x07	; 7
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	de bf       	out	0x3e, r29	; 62
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	cd bf       	out	0x3d, r28	; 61
    15f8:	89 83       	std	Y+1, r24	; 0x01
    15fa:	6a 83       	std	Y+2, r22	; 0x02
    15fc:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinID>=PIN0 &&Copy_u8PinID<=PIN7)
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	88 30       	cpi	r24, 0x08	; 8
    1602:	08 f0       	brcs	.+2      	; 0x1606 <DIO_voidSetPinDirection+0x22>
    1604:	ea c0       	rjmp	.+468    	; 0x17da <DIO_voidSetPinDirection+0x1f6>
	{
		if(Copy_u8PinDir==PIN_OUTPUT)//Output
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	09 f0       	breq	.+2      	; 0x160e <DIO_voidSetPinDirection+0x2a>
    160c:	6f c0       	rjmp	.+222    	; 0x16ec <DIO_voidSetPinDirection+0x108>
		{
			switch(Copy_u8PortID)
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	3f 83       	std	Y+7, r19	; 0x07
    1616:	2e 83       	std	Y+6, r18	; 0x06
    1618:	8e 81       	ldd	r24, Y+6	; 0x06
    161a:	9f 81       	ldd	r25, Y+7	; 0x07
    161c:	81 30       	cpi	r24, 0x01	; 1
    161e:	91 05       	cpc	r25, r1
    1620:	49 f1       	breq	.+82     	; 0x1674 <DIO_voidSetPinDirection+0x90>
    1622:	2e 81       	ldd	r18, Y+6	; 0x06
    1624:	3f 81       	ldd	r19, Y+7	; 0x07
    1626:	22 30       	cpi	r18, 0x02	; 2
    1628:	31 05       	cpc	r19, r1
    162a:	2c f4       	brge	.+10     	; 0x1636 <DIO_voidSetPinDirection+0x52>
    162c:	8e 81       	ldd	r24, Y+6	; 0x06
    162e:	9f 81       	ldd	r25, Y+7	; 0x07
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	61 f0       	breq	.+24     	; 0x164c <DIO_voidSetPinDirection+0x68>
    1634:	d2 c0       	rjmp	.+420    	; 0x17da <DIO_voidSetPinDirection+0x1f6>
    1636:	2e 81       	ldd	r18, Y+6	; 0x06
    1638:	3f 81       	ldd	r19, Y+7	; 0x07
    163a:	22 30       	cpi	r18, 0x02	; 2
    163c:	31 05       	cpc	r19, r1
    163e:	71 f1       	breq	.+92     	; 0x169c <DIO_voidSetPinDirection+0xb8>
    1640:	8e 81       	ldd	r24, Y+6	; 0x06
    1642:	9f 81       	ldd	r25, Y+7	; 0x07
    1644:	83 30       	cpi	r24, 0x03	; 3
    1646:	91 05       	cpc	r25, r1
    1648:	e9 f1       	breq	.+122    	; 0x16c4 <DIO_voidSetPinDirection+0xe0>
    164a:	c7 c0       	rjmp	.+398    	; 0x17da <DIO_voidSetPinDirection+0x1f6>
			{
			case PORTA_ID:    SET_BIT(DDRA_REG,Copy_u8PinID); break;
    164c:	aa e3       	ldi	r26, 0x3A	; 58
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	ea e3       	ldi	r30, 0x3A	; 58
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	48 2f       	mov	r20, r24
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 2e       	mov	r0, r18
    1664:	02 c0       	rjmp	.+4      	; 0x166a <DIO_voidSetPinDirection+0x86>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	0a 94       	dec	r0
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <DIO_voidSetPinDirection+0x82>
    166e:	84 2b       	or	r24, r20
    1670:	8c 93       	st	X, r24
    1672:	b3 c0       	rjmp	.+358    	; 0x17da <DIO_voidSetPinDirection+0x1f6>
			case PORTB_ID:    SET_BIT(DDRB_REG,Copy_u8PinID); break;
    1674:	a7 e3       	ldi	r26, 0x37	; 55
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e7 e3       	ldi	r30, 0x37	; 55
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	48 2f       	mov	r20, r24
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	02 2e       	mov	r0, r18
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <DIO_voidSetPinDirection+0xae>
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	0a 94       	dec	r0
    1694:	e2 f7       	brpl	.-8      	; 0x168e <DIO_voidSetPinDirection+0xaa>
    1696:	84 2b       	or	r24, r20
    1698:	8c 93       	st	X, r24
    169a:	9f c0       	rjmp	.+318    	; 0x17da <DIO_voidSetPinDirection+0x1f6>
			case PORTC_ID:    SET_BIT(DDRC_REG,Copy_u8PinID); break;
    169c:	a4 e3       	ldi	r26, 0x34	; 52
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e4 e3       	ldi	r30, 0x34	; 52
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	48 2f       	mov	r20, r24
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	02 2e       	mov	r0, r18
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <DIO_voidSetPinDirection+0xd6>
    16b6:	88 0f       	add	r24, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	0a 94       	dec	r0
    16bc:	e2 f7       	brpl	.-8      	; 0x16b6 <DIO_voidSetPinDirection+0xd2>
    16be:	84 2b       	or	r24, r20
    16c0:	8c 93       	st	X, r24
    16c2:	8b c0       	rjmp	.+278    	; 0x17da <DIO_voidSetPinDirection+0x1f6>
			case PORTD_ID:    SET_BIT(DDRD_REG,Copy_u8PinID); break;
    16c4:	a1 e3       	ldi	r26, 0x31	; 49
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e1 e3       	ldi	r30, 0x31	; 49
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	48 2f       	mov	r20, r24
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	02 2e       	mov	r0, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <DIO_voidSetPinDirection+0xfe>
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	0a 94       	dec	r0
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <DIO_voidSetPinDirection+0xfa>
    16e6:	84 2b       	or	r24, r20
    16e8:	8c 93       	st	X, r24
    16ea:	77 c0       	rjmp	.+238    	; 0x17da <DIO_voidSetPinDirection+0x1f6>

			default:   break;

			}
		}
		else if(Copy_u8PinDir==PIN_INPUT)//Input
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	88 23       	and	r24, r24
    16f0:	09 f0       	breq	.+2      	; 0x16f4 <DIO_voidSetPinDirection+0x110>
    16f2:	73 c0       	rjmp	.+230    	; 0x17da <DIO_voidSetPinDirection+0x1f6>
		{
			switch(Copy_u8PortID)
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	3d 83       	std	Y+5, r19	; 0x05
    16fc:	2c 83       	std	Y+4, r18	; 0x04
    16fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1700:	9d 81       	ldd	r25, Y+5	; 0x05
    1702:	81 30       	cpi	r24, 0x01	; 1
    1704:	91 05       	cpc	r25, r1
    1706:	59 f1       	breq	.+86     	; 0x175e <DIO_voidSetPinDirection+0x17a>
    1708:	2c 81       	ldd	r18, Y+4	; 0x04
    170a:	3d 81       	ldd	r19, Y+5	; 0x05
    170c:	22 30       	cpi	r18, 0x02	; 2
    170e:	31 05       	cpc	r19, r1
    1710:	2c f4       	brge	.+10     	; 0x171c <DIO_voidSetPinDirection+0x138>
    1712:	8c 81       	ldd	r24, Y+4	; 0x04
    1714:	9d 81       	ldd	r25, Y+5	; 0x05
    1716:	00 97       	sbiw	r24, 0x00	; 0
    1718:	69 f0       	breq	.+26     	; 0x1734 <DIO_voidSetPinDirection+0x150>
    171a:	5f c0       	rjmp	.+190    	; 0x17da <DIO_voidSetPinDirection+0x1f6>
    171c:	2c 81       	ldd	r18, Y+4	; 0x04
    171e:	3d 81       	ldd	r19, Y+5	; 0x05
    1720:	22 30       	cpi	r18, 0x02	; 2
    1722:	31 05       	cpc	r19, r1
    1724:	89 f1       	breq	.+98     	; 0x1788 <DIO_voidSetPinDirection+0x1a4>
    1726:	8c 81       	ldd	r24, Y+4	; 0x04
    1728:	9d 81       	ldd	r25, Y+5	; 0x05
    172a:	83 30       	cpi	r24, 0x03	; 3
    172c:	91 05       	cpc	r25, r1
    172e:	09 f4       	brne	.+2      	; 0x1732 <DIO_voidSetPinDirection+0x14e>
    1730:	40 c0       	rjmp	.+128    	; 0x17b2 <DIO_voidSetPinDirection+0x1ce>
    1732:	53 c0       	rjmp	.+166    	; 0x17da <DIO_voidSetPinDirection+0x1f6>
			{
			case PORTA_ID:   CLR_BIT(DDRA_REG,Copy_u8PinID); break;
    1734:	aa e3       	ldi	r26, 0x3A	; 58
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	ea e3       	ldi	r30, 0x3A	; 58
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	48 2f       	mov	r20, r24
    1740:	8a 81       	ldd	r24, Y+2	; 0x02
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	02 2e       	mov	r0, r18
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <DIO_voidSetPinDirection+0x16e>
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	0a 94       	dec	r0
    1754:	e2 f7       	brpl	.-8      	; 0x174e <DIO_voidSetPinDirection+0x16a>
    1756:	80 95       	com	r24
    1758:	84 23       	and	r24, r20
    175a:	8c 93       	st	X, r24
    175c:	3e c0       	rjmp	.+124    	; 0x17da <DIO_voidSetPinDirection+0x1f6>
			case PORTB_ID:   CLR_BIT(DDRB_REG,Copy_u8PinID); break;
    175e:	a7 e3       	ldi	r26, 0x37	; 55
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e7 e3       	ldi	r30, 0x37	; 55
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	48 2f       	mov	r20, r24
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	02 2e       	mov	r0, r18
    1776:	02 c0       	rjmp	.+4      	; 0x177c <DIO_voidSetPinDirection+0x198>
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	0a 94       	dec	r0
    177e:	e2 f7       	brpl	.-8      	; 0x1778 <DIO_voidSetPinDirection+0x194>
    1780:	80 95       	com	r24
    1782:	84 23       	and	r24, r20
    1784:	8c 93       	st	X, r24
    1786:	29 c0       	rjmp	.+82     	; 0x17da <DIO_voidSetPinDirection+0x1f6>
			case PORTC_ID:   CLR_BIT(DDRC_REG,Copy_u8PinID); break;
    1788:	a4 e3       	ldi	r26, 0x34	; 52
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e4 e3       	ldi	r30, 0x34	; 52
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	48 2f       	mov	r20, r24
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	28 2f       	mov	r18, r24
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	02 2e       	mov	r0, r18
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <DIO_voidSetPinDirection+0x1c2>
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	0a 94       	dec	r0
    17a8:	e2 f7       	brpl	.-8      	; 0x17a2 <DIO_voidSetPinDirection+0x1be>
    17aa:	80 95       	com	r24
    17ac:	84 23       	and	r24, r20
    17ae:	8c 93       	st	X, r24
    17b0:	14 c0       	rjmp	.+40     	; 0x17da <DIO_voidSetPinDirection+0x1f6>
			case PORTD_ID:   CLR_BIT(DDRD_REG,Copy_u8PinID); break;
    17b2:	a1 e3       	ldi	r26, 0x31	; 49
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e1 e3       	ldi	r30, 0x31	; 49
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	48 2f       	mov	r20, r24
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	02 2e       	mov	r0, r18
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <DIO_voidSetPinDirection+0x1ec>
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	0a 94       	dec	r0
    17d2:	e2 f7       	brpl	.-8      	; 0x17cc <DIO_voidSetPinDirection+0x1e8>
    17d4:	80 95       	com	r24
    17d6:	84 23       	and	r24, r20
    17d8:	8c 93       	st	X, r24
			default:   break;
			}
		}
	}

}
    17da:	27 96       	adiw	r28, 0x07	; 7
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	f8 94       	cli
    17e0:	de bf       	out	0x3e, r29	; 62
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	cd bf       	out	0x3d, r28	; 61
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret

000017ec <DIO_voidSetPinValue>:
/*****************************************************************************/
void    DIO_voidSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue)
{
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62
    17f4:	27 97       	sbiw	r28, 0x07	; 7
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	f8 94       	cli
    17fa:	de bf       	out	0x3e, r29	; 62
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	cd bf       	out	0x3d, r28	; 61
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	6a 83       	std	Y+2, r22	; 0x02
    1804:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinID>=PIN0&&Copy_u8PinID<=PIN7)
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	88 30       	cpi	r24, 0x08	; 8
    180a:	08 f0       	brcs	.+2      	; 0x180e <DIO_voidSetPinValue+0x22>
    180c:	ea c0       	rjmp	.+468    	; 0x19e2 <DIO_voidSetPinValue+0x1f6>
	{
		if(Copy_u8PinValue==PIN_HIGH)//High
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	81 30       	cpi	r24, 0x01	; 1
    1812:	09 f0       	breq	.+2      	; 0x1816 <DIO_voidSetPinValue+0x2a>
    1814:	6f c0       	rjmp	.+222    	; 0x18f4 <DIO_voidSetPinValue+0x108>
		{

			switch(Copy_u8PortID)
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	3f 83       	std	Y+7, r19	; 0x07
    181e:	2e 83       	std	Y+6, r18	; 0x06
    1820:	8e 81       	ldd	r24, Y+6	; 0x06
    1822:	9f 81       	ldd	r25, Y+7	; 0x07
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	91 05       	cpc	r25, r1
    1828:	49 f1       	breq	.+82     	; 0x187c <DIO_voidSetPinValue+0x90>
    182a:	2e 81       	ldd	r18, Y+6	; 0x06
    182c:	3f 81       	ldd	r19, Y+7	; 0x07
    182e:	22 30       	cpi	r18, 0x02	; 2
    1830:	31 05       	cpc	r19, r1
    1832:	2c f4       	brge	.+10     	; 0x183e <DIO_voidSetPinValue+0x52>
    1834:	8e 81       	ldd	r24, Y+6	; 0x06
    1836:	9f 81       	ldd	r25, Y+7	; 0x07
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	61 f0       	breq	.+24     	; 0x1854 <DIO_voidSetPinValue+0x68>
    183c:	d2 c0       	rjmp	.+420    	; 0x19e2 <DIO_voidSetPinValue+0x1f6>
    183e:	2e 81       	ldd	r18, Y+6	; 0x06
    1840:	3f 81       	ldd	r19, Y+7	; 0x07
    1842:	22 30       	cpi	r18, 0x02	; 2
    1844:	31 05       	cpc	r19, r1
    1846:	71 f1       	breq	.+92     	; 0x18a4 <DIO_voidSetPinValue+0xb8>
    1848:	8e 81       	ldd	r24, Y+6	; 0x06
    184a:	9f 81       	ldd	r25, Y+7	; 0x07
    184c:	83 30       	cpi	r24, 0x03	; 3
    184e:	91 05       	cpc	r25, r1
    1850:	e9 f1       	breq	.+122    	; 0x18cc <DIO_voidSetPinValue+0xe0>
    1852:	c7 c0       	rjmp	.+398    	; 0x19e2 <DIO_voidSetPinValue+0x1f6>
			{
			case PORTA_ID :    SET_BIT(PORTA_REG,Copy_u8PinID); break;
    1854:	ab e3       	ldi	r26, 0x3B	; 59
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	eb e3       	ldi	r30, 0x3B	; 59
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	48 2f       	mov	r20, r24
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	02 2e       	mov	r0, r18
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <DIO_voidSetPinValue+0x86>
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	0a 94       	dec	r0
    1874:	e2 f7       	brpl	.-8      	; 0x186e <DIO_voidSetPinValue+0x82>
    1876:	84 2b       	or	r24, r20
    1878:	8c 93       	st	X, r24
    187a:	b3 c0       	rjmp	.+358    	; 0x19e2 <DIO_voidSetPinValue+0x1f6>
			case PORTB_ID :    SET_BIT(PORTB_REG,Copy_u8PinID); break;
    187c:	a8 e3       	ldi	r26, 0x38	; 56
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e8 e3       	ldi	r30, 0x38	; 56
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	48 2f       	mov	r20, r24
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	28 2f       	mov	r18, r24
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	02 2e       	mov	r0, r18
    1894:	02 c0       	rjmp	.+4      	; 0x189a <DIO_voidSetPinValue+0xae>
    1896:	88 0f       	add	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	0a 94       	dec	r0
    189c:	e2 f7       	brpl	.-8      	; 0x1896 <DIO_voidSetPinValue+0xaa>
    189e:	84 2b       	or	r24, r20
    18a0:	8c 93       	st	X, r24
    18a2:	9f c0       	rjmp	.+318    	; 0x19e2 <DIO_voidSetPinValue+0x1f6>
			case PORTC_ID :    SET_BIT(PORTC_REG,Copy_u8PinID); break;
    18a4:	a5 e3       	ldi	r26, 0x35	; 53
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	e5 e3       	ldi	r30, 0x35	; 53
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	48 2f       	mov	r20, r24
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	02 2e       	mov	r0, r18
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <DIO_voidSetPinValue+0xd6>
    18be:	88 0f       	add	r24, r24
    18c0:	99 1f       	adc	r25, r25
    18c2:	0a 94       	dec	r0
    18c4:	e2 f7       	brpl	.-8      	; 0x18be <DIO_voidSetPinValue+0xd2>
    18c6:	84 2b       	or	r24, r20
    18c8:	8c 93       	st	X, r24
    18ca:	8b c0       	rjmp	.+278    	; 0x19e2 <DIO_voidSetPinValue+0x1f6>
			case PORTD_ID :    SET_BIT(PORTD_REG,Copy_u8PinID); break;
    18cc:	a2 e3       	ldi	r26, 0x32	; 50
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	e2 e3       	ldi	r30, 0x32	; 50
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	48 2f       	mov	r20, r24
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	02 2e       	mov	r0, r18
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <DIO_voidSetPinValue+0xfe>
    18e6:	88 0f       	add	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	0a 94       	dec	r0
    18ec:	e2 f7       	brpl	.-8      	; 0x18e6 <DIO_voidSetPinValue+0xfa>
    18ee:	84 2b       	or	r24, r20
    18f0:	8c 93       	st	X, r24
    18f2:	77 c0       	rjmp	.+238    	; 0x19e2 <DIO_voidSetPinValue+0x1f6>

			}
		}
		else if(Copy_u8PinValue==PIN_LOW)//Low
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	88 23       	and	r24, r24
    18f8:	09 f0       	breq	.+2      	; 0x18fc <DIO_voidSetPinValue+0x110>
    18fa:	73 c0       	rjmp	.+230    	; 0x19e2 <DIO_voidSetPinValue+0x1f6>
		{
			switch(Copy_u8PortID)
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	3d 83       	std	Y+5, r19	; 0x05
    1904:	2c 83       	std	Y+4, r18	; 0x04
    1906:	8c 81       	ldd	r24, Y+4	; 0x04
    1908:	9d 81       	ldd	r25, Y+5	; 0x05
    190a:	81 30       	cpi	r24, 0x01	; 1
    190c:	91 05       	cpc	r25, r1
    190e:	59 f1       	breq	.+86     	; 0x1966 <DIO_voidSetPinValue+0x17a>
    1910:	2c 81       	ldd	r18, Y+4	; 0x04
    1912:	3d 81       	ldd	r19, Y+5	; 0x05
    1914:	22 30       	cpi	r18, 0x02	; 2
    1916:	31 05       	cpc	r19, r1
    1918:	2c f4       	brge	.+10     	; 0x1924 <DIO_voidSetPinValue+0x138>
    191a:	8c 81       	ldd	r24, Y+4	; 0x04
    191c:	9d 81       	ldd	r25, Y+5	; 0x05
    191e:	00 97       	sbiw	r24, 0x00	; 0
    1920:	69 f0       	breq	.+26     	; 0x193c <DIO_voidSetPinValue+0x150>
    1922:	5f c0       	rjmp	.+190    	; 0x19e2 <DIO_voidSetPinValue+0x1f6>
    1924:	2c 81       	ldd	r18, Y+4	; 0x04
    1926:	3d 81       	ldd	r19, Y+5	; 0x05
    1928:	22 30       	cpi	r18, 0x02	; 2
    192a:	31 05       	cpc	r19, r1
    192c:	89 f1       	breq	.+98     	; 0x1990 <DIO_voidSetPinValue+0x1a4>
    192e:	8c 81       	ldd	r24, Y+4	; 0x04
    1930:	9d 81       	ldd	r25, Y+5	; 0x05
    1932:	83 30       	cpi	r24, 0x03	; 3
    1934:	91 05       	cpc	r25, r1
    1936:	09 f4       	brne	.+2      	; 0x193a <DIO_voidSetPinValue+0x14e>
    1938:	40 c0       	rjmp	.+128    	; 0x19ba <DIO_voidSetPinValue+0x1ce>
    193a:	53 c0       	rjmp	.+166    	; 0x19e2 <DIO_voidSetPinValue+0x1f6>
			{
			case PORTA_ID : CLR_BIT(PORTA_REG,Copy_u8PinID); break ;
    193c:	ab e3       	ldi	r26, 0x3B	; 59
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	eb e3       	ldi	r30, 0x3B	; 59
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	48 2f       	mov	r20, r24
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	02 2e       	mov	r0, r18
    1954:	02 c0       	rjmp	.+4      	; 0x195a <DIO_voidSetPinValue+0x16e>
    1956:	88 0f       	add	r24, r24
    1958:	99 1f       	adc	r25, r25
    195a:	0a 94       	dec	r0
    195c:	e2 f7       	brpl	.-8      	; 0x1956 <DIO_voidSetPinValue+0x16a>
    195e:	80 95       	com	r24
    1960:	84 23       	and	r24, r20
    1962:	8c 93       	st	X, r24
    1964:	3e c0       	rjmp	.+124    	; 0x19e2 <DIO_voidSetPinValue+0x1f6>
			case PORTB_ID : CLR_BIT(PORTB_REG,Copy_u8PinID); break ;
    1966:	a8 e3       	ldi	r26, 0x38	; 56
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e8 e3       	ldi	r30, 0x38	; 56
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	48 2f       	mov	r20, r24
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	02 2e       	mov	r0, r18
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <DIO_voidSetPinValue+0x198>
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	0a 94       	dec	r0
    1986:	e2 f7       	brpl	.-8      	; 0x1980 <DIO_voidSetPinValue+0x194>
    1988:	80 95       	com	r24
    198a:	84 23       	and	r24, r20
    198c:	8c 93       	st	X, r24
    198e:	29 c0       	rjmp	.+82     	; 0x19e2 <DIO_voidSetPinValue+0x1f6>
			case PORTC_ID : CLR_BIT(PORTC_REG,Copy_u8PinID) ;break ;
    1990:	a5 e3       	ldi	r26, 0x35	; 53
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e5 e3       	ldi	r30, 0x35	; 53
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	48 2f       	mov	r20, r24
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	02 2e       	mov	r0, r18
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <DIO_voidSetPinValue+0x1c2>
    19aa:	88 0f       	add	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	0a 94       	dec	r0
    19b0:	e2 f7       	brpl	.-8      	; 0x19aa <DIO_voidSetPinValue+0x1be>
    19b2:	80 95       	com	r24
    19b4:	84 23       	and	r24, r20
    19b6:	8c 93       	st	X, r24
    19b8:	14 c0       	rjmp	.+40     	; 0x19e2 <DIO_voidSetPinValue+0x1f6>
			case PORTD_ID : CLR_BIT(PORTD_REG,Copy_u8PinID) ;break ;
    19ba:	a2 e3       	ldi	r26, 0x32	; 50
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e2 e3       	ldi	r30, 0x32	; 50
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	48 2f       	mov	r20, r24
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	02 2e       	mov	r0, r18
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <DIO_voidSetPinValue+0x1ec>
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	0a 94       	dec	r0
    19da:	e2 f7       	brpl	.-8      	; 0x19d4 <DIO_voidSetPinValue+0x1e8>
    19dc:	80 95       	com	r24
    19de:	84 23       	and	r24, r20
    19e0:	8c 93       	st	X, r24

			}
		}
	}
}
    19e2:	27 96       	adiw	r28, 0x07	; 7
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	f8 94       	cli
    19e8:	de bf       	out	0x3e, r29	; 62
    19ea:	0f be       	out	0x3f, r0	; 63
    19ec:	cd bf       	out	0x3d, r28	; 61
    19ee:	cf 91       	pop	r28
    19f0:	df 91       	pop	r29
    19f2:	08 95       	ret

000019f4 <DIO_u8GetBitValue>:
/*****************************************************************************/
u8 DIO_u8GetBitValue(u8 copy_u8PortID , u8 Copy_u8PinID )
{
    19f4:	df 93       	push	r29
    19f6:	cf 93       	push	r28
    19f8:	00 d0       	rcall	.+0      	; 0x19fa <DIO_u8GetBitValue+0x6>
    19fa:	00 d0       	rcall	.+0      	; 0x19fc <DIO_u8GetBitValue+0x8>
    19fc:	0f 92       	push	r0
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
    1a02:	8a 83       	std	Y+2, r24	; 0x02
    1a04:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_PinVal ;

	if( Copy_u8PinID>=PIN0 && Copy_u8PinID<=PIN7 )
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	88 30       	cpi	r24, 0x08	; 8
    1a0a:	08 f0       	brcs	.+2      	; 0x1a0e <DIO_u8GetBitValue+0x1a>
    1a0c:	67 c0       	rjmp	.+206    	; 0x1adc <DIO_u8GetBitValue+0xe8>
	{
		switch(copy_u8PortID)
    1a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a10:	28 2f       	mov	r18, r24
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	3d 83       	std	Y+5, r19	; 0x05
    1a16:	2c 83       	std	Y+4, r18	; 0x04
    1a18:	4c 81       	ldd	r20, Y+4	; 0x04
    1a1a:	5d 81       	ldd	r21, Y+5	; 0x05
    1a1c:	41 30       	cpi	r20, 0x01	; 1
    1a1e:	51 05       	cpc	r21, r1
    1a20:	41 f1       	breq	.+80     	; 0x1a72 <DIO_u8GetBitValue+0x7e>
    1a22:	8c 81       	ldd	r24, Y+4	; 0x04
    1a24:	9d 81       	ldd	r25, Y+5	; 0x05
    1a26:	82 30       	cpi	r24, 0x02	; 2
    1a28:	91 05       	cpc	r25, r1
    1a2a:	34 f4       	brge	.+12     	; 0x1a38 <DIO_u8GetBitValue+0x44>
    1a2c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a2e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a30:	21 15       	cp	r18, r1
    1a32:	31 05       	cpc	r19, r1
    1a34:	61 f0       	breq	.+24     	; 0x1a4e <DIO_u8GetBitValue+0x5a>
    1a36:	52 c0       	rjmp	.+164    	; 0x1adc <DIO_u8GetBitValue+0xe8>
    1a38:	4c 81       	ldd	r20, Y+4	; 0x04
    1a3a:	5d 81       	ldd	r21, Y+5	; 0x05
    1a3c:	42 30       	cpi	r20, 0x02	; 2
    1a3e:	51 05       	cpc	r21, r1
    1a40:	51 f1       	breq	.+84     	; 0x1a96 <DIO_u8GetBitValue+0xa2>
    1a42:	8c 81       	ldd	r24, Y+4	; 0x04
    1a44:	9d 81       	ldd	r25, Y+5	; 0x05
    1a46:	83 30       	cpi	r24, 0x03	; 3
    1a48:	91 05       	cpc	r25, r1
    1a4a:	b9 f1       	breq	.+110    	; 0x1aba <DIO_u8GetBitValue+0xc6>
    1a4c:	47 c0       	rjmp	.+142    	; 0x1adc <DIO_u8GetBitValue+0xe8>
		{

		case PORTA_ID : Local_PinVal=GET_BIT(PINA_REG,Copy_u8PinID)   ; break ;
    1a4e:	e9 e3       	ldi	r30, 0x39	; 57
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	88 2f       	mov	r24, r24
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	a9 01       	movw	r20, r18
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <DIO_u8GetBitValue+0x72>
    1a62:	55 95       	asr	r21
    1a64:	47 95       	ror	r20
    1a66:	8a 95       	dec	r24
    1a68:	e2 f7       	brpl	.-8      	; 0x1a62 <DIO_u8GetBitValue+0x6e>
    1a6a:	ca 01       	movw	r24, r20
    1a6c:	81 70       	andi	r24, 0x01	; 1
    1a6e:	89 83       	std	Y+1, r24	; 0x01
    1a70:	35 c0       	rjmp	.+106    	; 0x1adc <DIO_u8GetBitValue+0xe8>
		case PORTB_ID : Local_PinVal=GET_BIT(PINB_REG,Copy_u8PinID)   ; break ;
    1a72:	e6 e3       	ldi	r30, 0x36	; 54
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	88 2f       	mov	r24, r24
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	a9 01       	movw	r20, r18
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <DIO_u8GetBitValue+0x96>
    1a86:	55 95       	asr	r21
    1a88:	47 95       	ror	r20
    1a8a:	8a 95       	dec	r24
    1a8c:	e2 f7       	brpl	.-8      	; 0x1a86 <DIO_u8GetBitValue+0x92>
    1a8e:	ca 01       	movw	r24, r20
    1a90:	81 70       	andi	r24, 0x01	; 1
    1a92:	89 83       	std	Y+1, r24	; 0x01
    1a94:	23 c0       	rjmp	.+70     	; 0x1adc <DIO_u8GetBitValue+0xe8>
		case PORTC_ID : Local_PinVal=GET_BIT(PINC_REG,Copy_u8PinID)   ; break ;
    1a96:	e3 e3       	ldi	r30, 0x33	; 51
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	28 2f       	mov	r18, r24
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa2:	88 2f       	mov	r24, r24
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	a9 01       	movw	r20, r18
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <DIO_u8GetBitValue+0xba>
    1aaa:	55 95       	asr	r21
    1aac:	47 95       	ror	r20
    1aae:	8a 95       	dec	r24
    1ab0:	e2 f7       	brpl	.-8      	; 0x1aaa <DIO_u8GetBitValue+0xb6>
    1ab2:	ca 01       	movw	r24, r20
    1ab4:	81 70       	andi	r24, 0x01	; 1
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    1ab8:	11 c0       	rjmp	.+34     	; 0x1adc <DIO_u8GetBitValue+0xe8>
		case PORTD_ID : Local_PinVal=GET_BIT(PIND_REG,Copy_u8PinID)   ; break ;
    1aba:	e0 e3       	ldi	r30, 0x30	; 48
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	88 2f       	mov	r24, r24
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	a9 01       	movw	r20, r18
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <DIO_u8GetBitValue+0xde>
    1ace:	55 95       	asr	r21
    1ad0:	47 95       	ror	r20
    1ad2:	8a 95       	dec	r24
    1ad4:	e2 f7       	brpl	.-8      	; 0x1ace <DIO_u8GetBitValue+0xda>
    1ad6:	ca 01       	movw	r24, r20
    1ad8:	81 70       	andi	r24, 0x01	; 1
    1ada:	89 83       	std	Y+1, r24	; 0x01

		}
	}

	return Local_PinVal ;
    1adc:	89 81       	ldd	r24, Y+1	; 0x01

}
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	cf 91       	pop	r28
    1aea:	df 91       	pop	r29
    1aec:	08 95       	ret

00001aee <DIO_voidToggelPin>:
}
 */

/*****************************************************************************/
void DIO_voidToggelPin(u8 copy_u8PortID,u8 Copy_u8PinID)
{
    1aee:	df 93       	push	r29
    1af0:	cf 93       	push	r28
    1af2:	00 d0       	rcall	.+0      	; 0x1af4 <DIO_voidToggelPin+0x6>
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <DIO_voidToggelPin+0x8>
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
    1afa:	89 83       	std	Y+1, r24	; 0x01
    1afc:	6a 83       	std	Y+2, r22	; 0x02

	if( Copy_u8PinID>=PIN0 && Copy_u8PinID<=PIN7)
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	88 30       	cpi	r24, 0x08	; 8
    1b02:	08 f0       	brcs	.+2      	; 0x1b06 <DIO_voidToggelPin+0x18>
    1b04:	6e c0       	rjmp	.+220    	; 0x1be2 <DIO_voidToggelPin+0xf4>
	{

		switch (copy_u8PortID)
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	3c 83       	std	Y+4, r19	; 0x04
    1b0e:	2b 83       	std	Y+3, r18	; 0x03
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	9c 81       	ldd	r25, Y+4	; 0x04
    1b14:	81 30       	cpi	r24, 0x01	; 1
    1b16:	91 05       	cpc	r25, r1
    1b18:	49 f1       	breq	.+82     	; 0x1b6c <DIO_voidToggelPin+0x7e>
    1b1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b1e:	22 30       	cpi	r18, 0x02	; 2
    1b20:	31 05       	cpc	r19, r1
    1b22:	2c f4       	brge	.+10     	; 0x1b2e <DIO_voidToggelPin+0x40>
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	9c 81       	ldd	r25, Y+4	; 0x04
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	61 f0       	breq	.+24     	; 0x1b44 <DIO_voidToggelPin+0x56>
    1b2c:	5a c0       	rjmp	.+180    	; 0x1be2 <DIO_voidToggelPin+0xf4>
    1b2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b30:	3c 81       	ldd	r19, Y+4	; 0x04
    1b32:	22 30       	cpi	r18, 0x02	; 2
    1b34:	31 05       	cpc	r19, r1
    1b36:	71 f1       	breq	.+92     	; 0x1b94 <DIO_voidToggelPin+0xa6>
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3c:	83 30       	cpi	r24, 0x03	; 3
    1b3e:	91 05       	cpc	r25, r1
    1b40:	e9 f1       	breq	.+122    	; 0x1bbc <DIO_voidToggelPin+0xce>
    1b42:	4f c0       	rjmp	.+158    	; 0x1be2 <DIO_voidToggelPin+0xf4>
		{
		case PORTA_ID :  TOG_BIT(PORTA_REG,Copy_u8PinID) ; break ;
    1b44:	ab e3       	ldi	r26, 0x3B	; 59
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	eb e3       	ldi	r30, 0x3B	; 59
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	48 2f       	mov	r20, r24
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	02 2e       	mov	r0, r18
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <DIO_voidToggelPin+0x74>
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	0a 94       	dec	r0
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <DIO_voidToggelPin+0x70>
    1b66:	84 27       	eor	r24, r20
    1b68:	8c 93       	st	X, r24
    1b6a:	3b c0       	rjmp	.+118    	; 0x1be2 <DIO_voidToggelPin+0xf4>
		case PORTB_ID :  TOG_BIT(PORTB_REG,Copy_u8PinID) ; break ;
    1b6c:	a8 e3       	ldi	r26, 0x38	; 56
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	e8 e3       	ldi	r30, 0x38	; 56
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	48 2f       	mov	r20, r24
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	02 2e       	mov	r0, r18
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <DIO_voidToggelPin+0x9c>
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	0a 94       	dec	r0
    1b8c:	e2 f7       	brpl	.-8      	; 0x1b86 <DIO_voidToggelPin+0x98>
    1b8e:	84 27       	eor	r24, r20
    1b90:	8c 93       	st	X, r24
    1b92:	27 c0       	rjmp	.+78     	; 0x1be2 <DIO_voidToggelPin+0xf4>
		case PORTC_ID :  TOG_BIT(PORTC_REG,Copy_u8PinID) ; break ;
    1b94:	a5 e3       	ldi	r26, 0x35	; 53
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	e5 e3       	ldi	r30, 0x35	; 53
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	48 2f       	mov	r20, r24
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	02 2e       	mov	r0, r18
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <DIO_voidToggelPin+0xc4>
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	0a 94       	dec	r0
    1bb4:	e2 f7       	brpl	.-8      	; 0x1bae <DIO_voidToggelPin+0xc0>
    1bb6:	84 27       	eor	r24, r20
    1bb8:	8c 93       	st	X, r24
    1bba:	13 c0       	rjmp	.+38     	; 0x1be2 <DIO_voidToggelPin+0xf4>
		case PORTD_ID :  TOG_BIT(PORTD_REG,Copy_u8PinID) ; break ;
    1bbc:	a2 e3       	ldi	r26, 0x32	; 50
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	e2 e3       	ldi	r30, 0x32	; 50
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	48 2f       	mov	r20, r24
    1bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bca:	28 2f       	mov	r18, r24
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	02 2e       	mov	r0, r18
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <DIO_voidToggelPin+0xec>
    1bd6:	88 0f       	add	r24, r24
    1bd8:	99 1f       	adc	r25, r25
    1bda:	0a 94       	dec	r0
    1bdc:	e2 f7       	brpl	.-8      	; 0x1bd6 <DIO_voidToggelPin+0xe8>
    1bde:	84 27       	eor	r24, r20
    1be0:	8c 93       	st	X, r24
		}

	}
}
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	cf 91       	pop	r28
    1bec:	df 91       	pop	r29
    1bee:	08 95       	ret

00001bf0 <Timer0OvFunc>:
f32 Ttick = 0.004, TONTime=0; //ms
u32 dis = 0;
u32 OvCounter=0, TimeOn=0;
u8 edge = 0;

void Timer0OvFunc(){
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62
	OvCounter++;
    1bf8:	80 91 9c 01 	lds	r24, 0x019C
    1bfc:	90 91 9d 01 	lds	r25, 0x019D
    1c00:	a0 91 9e 01 	lds	r26, 0x019E
    1c04:	b0 91 9f 01 	lds	r27, 0x019F
    1c08:	01 96       	adiw	r24, 0x01	; 1
    1c0a:	a1 1d       	adc	r26, r1
    1c0c:	b1 1d       	adc	r27, r1
    1c0e:	80 93 9c 01 	sts	0x019C, r24
    1c12:	90 93 9d 01 	sts	0x019D, r25
    1c16:	a0 93 9e 01 	sts	0x019E, r26
    1c1a:	b0 93 9f 01 	sts	0x019F, r27
}
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <UltrasonicFunc>:

void UltrasonicFunc(){
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
	//rising
	if (edge==RISING_EDGE){
    1c2c:	80 91 a4 01 	lds	r24, 0x01A4
    1c30:	81 30       	cpi	r24, 0x01	; 1
    1c32:	a1 f4       	brne	.+40     	; 0x1c5c <UltrasonicFunc+0x38>

		TIMER0_VoidSetPreload(0);
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	0e 94 87 08 	call	0x110e	; 0x110e <TIMER0_VoidSetPreload>

		TIMER0_VoidStart();
    1c3a:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <TIMER0_VoidStart>

		OvCounter = 0;
    1c3e:	10 92 9c 01 	sts	0x019C, r1
    1c42:	10 92 9d 01 	sts	0x019D, r1
    1c46:	10 92 9e 01 	sts	0x019E, r1
    1c4a:	10 92 9f 01 	sts	0x019F, r1

		EXTINT_voidInit(EXT0_ID,FALLING_EDGE);
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	60 e0       	ldi	r22, 0x00	; 0
    1c52:	0e 94 f5 08 	call	0x11ea	; 0x11ea <EXTINT_voidInit>

		edge = FALLING_EDGE;
    1c56:	10 92 a4 01 	sts	0x01A4, r1
    1c5a:	70 c0       	rjmp	.+224    	; 0x1d3c <UltrasonicFunc+0x118>

	}
	//falling
	else if (edge==FALLING_EDGE){
    1c5c:	80 91 a4 01 	lds	r24, 0x01A4
    1c60:	88 23       	and	r24, r24
    1c62:	09 f0       	breq	.+2      	; 0x1c66 <UltrasonicFunc+0x42>
    1c64:	6b c0       	rjmp	.+214    	; 0x1d3c <UltrasonicFunc+0x118>
		TIMER0_VoidStop();
    1c66:	0e 94 6e 08 	call	0x10dc	; 0x10dc <TIMER0_VoidStop>

		TimeOn = TIMER0_VoidVal();
    1c6a:	0e 94 95 08 	call	0x112a	; 0x112a <TIMER0_VoidVal>
    1c6e:	88 2f       	mov	r24, r24
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	a0 e0       	ldi	r26, 0x00	; 0
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	80 93 a0 01 	sts	0x01A0, r24
    1c7a:	90 93 a1 01 	sts	0x01A1, r25
    1c7e:	a0 93 a2 01 	sts	0x01A2, r26
    1c82:	b0 93 a3 01 	sts	0x01A3, r27

		TONTime = Ttick*(TimeOn+(256*OvCounter));
    1c86:	80 91 9c 01 	lds	r24, 0x019C
    1c8a:	90 91 9d 01 	lds	r25, 0x019D
    1c8e:	a0 91 9e 01 	lds	r26, 0x019E
    1c92:	b0 91 9f 01 	lds	r27, 0x019F
    1c96:	22 27       	eor	r18, r18
    1c98:	38 2f       	mov	r19, r24
    1c9a:	49 2f       	mov	r20, r25
    1c9c:	5a 2f       	mov	r21, r26
    1c9e:	80 91 a0 01 	lds	r24, 0x01A0
    1ca2:	90 91 a1 01 	lds	r25, 0x01A1
    1ca6:	a0 91 a2 01 	lds	r26, 0x01A2
    1caa:	b0 91 a3 01 	lds	r27, 0x01A3
    1cae:	82 0f       	add	r24, r18
    1cb0:	93 1f       	adc	r25, r19
    1cb2:	a4 1f       	adc	r26, r20
    1cb4:	b5 1f       	adc	r27, r21
    1cb6:	bc 01       	movw	r22, r24
    1cb8:	cd 01       	movw	r24, r26
    1cba:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	20 91 68 01 	lds	r18, 0x0168
    1cc6:	30 91 69 01 	lds	r19, 0x0169
    1cca:	40 91 6a 01 	lds	r20, 0x016A
    1cce:	50 91 6b 01 	lds	r21, 0x016B
    1cd2:	bc 01       	movw	r22, r24
    1cd4:	cd 01       	movw	r24, r26
    1cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	80 93 94 01 	sts	0x0194, r24
    1ce2:	90 93 95 01 	sts	0x0195, r25
    1ce6:	a0 93 96 01 	sts	0x0196, r26
    1cea:	b0 93 97 01 	sts	0x0197, r27
		dis = 17 * TONTime;
    1cee:	80 91 94 01 	lds	r24, 0x0194
    1cf2:	90 91 95 01 	lds	r25, 0x0195
    1cf6:	a0 91 96 01 	lds	r26, 0x0196
    1cfa:	b0 91 97 01 	lds	r27, 0x0197
    1cfe:	bc 01       	movw	r22, r24
    1d00:	cd 01       	movw	r24, r26
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	48 e8       	ldi	r20, 0x88	; 136
    1d08:	51 e4       	ldi	r21, 0x41	; 65
    1d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	bc 01       	movw	r22, r24
    1d14:	cd 01       	movw	r24, r26
    1d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	80 93 98 01 	sts	0x0198, r24
    1d22:	90 93 99 01 	sts	0x0199, r25
    1d26:	a0 93 9a 01 	sts	0x019A, r26
    1d2a:	b0 93 9b 01 	sts	0x019B, r27

		EXTINT_voidInit(EXT0_ID,RISING_EDGE);
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	61 e0       	ldi	r22, 0x01	; 1
    1d32:	0e 94 f5 08 	call	0x11ea	; 0x11ea <EXTINT_voidInit>

		edge = RISING_EDGE;
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	80 93 a4 01 	sts	0x01A4, r24
	}
}
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	08 95       	ret

00001d42 <ULTRASONIC_voidInit>:

void ULTRASONIC_voidInit(){
    1d42:	df 93       	push	r29
    1d44:	cf 93       	push	r28
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
	//TR
	DIO_voidSetPinDirection(TRIGGER_PORT,TRIGGER_PIN,PIN_OUTPUT);
    1d4a:	83 e0       	ldi	r24, 0x03	; 3
    1d4c:	63 e0       	ldi	r22, 0x03	; 3
    1d4e:	41 e0       	ldi	r20, 0x01	; 1
    1d50:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <DIO_voidSetPinDirection>

	//ECHO
	DIO_voidSetPinDirection(ECHO_PORT,ECHO_PIN,PIN_INPUT);
    1d54:	83 e0       	ldi	r24, 0x03	; 3
    1d56:	62 e0       	ldi	r22, 0x02	; 2
    1d58:	40 e0       	ldi	r20, 0x00	; 0
    1d5a:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <DIO_voidSetPinDirection>

	//Timer0
	TIMER0_VoidInit();
    1d5e:	0e 94 55 08 	call	0x10aa	; 0x10aa <TIMER0_VoidInit>

	TIMER0_voidSetCallBack(Timer0OvFunc);
    1d62:	88 ef       	ldi	r24, 0xF8	; 248
    1d64:	9d e0       	ldi	r25, 0x0D	; 13
    1d66:	0e 94 12 08 	call	0x1024	; 0x1024 <TIMER0_voidSetCallBack>

	//External Interrupt
	EXTINT_voidInit(EXT0_ID,RISING_EDGE);
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	61 e0       	ldi	r22, 0x01	; 1
    1d6e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <EXTINT_voidInit>

	EXTINT_voidSetCallBack(UltrasonicFunc,EXT0_ID);
    1d72:	82 e1       	ldi	r24, 0x12	; 18
    1d74:	9e e0       	ldi	r25, 0x0E	; 14
    1d76:	60 e0       	ldi	r22, 0x00	; 0
    1d78:	0e 94 9a 09 	call	0x1334	; 0x1334 <EXTINT_voidSetCallBack>
}
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <ULTRASONIC_VoidStart>:

void ULTRASONIC_VoidStart(){
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	68 97       	sbiw	r28, 0x18	; 24
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	f8 94       	cli
    1d90:	de bf       	out	0x3e, r29	; 62
    1d92:	0f be       	out	0x3f, r0	; 63
    1d94:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(TRIGGER_PORT,TRIGGER_PIN,PIN_HIGH);
    1d96:	83 e0       	ldi	r24, 0x03	; 3
    1d98:	63 e0       	ldi	r22, 0x03	; 3
    1d9a:	41 e0       	ldi	r20, 0x01	; 1
    1d9c:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	a0 e3       	ldi	r26, 0x30	; 48
    1da6:	b1 e4       	ldi	r27, 0x41	; 65
    1da8:	8d 8b       	std	Y+21, r24	; 0x15
    1daa:	9e 8b       	std	Y+22, r25	; 0x16
    1dac:	af 8b       	std	Y+23, r26	; 0x17
    1dae:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1db0:	6d 89       	ldd	r22, Y+21	; 0x15
    1db2:	7e 89       	ldd	r23, Y+22	; 0x16
    1db4:	8f 89       	ldd	r24, Y+23	; 0x17
    1db6:	98 8d       	ldd	r25, Y+24	; 0x18
    1db8:	2b ea       	ldi	r18, 0xAB	; 171
    1dba:	3a ea       	ldi	r19, 0xAA	; 170
    1dbc:	4a ea       	ldi	r20, 0xAA	; 170
    1dbe:	50 e4       	ldi	r21, 0x40	; 64
    1dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	89 8b       	std	Y+17, r24	; 0x11
    1dca:	9a 8b       	std	Y+18, r25	; 0x12
    1dcc:	ab 8b       	std	Y+19, r26	; 0x13
    1dce:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1dd0:	69 89       	ldd	r22, Y+17	; 0x11
    1dd2:	7a 89       	ldd	r23, Y+18	; 0x12
    1dd4:	8b 89       	ldd	r24, Y+19	; 0x13
    1dd6:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e8       	ldi	r20, 0x80	; 128
    1dde:	5f e3       	ldi	r21, 0x3F	; 63
    1de0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1de4:	88 23       	and	r24, r24
    1de6:	1c f4       	brge	.+6      	; 0x1dee <ULTRASONIC_VoidStart+0x6c>
		__ticks = 1;
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	88 8b       	std	Y+16, r24	; 0x10
    1dec:	91 c0       	rjmp	.+290    	; 0x1f10 <ULTRASONIC_VoidStart+0x18e>
	else if (__tmp > 255)
    1dee:	69 89       	ldd	r22, Y+17	; 0x11
    1df0:	7a 89       	ldd	r23, Y+18	; 0x12
    1df2:	8b 89       	ldd	r24, Y+19	; 0x13
    1df4:	9c 89       	ldd	r25, Y+20	; 0x14
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	4f e7       	ldi	r20, 0x7F	; 127
    1dfc:	53 e4       	ldi	r21, 0x43	; 67
    1dfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e02:	18 16       	cp	r1, r24
    1e04:	0c f0       	brlt	.+2      	; 0x1e08 <ULTRASONIC_VoidStart+0x86>
    1e06:	7b c0       	rjmp	.+246    	; 0x1efe <ULTRASONIC_VoidStart+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1e08:	6d 89       	ldd	r22, Y+21	; 0x15
    1e0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	4a e7       	ldi	r20, 0x7A	; 122
    1e16:	54 e4       	ldi	r21, 0x44	; 68
    1e18:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	8c 87       	std	Y+12, r24	; 0x0c
    1e22:	9d 87       	std	Y+13, r25	; 0x0d
    1e24:	ae 87       	std	Y+14, r26	; 0x0e
    1e26:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e28:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e2a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e2c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e2e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	4a e7       	ldi	r20, 0x7A	; 122
    1e36:	55 e4       	ldi	r21, 0x45	; 69
    1e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	88 87       	std	Y+8, r24	; 0x08
    1e42:	99 87       	std	Y+9, r25	; 0x09
    1e44:	aa 87       	std	Y+10, r26	; 0x0a
    1e46:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1e48:	68 85       	ldd	r22, Y+8	; 0x08
    1e4a:	79 85       	ldd	r23, Y+9	; 0x09
    1e4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	40 e8       	ldi	r20, 0x80	; 128
    1e56:	5f e3       	ldi	r21, 0x3F	; 63
    1e58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e5c:	88 23       	and	r24, r24
    1e5e:	2c f4       	brge	.+10     	; 0x1e6a <ULTRASONIC_VoidStart+0xe8>
		__ticks = 1;
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	9f 83       	std	Y+7, r25	; 0x07
    1e66:	8e 83       	std	Y+6, r24	; 0x06
    1e68:	3f c0       	rjmp	.+126    	; 0x1ee8 <ULTRASONIC_VoidStart+0x166>
	else if (__tmp > 65535)
    1e6a:	68 85       	ldd	r22, Y+8	; 0x08
    1e6c:	79 85       	ldd	r23, Y+9	; 0x09
    1e6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e70:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	3f ef       	ldi	r19, 0xFF	; 255
    1e76:	4f e7       	ldi	r20, 0x7F	; 127
    1e78:	57 e4       	ldi	r21, 0x47	; 71
    1e7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e7e:	18 16       	cp	r1, r24
    1e80:	4c f5       	brge	.+82     	; 0x1ed4 <ULTRASONIC_VoidStart+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e82:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e84:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e86:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e88:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	40 e2       	ldi	r20, 0x20	; 32
    1e90:	51 e4       	ldi	r21, 0x41	; 65
    1e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	bc 01       	movw	r22, r24
    1e9c:	cd 01       	movw	r24, r26
    1e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	9f 83       	std	Y+7, r25	; 0x07
    1ea8:	8e 83       	std	Y+6, r24	; 0x06
    1eaa:	0f c0       	rjmp	.+30     	; 0x1eca <ULTRASONIC_VoidStart+0x148>
    1eac:	80 e9       	ldi	r24, 0x90	; 144
    1eae:	91 e0       	ldi	r25, 0x01	; 1
    1eb0:	9d 83       	std	Y+5, r25	; 0x05
    1eb2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1eb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	f1 f7       	brne	.-4      	; 0x1eb8 <ULTRASONIC_VoidStart+0x136>
    1ebc:	9d 83       	std	Y+5, r25	; 0x05
    1ebe:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ec2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	9f 83       	std	Y+7, r25	; 0x07
    1ec8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eca:	8e 81       	ldd	r24, Y+6	; 0x06
    1ecc:	9f 81       	ldd	r25, Y+7	; 0x07
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	69 f7       	brne	.-38     	; 0x1eac <ULTRASONIC_VoidStart+0x12a>
    1ed2:	24 c0       	rjmp	.+72     	; 0x1f1c <ULTRASONIC_VoidStart+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed4:	68 85       	ldd	r22, Y+8	; 0x08
    1ed6:	79 85       	ldd	r23, Y+9	; 0x09
    1ed8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eda:	9b 85       	ldd	r25, Y+11	; 0x0b
    1edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	9f 83       	std	Y+7, r25	; 0x07
    1ee6:	8e 83       	std	Y+6, r24	; 0x06
    1ee8:	8e 81       	ldd	r24, Y+6	; 0x06
    1eea:	9f 81       	ldd	r25, Y+7	; 0x07
    1eec:	9b 83       	std	Y+3, r25	; 0x03
    1eee:	8a 83       	std	Y+2, r24	; 0x02
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	f1 f7       	brne	.-4      	; 0x1ef4 <ULTRASONIC_VoidStart+0x172>
    1ef8:	9b 83       	std	Y+3, r25	; 0x03
    1efa:	8a 83       	std	Y+2, r24	; 0x02
    1efc:	0f c0       	rjmp	.+30     	; 0x1f1c <ULTRASONIC_VoidStart+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1efe:	69 89       	ldd	r22, Y+17	; 0x11
    1f00:	7a 89       	ldd	r23, Y+18	; 0x12
    1f02:	8b 89       	ldd	r24, Y+19	; 0x13
    1f04:	9c 89       	ldd	r25, Y+20	; 0x14
    1f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	88 8b       	std	Y+16, r24	; 0x10
    1f10:	88 89       	ldd	r24, Y+16	; 0x10
    1f12:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	8a 95       	dec	r24
    1f18:	f1 f7       	brne	.-4      	; 0x1f16 <ULTRASONIC_VoidStart+0x194>
    1f1a:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(11);

	DIO_voidSetPinValue(TRIGGER_PORT,TRIGGER_PIN,PIN_LOW);
    1f1c:	83 e0       	ldi	r24, 0x03	; 3
    1f1e:	63 e0       	ldi	r22, 0x03	; 3
    1f20:	40 e0       	ldi	r20, 0x00	; 0
    1f22:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>
}
    1f26:	68 96       	adiw	r28, 0x18	; 24
    1f28:	0f b6       	in	r0, 0x3f	; 63
    1f2a:	f8 94       	cli
    1f2c:	de bf       	out	0x3e, r29	; 62
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	cd bf       	out	0x3d, r28	; 61
    1f32:	cf 91       	pop	r28
    1f34:	df 91       	pop	r29
    1f36:	08 95       	ret

00001f38 <ULTRASONIC_VoidVal>:

u32 ULTRASONIC_VoidVal(){
    1f38:	df 93       	push	r29
    1f3a:	cf 93       	push	r28
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62

	return dis;
    1f40:	80 91 98 01 	lds	r24, 0x0198
    1f44:	90 91 99 01 	lds	r25, 0x0199
    1f48:	a0 91 9a 01 	lds	r26, 0x019A
    1f4c:	b0 91 9b 01 	lds	r27, 0x019B
}
    1f50:	bc 01       	movw	r22, r24
    1f52:	cd 01       	movw	r24, r26
    1f54:	cf 91       	pop	r28
    1f56:	df 91       	pop	r29
    1f58:	08 95       	ret

00001f5a <MTR_voidInit>:
#include "MTR_Interface.h"

/***********************************************************************************/


void MTR_voidInit(){
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62

	//Control Pin
	DIO_voidSetPinDirection(CONTROL_PORT,CONTROL_PIN,PIN_OUTPUT);
    1f62:	83 e0       	ldi	r24, 0x03	; 3
    1f64:	67 e0       	ldi	r22, 0x07	; 7
    1f66:	41 e0       	ldi	r20, 0x01	; 1
    1f68:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <DIO_voidSetPinDirection>

	//Direction Pins
	DIO_voidSetPinDirection(DIRECTION_PORT1,DIRECTION_PIN1,PIN_OUTPUT);
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	64 e0       	ldi	r22, 0x04	; 4
    1f70:	41 e0       	ldi	r20, 0x01	; 1
    1f72:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(DIRECTION_PORT2,DIRECTION_PIN2,PIN_OUTPUT);
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	65 e0       	ldi	r22, 0x05	; 5
    1f7a:	41 e0       	ldi	r20, 0x01	; 1
    1f7c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(DIRECTION_PORT3,DIRECTION_PIN3,PIN_OUTPUT);
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	66 e0       	ldi	r22, 0x06	; 6
    1f84:	41 e0       	ldi	r20, 0x01	; 1
    1f86:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(DIRECTION_PORT4,DIRECTION_PIN4,PIN_OUTPUT);
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	67 e0       	ldi	r22, 0x07	; 7
    1f8e:	41 e0       	ldi	r20, 0x01	; 1
    1f90:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <DIO_voidSetPinDirection>

	//Initialize timer2
	TIMER2_VoidInit();
    1f94:	0e 94 17 07 	call	0xe2e	; 0xe2e <TIMER2_VoidInit>

	//Make sure the car does not move when the car is started
	MTR_voidMovement(MTR_STOP,0);
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	60 e0       	ldi	r22, 0x00	; 0
    1f9c:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <MTR_voidMovement>

	//Enable Global interrupt enable
	GIE_Enable();
    1fa0:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <GIE_Enable>

}
    1fa4:	cf 91       	pop	r28
    1fa6:	df 91       	pop	r29
    1fa8:	08 95       	ret

00001faa <MTR_voidMovement>:

void MTR_voidMovement(u8 state, u8 speed){
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	00 d0       	rcall	.+0      	; 0x1fb0 <MTR_voidMovement+0x6>
    1fb0:	00 d0       	rcall	.+0      	; 0x1fb2 <MTR_voidMovement+0x8>
    1fb2:	cd b7       	in	r28, 0x3d	; 61
    1fb4:	de b7       	in	r29, 0x3e	; 62
    1fb6:	89 83       	std	Y+1, r24	; 0x01
    1fb8:	6a 83       	std	Y+2, r22	; 0x02
	switch(state){
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	3c 83       	std	Y+4, r19	; 0x04
    1fc2:	2b 83       	std	Y+3, r18	; 0x03
    1fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc8:	82 30       	cpi	r24, 0x02	; 2
    1fca:	91 05       	cpc	r25, r1
    1fcc:	09 f4       	brne	.+2      	; 0x1fd0 <MTR_voidMovement+0x26>
    1fce:	50 c0       	rjmp	.+160    	; 0x2070 <MTR_voidMovement+0xc6>
    1fd0:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd2:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd4:	23 30       	cpi	r18, 0x03	; 3
    1fd6:	31 05       	cpc	r19, r1
    1fd8:	54 f4       	brge	.+20     	; 0x1fee <MTR_voidMovement+0x44>
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fde:	00 97       	sbiw	r24, 0x00	; 0
    1fe0:	99 f0       	breq	.+38     	; 0x2008 <MTR_voidMovement+0x5e>
    1fe2:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe4:	3c 81       	ldd	r19, Y+4	; 0x04
    1fe6:	21 30       	cpi	r18, 0x01	; 1
    1fe8:	31 05       	cpc	r19, r1
    1fea:	29 f1       	breq	.+74     	; 0x2036 <MTR_voidMovement+0x8c>
    1fec:	97 c0       	rjmp	.+302    	; 0x211c <MTR_voidMovement+0x172>
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff2:	83 30       	cpi	r24, 0x03	; 3
    1ff4:	91 05       	cpc	r25, r1
    1ff6:	09 f4       	brne	.+2      	; 0x1ffa <MTR_voidMovement+0x50>
    1ff8:	58 c0       	rjmp	.+176    	; 0x20aa <MTR_voidMovement+0x100>
    1ffa:	2b 81       	ldd	r18, Y+3	; 0x03
    1ffc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ffe:	24 30       	cpi	r18, 0x04	; 4
    2000:	31 05       	cpc	r19, r1
    2002:	09 f4       	brne	.+2      	; 0x2006 <MTR_voidMovement+0x5c>
    2004:	6f c0       	rjmp	.+222    	; 0x20e4 <MTR_voidMovement+0x13a>
    2006:	8a c0       	rjmp	.+276    	; 0x211c <MTR_voidMovement+0x172>

	case MTR_STOP:
		//Control Pin
		TIMER2_VoidStop();
    2008:	0e 94 2e 07 	call	0xe5c	; 0xe5c <TIMER2_VoidStop>

		//Direction Pins
		DIO_voidSetPinValue(DIRECTION_PORT1,DIRECTION_PIN1,PIN_LOW);
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	64 e0       	ldi	r22, 0x04	; 4
    2010:	40 e0       	ldi	r20, 0x00	; 0
    2012:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT2,DIRECTION_PIN2,PIN_LOW);
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	65 e0       	ldi	r22, 0x05	; 5
    201a:	40 e0       	ldi	r20, 0x00	; 0
    201c:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT3,DIRECTION_PIN3,PIN_LOW);
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	66 e0       	ldi	r22, 0x06	; 6
    2024:	40 e0       	ldi	r20, 0x00	; 0
    2026:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT4,DIRECTION_PIN4,PIN_LOW);
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	67 e0       	ldi	r22, 0x07	; 7
    202e:	40 e0       	ldi	r20, 0x00	; 0
    2030:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>
    2034:	73 c0       	rjmp	.+230    	; 0x211c <MTR_voidMovement+0x172>
		break;

	case MTR_FORWARD:
		//Control Pin
		TIMER2_VoidSetPreload(0);
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	0e 94 47 07 	call	0xe8e	; 0xe8e <TIMER2_VoidSetPreload>
		TIMER2_VoidSetPWMCompareMatch(speed);
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	0e 94 5f 07 	call	0xebe	; 0xebe <TIMER2_VoidSetPWMCompareMatch>
		TIMER2_VoidStart();
    2042:	0e 94 3a 07 	call	0xe74	; 0xe74 <TIMER2_VoidStart>

		//Direction Pins
		DIO_voidSetPinValue(DIRECTION_PORT1,DIRECTION_PIN1,PIN_HIGH);
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	64 e0       	ldi	r22, 0x04	; 4
    204a:	41 e0       	ldi	r20, 0x01	; 1
    204c:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT2,DIRECTION_PIN2,PIN_LOW);
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	65 e0       	ldi	r22, 0x05	; 5
    2054:	40 e0       	ldi	r20, 0x00	; 0
    2056:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT3,DIRECTION_PIN3,PIN_HIGH);
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	66 e0       	ldi	r22, 0x06	; 6
    205e:	41 e0       	ldi	r20, 0x01	; 1
    2060:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT4,DIRECTION_PIN4,PIN_LOW);
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	67 e0       	ldi	r22, 0x07	; 7
    2068:	40 e0       	ldi	r20, 0x00	; 0
    206a:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>
    206e:	56 c0       	rjmp	.+172    	; 0x211c <MTR_voidMovement+0x172>
		break;

	case MTR_REVERSE:
		//Control Pin
		TIMER2_VoidSetPreload(0);
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	0e 94 47 07 	call	0xe8e	; 0xe8e <TIMER2_VoidSetPreload>
		TIMER2_VoidSetPWMCompareMatch(speed);
    2076:	8a 81       	ldd	r24, Y+2	; 0x02
    2078:	0e 94 5f 07 	call	0xebe	; 0xebe <TIMER2_VoidSetPWMCompareMatch>
		TIMER2_VoidStart();
    207c:	0e 94 3a 07 	call	0xe74	; 0xe74 <TIMER2_VoidStart>

		//Direction Pins
		DIO_voidSetPinValue(DIRECTION_PORT1,DIRECTION_PIN1,PIN_LOW);
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	64 e0       	ldi	r22, 0x04	; 4
    2084:	40 e0       	ldi	r20, 0x00	; 0
    2086:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT2,DIRECTION_PIN2,PIN_HIGH);
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	65 e0       	ldi	r22, 0x05	; 5
    208e:	41 e0       	ldi	r20, 0x01	; 1
    2090:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT3,DIRECTION_PIN3,PIN_LOW);
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	66 e0       	ldi	r22, 0x06	; 6
    2098:	40 e0       	ldi	r20, 0x00	; 0
    209a:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT4,DIRECTION_PIN4,PIN_HIGH);
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	67 e0       	ldi	r22, 0x07	; 7
    20a2:	41 e0       	ldi	r20, 0x01	; 1
    20a4:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>
    20a8:	39 c0       	rjmp	.+114    	; 0x211c <MTR_voidMovement+0x172>
		break;

	case MTR_RIGHT:
		//Control Pin
		TIMER2_VoidSetPreload(0);
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	0e 94 47 07 	call	0xe8e	; 0xe8e <TIMER2_VoidSetPreload>
		TIMER2_VoidSetPWMCompareMatch(speed);
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	0e 94 5f 07 	call	0xebe	; 0xebe <TIMER2_VoidSetPWMCompareMatch>
		TIMER2_VoidStart();
    20b6:	0e 94 3a 07 	call	0xe74	; 0xe74 <TIMER2_VoidStart>

		//Direction Pins
		DIO_voidSetPinValue(DIRECTION_PORT1,DIRECTION_PIN1,PIN_HIGH);
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	64 e0       	ldi	r22, 0x04	; 4
    20be:	41 e0       	ldi	r20, 0x01	; 1
    20c0:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT2,DIRECTION_PIN2,PIN_LOW);
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	65 e0       	ldi	r22, 0x05	; 5
    20c8:	40 e0       	ldi	r20, 0x00	; 0
    20ca:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT3,DIRECTION_PIN3,PIN_LOW);
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	66 e0       	ldi	r22, 0x06	; 6
    20d2:	40 e0       	ldi	r20, 0x00	; 0
    20d4:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT4,DIRECTION_PIN4,PIN_LOW);
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	67 e0       	ldi	r22, 0x07	; 7
    20dc:	40 e0       	ldi	r20, 0x00	; 0
    20de:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>
    20e2:	1c c0       	rjmp	.+56     	; 0x211c <MTR_voidMovement+0x172>
		break;

	case MTR_LEFT:
		//Control Pin
		TIMER2_VoidSetPreload(0);
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	0e 94 47 07 	call	0xe8e	; 0xe8e <TIMER2_VoidSetPreload>
		TIMER2_VoidSetPWMCompareMatch(speed);
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	0e 94 5f 07 	call	0xebe	; 0xebe <TIMER2_VoidSetPWMCompareMatch>
		TIMER2_VoidStart();
    20f0:	0e 94 3a 07 	call	0xe74	; 0xe74 <TIMER2_VoidStart>

		//Direction Pins
		DIO_voidSetPinValue(DIRECTION_PORT1,DIRECTION_PIN1,PIN_LOW);
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	64 e0       	ldi	r22, 0x04	; 4
    20f8:	40 e0       	ldi	r20, 0x00	; 0
    20fa:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT2,DIRECTION_PIN2,PIN_LOW);
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	65 e0       	ldi	r22, 0x05	; 5
    2102:	40 e0       	ldi	r20, 0x00	; 0
    2104:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT3,DIRECTION_PIN3,PIN_HIGH);
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	66 e0       	ldi	r22, 0x06	; 6
    210c:	41 e0       	ldi	r20, 0x01	; 1
    210e:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT4,DIRECTION_PIN4,PIN_LOW);
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	67 e0       	ldi	r22, 0x07	; 7
    2116:	40 e0       	ldi	r20, 0x00	; 0
    2118:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>
		break;

	default:
		break;
	}
}
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	0f 90       	pop	r0
    2122:	0f 90       	pop	r0
    2124:	cf 91       	pop	r28
    2126:	df 91       	pop	r29
    2128:	08 95       	ret

0000212a <LCD_voidInit>:



/***********************************************************************************/
void LCD_voidInit(void)
{
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	2e 97       	sbiw	r28, 0x0e	; 14
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	f8 94       	cli
    2138:	de bf       	out	0x3e, r29	; 62
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	cd bf       	out	0x3d, r28	; 61
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	a0 ef       	ldi	r26, 0xF0	; 240
    2144:	b1 e4       	ldi	r27, 0x41	; 65
    2146:	8b 87       	std	Y+11, r24	; 0x0b
    2148:	9c 87       	std	Y+12, r25	; 0x0c
    214a:	ad 87       	std	Y+13, r26	; 0x0d
    214c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    214e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2150:	7c 85       	ldd	r23, Y+12	; 0x0c
    2152:	8d 85       	ldd	r24, Y+13	; 0x0d
    2154:	9e 85       	ldd	r25, Y+14	; 0x0e
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	4a e7       	ldi	r20, 0x7A	; 122
    215c:	55 e4       	ldi	r21, 0x45	; 69
    215e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	8f 83       	std	Y+7, r24	; 0x07
    2168:	98 87       	std	Y+8, r25	; 0x08
    216a:	a9 87       	std	Y+9, r26	; 0x09
    216c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    216e:	6f 81       	ldd	r22, Y+7	; 0x07
    2170:	78 85       	ldd	r23, Y+8	; 0x08
    2172:	89 85       	ldd	r24, Y+9	; 0x09
    2174:	9a 85       	ldd	r25, Y+10	; 0x0a
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	40 e8       	ldi	r20, 0x80	; 128
    217c:	5f e3       	ldi	r21, 0x3F	; 63
    217e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2182:	88 23       	and	r24, r24
    2184:	2c f4       	brge	.+10     	; 0x2190 <LCD_voidInit+0x66>
		__ticks = 1;
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	9e 83       	std	Y+6, r25	; 0x06
    218c:	8d 83       	std	Y+5, r24	; 0x05
    218e:	3f c0       	rjmp	.+126    	; 0x220e <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    2190:	6f 81       	ldd	r22, Y+7	; 0x07
    2192:	78 85       	ldd	r23, Y+8	; 0x08
    2194:	89 85       	ldd	r24, Y+9	; 0x09
    2196:	9a 85       	ldd	r25, Y+10	; 0x0a
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	3f ef       	ldi	r19, 0xFF	; 255
    219c:	4f e7       	ldi	r20, 0x7F	; 127
    219e:	57 e4       	ldi	r21, 0x47	; 71
    21a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21a4:	18 16       	cp	r1, r24
    21a6:	4c f5       	brge	.+82     	; 0x21fa <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    21aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	40 e2       	ldi	r20, 0x20	; 32
    21b6:	51 e4       	ldi	r21, 0x41	; 65
    21b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	bc 01       	movw	r22, r24
    21c2:	cd 01       	movw	r24, r26
    21c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	9e 83       	std	Y+6, r25	; 0x06
    21ce:	8d 83       	std	Y+5, r24	; 0x05
    21d0:	0f c0       	rjmp	.+30     	; 0x21f0 <LCD_voidInit+0xc6>
    21d2:	80 e9       	ldi	r24, 0x90	; 144
    21d4:	91 e0       	ldi	r25, 0x01	; 1
    21d6:	9c 83       	std	Y+4, r25	; 0x04
    21d8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	9c 81       	ldd	r25, Y+4	; 0x04
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	f1 f7       	brne	.-4      	; 0x21de <LCD_voidInit+0xb4>
    21e2:	9c 83       	std	Y+4, r25	; 0x04
    21e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e6:	8d 81       	ldd	r24, Y+5	; 0x05
    21e8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	9e 83       	std	Y+6, r25	; 0x06
    21ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f0:	8d 81       	ldd	r24, Y+5	; 0x05
    21f2:	9e 81       	ldd	r25, Y+6	; 0x06
    21f4:	00 97       	sbiw	r24, 0x00	; 0
    21f6:	69 f7       	brne	.-38     	; 0x21d2 <LCD_voidInit+0xa8>
    21f8:	14 c0       	rjmp	.+40     	; 0x2222 <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21fa:	6f 81       	ldd	r22, Y+7	; 0x07
    21fc:	78 85       	ldd	r23, Y+8	; 0x08
    21fe:	89 85       	ldd	r24, Y+9	; 0x09
    2200:	9a 85       	ldd	r25, Y+10	; 0x0a
    2202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	9e 83       	std	Y+6, r25	; 0x06
    220c:	8d 83       	std	Y+5, r24	; 0x05
    220e:	8d 81       	ldd	r24, Y+5	; 0x05
    2210:	9e 81       	ldd	r25, Y+6	; 0x06
    2212:	9a 83       	std	Y+2, r25	; 0x02
    2214:	89 83       	std	Y+1, r24	; 0x01
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	9a 81       	ldd	r25, Y+2	; 0x02
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	f1 f7       	brne	.-4      	; 0x221a <LCD_voidInit+0xf0>
    221e:	9a 83       	std	Y+2, r25	; 0x02
    2220:	89 83       	std	Y+1, r24	; 0x01
	/* Delay 30ms to ensure the initialization of the LCD driver */
	_delay_ms(30);

	/* Set Control pins as output */
	DIO_voidSetPinDirection(RS_PORT,RS_PIN,PIN_OUTPUT);
    2222:	82 e0       	ldi	r24, 0x02	; 2
    2224:	60 e0       	ldi	r22, 0x00	; 0
    2226:	41 e0       	ldi	r20, 0x01	; 1
    2228:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <DIO_voidSetPinDirection>
	// DIO_voidSetPinDirection(RW_PORT,RW_PIN,PIN_OUTPUT);
	DIO_voidSetPinDirection(EN_PORT, EN_PIN,PIN_OUTPUT);
    222c:	82 e0       	ldi	r24, 0x02	; 2
    222e:	61 e0       	ldi	r22, 0x01	; 1
    2230:	41 e0       	ldi	r20, 0x01	; 1
    2232:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <DIO_voidSetPinDirection>

	/* Set Data Port Direction as output */
	DIO_voidSetPinDirection(D4_PORT,D4_PIN,PIN_OUTPUT);
    2236:	82 e0       	ldi	r24, 0x02	; 2
    2238:	62 e0       	ldi	r22, 0x02	; 2
    223a:	41 e0       	ldi	r20, 0x01	; 1
    223c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D5_PORT,D5_PIN,PIN_OUTPUT);
    2240:	82 e0       	ldi	r24, 0x02	; 2
    2242:	63 e0       	ldi	r22, 0x03	; 3
    2244:	41 e0       	ldi	r20, 0x01	; 1
    2246:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D6_PORT,D6_PIN,PIN_OUTPUT);
    224a:	82 e0       	ldi	r24, 0x02	; 2
    224c:	64 e0       	ldi	r22, 0x04	; 4
    224e:	41 e0       	ldi	r20, 0x01	; 1
    2250:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D7_PORT,D7_PIN,PIN_OUTPUT);
    2254:	82 e0       	ldi	r24, 0x02	; 2
    2256:	65 e0       	ldi	r22, 0x05	; 5
    2258:	41 e0       	ldi	r20, 0x01	; 1
    225a:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <DIO_voidSetPinDirection>

	/* Return Home */
	LCD_voidWriteCommand(RETURN_HOME);
    225e:	82 e0       	ldi	r24, 0x02	; 2
    2260:	0e 94 b6 12 	call	0x256c	; 0x256c <LCD_voidWriteCommand>

	/* Configure as 4-bit data mode*/
	LCD_voidWriteCommand(FUNCTION_SET_4BIT_2LINES_5X7_DOTS);
    2264:	88 e2       	ldi	r24, 0x28	; 40
    2266:	0e 94 b6 12 	call	0x256c	; 0x256c <LCD_voidWriteCommand>

	/*Display ON OFF Control */
	LCD_voidWriteCommand(DISPLAY_ON_CURSOR_OFF);
    226a:	8c e0       	ldi	r24, 0x0C	; 12
    226c:	0e 94 b6 12 	call	0x256c	; 0x256c <LCD_voidWriteCommand>

	/* Clear Display */
	LCD_voidWriteCommand(DISPLAY_CLEAR);
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	0e 94 b6 12 	call	0x256c	; 0x256c <LCD_voidWriteCommand>

	/*ENTRY MODE*/
	LCD_voidWriteCommand(ENTRY_MODE_SET);
    2276:	86 e0       	ldi	r24, 0x06	; 6
    2278:	0e 94 b6 12 	call	0x256c	; 0x256c <LCD_voidWriteCommand>

}
    227c:	2e 96       	adiw	r28, 0x0e	; 14
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	cd bf       	out	0x3d, r28	; 61
    2288:	cf 91       	pop	r28
    228a:	df 91       	pop	r29
    228c:	08 95       	ret

0000228e <LCD_voidWriteBitsToSend>:
/***********************************************************************************/

static void LCD_voidWriteBitsToSend(u8 copy_u8Byte)
{
    228e:	df 93       	push	r29
    2290:	cf 93       	push	r28
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	6d 97       	sbiw	r28, 0x1d	; 29
    2298:	0f b6       	in	r0, 0x3f	; 63
    229a:	f8 94       	cli
    229c:	de bf       	out	0x3e, r29	; 62
    229e:	0f be       	out	0x3f, r0	; 63
    22a0:	cd bf       	out	0x3d, r28	; 61
    22a2:	8d 8f       	std	Y+29, r24	; 0x1d



	/*prepare 4 bits MSB to send */
	DIO_voidSetPinValue(D7_PORT,D7_PIN, GET_BIT(copy_u8Byte,PIN7) );
    22a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22a6:	98 2f       	mov	r25, r24
    22a8:	99 1f       	adc	r25, r25
    22aa:	99 27       	eor	r25, r25
    22ac:	99 1f       	adc	r25, r25
    22ae:	82 e0       	ldi	r24, 0x02	; 2
    22b0:	65 e0       	ldi	r22, 0x05	; 5
    22b2:	49 2f       	mov	r20, r25
    22b4:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6_PORT,D6_PIN, GET_BIT(copy_u8Byte,PIN6) );
    22b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22ba:	82 95       	swap	r24
    22bc:	86 95       	lsr	r24
    22be:	86 95       	lsr	r24
    22c0:	83 70       	andi	r24, 0x03	; 3
    22c2:	98 2f       	mov	r25, r24
    22c4:	91 70       	andi	r25, 0x01	; 1
    22c6:	82 e0       	ldi	r24, 0x02	; 2
    22c8:	64 e0       	ldi	r22, 0x04	; 4
    22ca:	49 2f       	mov	r20, r25
    22cc:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5_PORT,D5_PIN, GET_BIT(copy_u8Byte,PIN5) );
    22d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22d2:	82 95       	swap	r24
    22d4:	86 95       	lsr	r24
    22d6:	87 70       	andi	r24, 0x07	; 7
    22d8:	98 2f       	mov	r25, r24
    22da:	91 70       	andi	r25, 0x01	; 1
    22dc:	82 e0       	ldi	r24, 0x02	; 2
    22de:	63 e0       	ldi	r22, 0x03	; 3
    22e0:	49 2f       	mov	r20, r25
    22e2:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D4_PORT,D4_PIN, GET_BIT(copy_u8Byte,PIN4) );
    22e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22e8:	82 95       	swap	r24
    22ea:	8f 70       	andi	r24, 0x0F	; 15
    22ec:	98 2f       	mov	r25, r24
    22ee:	91 70       	andi	r25, 0x01	; 1
    22f0:	82 e0       	ldi	r24, 0x02	; 2
    22f2:	62 e0       	ldi	r22, 0x02	; 2
    22f4:	49 2f       	mov	r20, r25
    22f6:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>

	/* open EN--> make it high --- then after 2m close EN -->make it low*/
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_HIGH);
    22fa:	82 e0       	ldi	r24, 0x02	; 2
    22fc:	61 e0       	ldi	r22, 0x01	; 1
    22fe:	41 e0       	ldi	r20, 0x01	; 1
    2300:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	a0 e0       	ldi	r26, 0x00	; 0
    230a:	b0 e4       	ldi	r27, 0x40	; 64
    230c:	89 8f       	std	Y+25, r24	; 0x19
    230e:	9a 8f       	std	Y+26, r25	; 0x1a
    2310:	ab 8f       	std	Y+27, r26	; 0x1b
    2312:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2314:	69 8d       	ldd	r22, Y+25	; 0x19
    2316:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2318:	8b 8d       	ldd	r24, Y+27	; 0x1b
    231a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	4a e7       	ldi	r20, 0x7A	; 122
    2322:	55 e4       	ldi	r21, 0x45	; 69
    2324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	8d 8b       	std	Y+21, r24	; 0x15
    232e:	9e 8b       	std	Y+22, r25	; 0x16
    2330:	af 8b       	std	Y+23, r26	; 0x17
    2332:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2334:	6d 89       	ldd	r22, Y+21	; 0x15
    2336:	7e 89       	ldd	r23, Y+22	; 0x16
    2338:	8f 89       	ldd	r24, Y+23	; 0x17
    233a:	98 8d       	ldd	r25, Y+24	; 0x18
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	40 e8       	ldi	r20, 0x80	; 128
    2342:	5f e3       	ldi	r21, 0x3F	; 63
    2344:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2348:	88 23       	and	r24, r24
    234a:	2c f4       	brge	.+10     	; 0x2356 <LCD_voidWriteBitsToSend+0xc8>
		__ticks = 1;
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	9c 8b       	std	Y+20, r25	; 0x14
    2352:	8b 8b       	std	Y+19, r24	; 0x13
    2354:	3f c0       	rjmp	.+126    	; 0x23d4 <LCD_voidWriteBitsToSend+0x146>
	else if (__tmp > 65535)
    2356:	6d 89       	ldd	r22, Y+21	; 0x15
    2358:	7e 89       	ldd	r23, Y+22	; 0x16
    235a:	8f 89       	ldd	r24, Y+23	; 0x17
    235c:	98 8d       	ldd	r25, Y+24	; 0x18
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	3f ef       	ldi	r19, 0xFF	; 255
    2362:	4f e7       	ldi	r20, 0x7F	; 127
    2364:	57 e4       	ldi	r21, 0x47	; 71
    2366:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    236a:	18 16       	cp	r1, r24
    236c:	4c f5       	brge	.+82     	; 0x23c0 <LCD_voidWriteBitsToSend+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236e:	69 8d       	ldd	r22, Y+25	; 0x19
    2370:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2372:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2374:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	40 e2       	ldi	r20, 0x20	; 32
    237c:	51 e4       	ldi	r21, 0x41	; 65
    237e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	bc 01       	movw	r22, r24
    2388:	cd 01       	movw	r24, r26
    238a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	9c 8b       	std	Y+20, r25	; 0x14
    2394:	8b 8b       	std	Y+19, r24	; 0x13
    2396:	0f c0       	rjmp	.+30     	; 0x23b6 <LCD_voidWriteBitsToSend+0x128>
    2398:	80 e9       	ldi	r24, 0x90	; 144
    239a:	91 e0       	ldi	r25, 0x01	; 1
    239c:	9a 8b       	std	Y+18, r25	; 0x12
    239e:	89 8b       	std	Y+17, r24	; 0x11
    23a0:	89 89       	ldd	r24, Y+17	; 0x11
    23a2:	9a 89       	ldd	r25, Y+18	; 0x12
    23a4:	01 97       	sbiw	r24, 0x01	; 1
    23a6:	f1 f7       	brne	.-4      	; 0x23a4 <LCD_voidWriteBitsToSend+0x116>
    23a8:	9a 8b       	std	Y+18, r25	; 0x12
    23aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ac:	8b 89       	ldd	r24, Y+19	; 0x13
    23ae:	9c 89       	ldd	r25, Y+20	; 0x14
    23b0:	01 97       	sbiw	r24, 0x01	; 1
    23b2:	9c 8b       	std	Y+20, r25	; 0x14
    23b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b6:	8b 89       	ldd	r24, Y+19	; 0x13
    23b8:	9c 89       	ldd	r25, Y+20	; 0x14
    23ba:	00 97       	sbiw	r24, 0x00	; 0
    23bc:	69 f7       	brne	.-38     	; 0x2398 <LCD_voidWriteBitsToSend+0x10a>
    23be:	14 c0       	rjmp	.+40     	; 0x23e8 <LCD_voidWriteBitsToSend+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c0:	6d 89       	ldd	r22, Y+21	; 0x15
    23c2:	7e 89       	ldd	r23, Y+22	; 0x16
    23c4:	8f 89       	ldd	r24, Y+23	; 0x17
    23c6:	98 8d       	ldd	r25, Y+24	; 0x18
    23c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	9c 8b       	std	Y+20, r25	; 0x14
    23d2:	8b 8b       	std	Y+19, r24	; 0x13
    23d4:	8b 89       	ldd	r24, Y+19	; 0x13
    23d6:	9c 89       	ldd	r25, Y+20	; 0x14
    23d8:	98 8b       	std	Y+16, r25	; 0x10
    23da:	8f 87       	std	Y+15, r24	; 0x0f
    23dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    23de:	98 89       	ldd	r25, Y+16	; 0x10
    23e0:	01 97       	sbiw	r24, 0x01	; 1
    23e2:	f1 f7       	brne	.-4      	; 0x23e0 <LCD_voidWriteBitsToSend+0x152>
    23e4:	98 8b       	std	Y+16, r25	; 0x10
    23e6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_LOW);
    23e8:	82 e0       	ldi	r24, 0x02	; 2
    23ea:	61 e0       	ldi	r22, 0x01	; 1
    23ec:	40 e0       	ldi	r20, 0x00	; 0
    23ee:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>


	/*prepare 4 bits LSB to send */
	DIO_voidSetPinValue(D7_PORT,D7_PIN, GET_BIT(copy_u8Byte,PIN3) );
    23f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23f4:	86 95       	lsr	r24
    23f6:	86 95       	lsr	r24
    23f8:	86 95       	lsr	r24
    23fa:	98 2f       	mov	r25, r24
    23fc:	91 70       	andi	r25, 0x01	; 1
    23fe:	82 e0       	ldi	r24, 0x02	; 2
    2400:	65 e0       	ldi	r22, 0x05	; 5
    2402:	49 2f       	mov	r20, r25
    2404:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6_PORT,D6_PIN, GET_BIT(copy_u8Byte,PIN2) );
    2408:	8d 8d       	ldd	r24, Y+29	; 0x1d
    240a:	86 95       	lsr	r24
    240c:	86 95       	lsr	r24
    240e:	98 2f       	mov	r25, r24
    2410:	91 70       	andi	r25, 0x01	; 1
    2412:	82 e0       	ldi	r24, 0x02	; 2
    2414:	64 e0       	ldi	r22, 0x04	; 4
    2416:	49 2f       	mov	r20, r25
    2418:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5_PORT,D5_PIN, GET_BIT(copy_u8Byte,PIN1) );
    241c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    241e:	86 95       	lsr	r24
    2420:	98 2f       	mov	r25, r24
    2422:	91 70       	andi	r25, 0x01	; 1
    2424:	82 e0       	ldi	r24, 0x02	; 2
    2426:	63 e0       	ldi	r22, 0x03	; 3
    2428:	49 2f       	mov	r20, r25
    242a:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D4_PORT,D4_PIN, GET_BIT(copy_u8Byte,PIN0) );
    242e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2430:	98 2f       	mov	r25, r24
    2432:	91 70       	andi	r25, 0x01	; 1
    2434:	82 e0       	ldi	r24, 0x02	; 2
    2436:	62 e0       	ldi	r22, 0x02	; 2
    2438:	49 2f       	mov	r20, r25
    243a:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>

	/* open EN--> make it high --- then after 2m -- close EN -->make it low*/
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_HIGH);
    243e:	82 e0       	ldi	r24, 0x02	; 2
    2440:	61 e0       	ldi	r22, 0x01	; 1
    2442:	41 e0       	ldi	r20, 0x01	; 1
    2444:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	a0 e0       	ldi	r26, 0x00	; 0
    244e:	b0 e4       	ldi	r27, 0x40	; 64
    2450:	8b 87       	std	Y+11, r24	; 0x0b
    2452:	9c 87       	std	Y+12, r25	; 0x0c
    2454:	ad 87       	std	Y+13, r26	; 0x0d
    2456:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2458:	6b 85       	ldd	r22, Y+11	; 0x0b
    245a:	7c 85       	ldd	r23, Y+12	; 0x0c
    245c:	8d 85       	ldd	r24, Y+13	; 0x0d
    245e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	4a e7       	ldi	r20, 0x7A	; 122
    2466:	55 e4       	ldi	r21, 0x45	; 69
    2468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	8f 83       	std	Y+7, r24	; 0x07
    2472:	98 87       	std	Y+8, r25	; 0x08
    2474:	a9 87       	std	Y+9, r26	; 0x09
    2476:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2478:	6f 81       	ldd	r22, Y+7	; 0x07
    247a:	78 85       	ldd	r23, Y+8	; 0x08
    247c:	89 85       	ldd	r24, Y+9	; 0x09
    247e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e8       	ldi	r20, 0x80	; 128
    2486:	5f e3       	ldi	r21, 0x3F	; 63
    2488:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    248c:	88 23       	and	r24, r24
    248e:	2c f4       	brge	.+10     	; 0x249a <LCD_voidWriteBitsToSend+0x20c>
		__ticks = 1;
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	9e 83       	std	Y+6, r25	; 0x06
    2496:	8d 83       	std	Y+5, r24	; 0x05
    2498:	3f c0       	rjmp	.+126    	; 0x2518 <LCD_voidWriteBitsToSend+0x28a>
	else if (__tmp > 65535)
    249a:	6f 81       	ldd	r22, Y+7	; 0x07
    249c:	78 85       	ldd	r23, Y+8	; 0x08
    249e:	89 85       	ldd	r24, Y+9	; 0x09
    24a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	3f ef       	ldi	r19, 0xFF	; 255
    24a6:	4f e7       	ldi	r20, 0x7F	; 127
    24a8:	57 e4       	ldi	r21, 0x47	; 71
    24aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24ae:	18 16       	cp	r1, r24
    24b0:	4c f5       	brge	.+82     	; 0x2504 <LCD_voidWriteBitsToSend+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	40 e2       	ldi	r20, 0x20	; 32
    24c0:	51 e4       	ldi	r21, 0x41	; 65
    24c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	bc 01       	movw	r22, r24
    24cc:	cd 01       	movw	r24, r26
    24ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	9e 83       	std	Y+6, r25	; 0x06
    24d8:	8d 83       	std	Y+5, r24	; 0x05
    24da:	0f c0       	rjmp	.+30     	; 0x24fa <LCD_voidWriteBitsToSend+0x26c>
    24dc:	80 e9       	ldi	r24, 0x90	; 144
    24de:	91 e0       	ldi	r25, 0x01	; 1
    24e0:	9c 83       	std	Y+4, r25	; 0x04
    24e2:	8b 83       	std	Y+3, r24	; 0x03
    24e4:	8b 81       	ldd	r24, Y+3	; 0x03
    24e6:	9c 81       	ldd	r25, Y+4	; 0x04
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	f1 f7       	brne	.-4      	; 0x24e8 <LCD_voidWriteBitsToSend+0x25a>
    24ec:	9c 83       	std	Y+4, r25	; 0x04
    24ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f0:	8d 81       	ldd	r24, Y+5	; 0x05
    24f2:	9e 81       	ldd	r25, Y+6	; 0x06
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	9e 83       	std	Y+6, r25	; 0x06
    24f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fa:	8d 81       	ldd	r24, Y+5	; 0x05
    24fc:	9e 81       	ldd	r25, Y+6	; 0x06
    24fe:	00 97       	sbiw	r24, 0x00	; 0
    2500:	69 f7       	brne	.-38     	; 0x24dc <LCD_voidWriteBitsToSend+0x24e>
    2502:	14 c0       	rjmp	.+40     	; 0x252c <LCD_voidWriteBitsToSend+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2504:	6f 81       	ldd	r22, Y+7	; 0x07
    2506:	78 85       	ldd	r23, Y+8	; 0x08
    2508:	89 85       	ldd	r24, Y+9	; 0x09
    250a:	9a 85       	ldd	r25, Y+10	; 0x0a
    250c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	9e 83       	std	Y+6, r25	; 0x06
    2516:	8d 83       	std	Y+5, r24	; 0x05
    2518:	8d 81       	ldd	r24, Y+5	; 0x05
    251a:	9e 81       	ldd	r25, Y+6	; 0x06
    251c:	9a 83       	std	Y+2, r25	; 0x02
    251e:	89 83       	std	Y+1, r24	; 0x01
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	9a 81       	ldd	r25, Y+2	; 0x02
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	f1 f7       	brne	.-4      	; 0x2524 <LCD_voidWriteBitsToSend+0x296>
    2528:	9a 83       	std	Y+2, r25	; 0x02
    252a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_LOW);
    252c:	82 e0       	ldi	r24, 0x02	; 2
    252e:	61 e0       	ldi	r22, 0x01	; 1
    2530:	40 e0       	ldi	r20, 0x00	; 0
    2532:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>




}
    2536:	6d 96       	adiw	r28, 0x1d	; 29
    2538:	0f b6       	in	r0, 0x3f	; 63
    253a:	f8 94       	cli
    253c:	de bf       	out	0x3e, r29	; 62
    253e:	0f be       	out	0x3f, r0	; 63
    2540:	cd bf       	out	0x3d, r28	; 61
    2542:	cf 91       	pop	r28
    2544:	df 91       	pop	r29
    2546:	08 95       	ret

00002548 <LCD_voidWriteData>:



/***********************************************************************************/
void LCD_voidWriteData(u8 copy_u8data)
{
    2548:	df 93       	push	r29
    254a:	cf 93       	push	r28
    254c:	0f 92       	push	r0
    254e:	cd b7       	in	r28, 0x3d	; 61
    2550:	de b7       	in	r29, 0x3e	; 62
    2552:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to HIGH */
	DIO_voidSetPinValue(RS_PORT,RS_PIN,PIN_HIGH);
    2554:	82 e0       	ldi	r24, 0x02	; 2
    2556:	60 e0       	ldi	r22, 0x00	; 0
    2558:	41 e0       	ldi	r20, 0x01	; 1
    255a:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>

	LCD_voidWriteBitsToSend(copy_u8data);
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_voidWriteBitsToSend>
}
    2564:	0f 90       	pop	r0
    2566:	cf 91       	pop	r28
    2568:	df 91       	pop	r29
    256a:	08 95       	ret

0000256c <LCD_voidWriteCommand>:


/***********************************************************************************/

void LCD_voidWriteCommand(u8 copy_u8Command)
{
    256c:	df 93       	push	r29
    256e:	cf 93       	push	r28
    2570:	0f 92       	push	r0
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
    2576:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to low */
	DIO_voidSetPinValue(RS_PORT,RS_PIN,PIN_LOW);
    2578:	82 e0       	ldi	r24, 0x02	; 2
    257a:	60 e0       	ldi	r22, 0x00	; 0
    257c:	40 e0       	ldi	r20, 0x00	; 0
    257e:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPinValue>


	LCD_voidWriteBitsToSend(copy_u8Command);
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_voidWriteBitsToSend>
}
    2588:	0f 90       	pop	r0
    258a:	cf 91       	pop	r28
    258c:	df 91       	pop	r29
    258e:	08 95       	ret

00002590 <LCD_voidWriteString>:
/***********************************************************************************/



void LCD_voidWriteString(u8 * copy_str)
{
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	00 d0       	rcall	.+0      	; 0x2596 <LCD_voidWriteString+0x6>
    2596:	00 d0       	rcall	.+0      	; 0x2598 <LCD_voidWriteString+0x8>
    2598:	cd b7       	in	r28, 0x3d	; 61
    259a:	de b7       	in	r29, 0x3e	; 62
    259c:	9c 83       	std	Y+4, r25	; 0x04
    259e:	8b 83       	std	Y+3, r24	; 0x03

	u16 i= ZERO;
    25a0:	1a 82       	std	Y+2, r1	; 0x02
    25a2:	19 82       	std	Y+1, r1	; 0x01
    25a4:	0f c0       	rjmp	.+30     	; 0x25c4 <LCD_voidWriteString+0x34>
	while(copy_str[i] != '\0')
	{
		LCD_voidWriteData(copy_str[i]);
    25a6:	2b 81       	ldd	r18, Y+3	; 0x03
    25a8:	3c 81       	ldd	r19, Y+4	; 0x04
    25aa:	89 81       	ldd	r24, Y+1	; 0x01
    25ac:	9a 81       	ldd	r25, Y+2	; 0x02
    25ae:	f9 01       	movw	r30, r18
    25b0:	e8 0f       	add	r30, r24
    25b2:	f9 1f       	adc	r31, r25
    25b4:	80 81       	ld	r24, Z
    25b6:	0e 94 a4 12 	call	0x2548	; 0x2548 <LCD_voidWriteData>
		i++;
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	9a 81       	ldd	r25, Y+2	; 0x02
    25be:	01 96       	adiw	r24, 0x01	; 1
    25c0:	9a 83       	std	Y+2, r25	; 0x02
    25c2:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidWriteString(u8 * copy_str)
{

	u16 i= ZERO;
	while(copy_str[i] != '\0')
    25c4:	2b 81       	ldd	r18, Y+3	; 0x03
    25c6:	3c 81       	ldd	r19, Y+4	; 0x04
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	9a 81       	ldd	r25, Y+2	; 0x02
    25cc:	f9 01       	movw	r30, r18
    25ce:	e8 0f       	add	r30, r24
    25d0:	f9 1f       	adc	r31, r25
    25d2:	80 81       	ld	r24, Z
    25d4:	88 23       	and	r24, r24
    25d6:	39 f7       	brne	.-50     	; 0x25a6 <LCD_voidWriteString+0x16>
	{
		LCD_voidWriteData(copy_str[i]);
		i++;
	}
}
    25d8:	0f 90       	pop	r0
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	cf 91       	pop	r28
    25e2:	df 91       	pop	r29
    25e4:	08 95       	ret

000025e6 <LCD_voidGoToXY>:


/***********************************************************************************/
void LCD_voidGoToXY(u8 copy_u8row,u8 copy_u8col)
{
    25e6:	df 93       	push	r29
    25e8:	cf 93       	push	r28
    25ea:	cd b7       	in	r28, 0x3d	; 61
    25ec:	de b7       	in	r29, 0x3e	; 62
    25ee:	27 97       	sbiw	r28, 0x07	; 7
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	cd bf       	out	0x3d, r28	; 61
    25fa:	8e 83       	std	Y+6, r24	; 0x06
    25fc:	6f 83       	std	Y+7, r22	; 0x07
	 * 0x40 --> address row 1
	 * 0x14 --> address row 2
	 * 0x54 --> address row 3
	 * copy_u8col --> col num
	 * */
	u8 rows_address[4]={0x00,0x40,0x14,0x54};
    25fe:	1a 82       	std	Y+2, r1	; 0x02
    2600:	80 e4       	ldi	r24, 0x40	; 64
    2602:	8b 83       	std	Y+3, r24	; 0x03
    2604:	84 e1       	ldi	r24, 0x14	; 20
    2606:	8c 83       	std	Y+4, r24	; 0x04
    2608:	84 e5       	ldi	r24, 0x54	; 84
    260a:	8d 83       	std	Y+5, r24	; 0x05

	u8 local_address=( rows_address[copy_u8row]  + copy_u8col ) + SET_DDRAM_ADDRESS ;
    260c:	8e 81       	ldd	r24, Y+6	; 0x06
    260e:	28 2f       	mov	r18, r24
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	ce 01       	movw	r24, r28
    2614:	02 96       	adiw	r24, 0x02	; 2
    2616:	fc 01       	movw	r30, r24
    2618:	e2 0f       	add	r30, r18
    261a:	f3 1f       	adc	r31, r19
    261c:	90 81       	ld	r25, Z
    261e:	8f 81       	ldd	r24, Y+7	; 0x07
    2620:	89 0f       	add	r24, r25
    2622:	80 58       	subi	r24, 0x80	; 128
    2624:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidWriteCommand(local_address) ;
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	0e 94 b6 12 	call	0x256c	; 0x256c <LCD_voidWriteCommand>

}
    262c:	27 96       	adiw	r28, 0x07	; 7
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	de bf       	out	0x3e, r29	; 62
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	cd bf       	out	0x3d, r28	; 61
    2638:	cf 91       	pop	r28
    263a:	df 91       	pop	r29
    263c:	08 95       	ret

0000263e <LCD_voidClear>:

/***********************************************************************************/

void LCD_voidClear(void)
{
    263e:	df 93       	push	r29
    2640:	cf 93       	push	r28
    2642:	cd b7       	in	r28, 0x3d	; 61
    2644:	de b7       	in	r29, 0x3e	; 62
	LCD_voidWriteCommand( DISPLAY_CLEAR);
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	0e 94 b6 12 	call	0x256c	; 0x256c <LCD_voidWriteCommand>

}
    264c:	cf 91       	pop	r28
    264e:	df 91       	pop	r29
    2650:	08 95       	ret

00002652 <LCD_voidShift>:



/***********************************************************************************/

void LCD_voidShift(u8 copy_u8direction){
    2652:	df 93       	push	r29
    2654:	cf 93       	push	r28
    2656:	0f 92       	push	r0
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
    265c:	89 83       	std	Y+1, r24	; 0x01
	if (copy_u8direction==SHIFT_DISPLAY_RIGHT)
    265e:	89 81       	ldd	r24, Y+1	; 0x01
    2660:	8c 31       	cpi	r24, 0x1C	; 28
    2662:	21 f4       	brne	.+8      	; 0x266c <LCD_voidShift+0x1a>
		{
			//Shift right
			LCD_voidWriteCommand(SHIFT_DISPLAY_RIGHT);
    2664:	8c e1       	ldi	r24, 0x1C	; 28
    2666:	0e 94 b6 12 	call	0x256c	; 0x256c <LCD_voidWriteCommand>
    266a:	06 c0       	rjmp	.+12     	; 0x2678 <LCD_voidShift+0x26>
		}
		else if (copy_u8direction==SHIFT_DISPLAY_LIFT)
    266c:	89 81       	ldd	r24, Y+1	; 0x01
    266e:	88 31       	cpi	r24, 0x18	; 24
    2670:	19 f4       	brne	.+6      	; 0x2678 <LCD_voidShift+0x26>
		{
			//Shift left
			LCD_voidWriteCommand(SHIFT_DISPLAY_LIFT);
    2672:	88 e1       	ldi	r24, 0x18	; 24
    2674:	0e 94 b6 12 	call	0x256c	; 0x256c <LCD_voidWriteCommand>
		}
}
    2678:	0f 90       	pop	r0
    267a:	cf 91       	pop	r28
    267c:	df 91       	pop	r29
    267e:	08 95       	ret

00002680 <LCD_voidWriteNumber>:

/***********************************************************************************/

void LCD_voidWriteNumber( u32 Copy_u8num )

{
    2680:	0f 93       	push	r16
    2682:	1f 93       	push	r17
    2684:	df 93       	push	r29
    2686:	cf 93       	push	r28
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
    268c:	63 97       	sbiw	r28, 0x13	; 19
    268e:	0f b6       	in	r0, 0x3f	; 63
    2690:	f8 94       	cli
    2692:	de bf       	out	0x3e, r29	; 62
    2694:	0f be       	out	0x3f, r0	; 63
    2696:	cd bf       	out	0x3d, r28	; 61
    2698:	68 8b       	std	Y+16, r22	; 0x10
    269a:	79 8b       	std	Y+17, r23	; 0x11
    269c:	8a 8b       	std	Y+18, r24	; 0x12
    269e:	9b 8b       	std	Y+19, r25	; 0x13
	u32 LOCAL_NUMBER=Copy_u8num ;
    26a0:	88 89       	ldd	r24, Y+16	; 0x10
    26a2:	99 89       	ldd	r25, Y+17	; 0x11
    26a4:	aa 89       	ldd	r26, Y+18	; 0x12
    26a6:	bb 89       	ldd	r27, Y+19	; 0x13
    26a8:	8a 83       	std	Y+2, r24	; 0x02
    26aa:	9b 83       	std	Y+3, r25	; 0x03
    26ac:	ac 83       	std	Y+4, r26	; 0x04
    26ae:	bd 83       	std	Y+5, r27	; 0x05
	u8 LOCAL_ARR[10]   ;
	u8 i=ZERO ;
    26b0:	19 82       	std	Y+1, r1	; 0x01


	do
	{
		LOCAL_ARR[i]= ( (LOCAL_NUMBER%10)+'0' );
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
    26b4:	08 2f       	mov	r16, r24
    26b6:	10 e0       	ldi	r17, 0x00	; 0
    26b8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ba:	9b 81       	ldd	r25, Y+3	; 0x03
    26bc:	ac 81       	ldd	r26, Y+4	; 0x04
    26be:	bd 81       	ldd	r27, Y+5	; 0x05
    26c0:	2a e0       	ldi	r18, 0x0A	; 10
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e0       	ldi	r20, 0x00	; 0
    26c6:	50 e0       	ldi	r21, 0x00	; 0
    26c8:	bc 01       	movw	r22, r24
    26ca:	cd 01       	movw	r24, r26
    26cc:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__udivmodsi4>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	28 2f       	mov	r18, r24
    26d6:	20 5d       	subi	r18, 0xD0	; 208
    26d8:	ce 01       	movw	r24, r28
    26da:	06 96       	adiw	r24, 0x06	; 6
    26dc:	fc 01       	movw	r30, r24
    26de:	e0 0f       	add	r30, r16
    26e0:	f1 1f       	adc	r31, r17
    26e2:	20 83       	st	Z, r18
		LOCAL_NUMBER=LOCAL_NUMBER/10 ;
    26e4:	8a 81       	ldd	r24, Y+2	; 0x02
    26e6:	9b 81       	ldd	r25, Y+3	; 0x03
    26e8:	ac 81       	ldd	r26, Y+4	; 0x04
    26ea:	bd 81       	ldd	r27, Y+5	; 0x05
    26ec:	2a e0       	ldi	r18, 0x0A	; 10
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	40 e0       	ldi	r20, 0x00	; 0
    26f2:	50 e0       	ldi	r21, 0x00	; 0
    26f4:	bc 01       	movw	r22, r24
    26f6:	cd 01       	movw	r24, r26
    26f8:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__udivmodsi4>
    26fc:	da 01       	movw	r26, r20
    26fe:	c9 01       	movw	r24, r18
    2700:	8a 83       	std	Y+2, r24	; 0x02
    2702:	9b 83       	std	Y+3, r25	; 0x03
    2704:	ac 83       	std	Y+4, r26	; 0x04
    2706:	bd 83       	std	Y+5, r27	; 0x05
		i++ ;
    2708:	89 81       	ldd	r24, Y+1	; 0x01
    270a:	8f 5f       	subi	r24, 0xFF	; 255
    270c:	89 83       	std	Y+1, r24	; 0x01
	}
	while(LOCAL_NUMBER!=ZERO);
    270e:	8a 81       	ldd	r24, Y+2	; 0x02
    2710:	9b 81       	ldd	r25, Y+3	; 0x03
    2712:	ac 81       	ldd	r26, Y+4	; 0x04
    2714:	bd 81       	ldd	r27, Y+5	; 0x05
    2716:	00 97       	sbiw	r24, 0x00	; 0
    2718:	a1 05       	cpc	r26, r1
    271a:	b1 05       	cpc	r27, r1
    271c:	51 f6       	brne	.-108    	; 0x26b2 <LCD_voidWriteNumber+0x32>
    271e:	11 c0       	rjmp	.+34     	; 0x2742 <LCD_voidWriteNumber+0xc2>


	for(;i>0;i--)
	{
		LCD_voidWriteData(LOCAL_ARR[i-ONE]);
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	88 2f       	mov	r24, r24
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	9c 01       	movw	r18, r24
    2728:	21 50       	subi	r18, 0x01	; 1
    272a:	30 40       	sbci	r19, 0x00	; 0
    272c:	ce 01       	movw	r24, r28
    272e:	06 96       	adiw	r24, 0x06	; 6
    2730:	fc 01       	movw	r30, r24
    2732:	e2 0f       	add	r30, r18
    2734:	f3 1f       	adc	r31, r19
    2736:	80 81       	ld	r24, Z
    2738:	0e 94 a4 12 	call	0x2548	; 0x2548 <LCD_voidWriteData>
		i++ ;
	}
	while(LOCAL_NUMBER!=ZERO);


	for(;i>0;i--)
    273c:	89 81       	ldd	r24, Y+1	; 0x01
    273e:	81 50       	subi	r24, 0x01	; 1
    2740:	89 83       	std	Y+1, r24	; 0x01
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	88 23       	and	r24, r24
    2746:	61 f7       	brne	.-40     	; 0x2720 <LCD_voidWriteNumber+0xa0>
		LCD_voidWriteData(LOCAL_ARR[i-ONE]);
	}



}
    2748:	63 96       	adiw	r28, 0x13	; 19
    274a:	0f b6       	in	r0, 0x3f	; 63
    274c:	f8 94       	cli
    274e:	de bf       	out	0x3e, r29	; 62
    2750:	0f be       	out	0x3f, r0	; 63
    2752:	cd bf       	out	0x3d, r28	; 61
    2754:	cf 91       	pop	r28
    2756:	df 91       	pop	r29
    2758:	1f 91       	pop	r17
    275a:	0f 91       	pop	r16
    275c:	08 95       	ret

0000275e <LCD_voidWriteSpecialCharToCGRAM>:

/***********************************************************************************/

void LCD_voidWriteSpecialCharToCGRAM(u8 *copy_u8data , u8 copy_u8ByteNum )

{
    275e:	df 93       	push	r29
    2760:	cf 93       	push	r28
    2762:	00 d0       	rcall	.+0      	; 0x2764 <LCD_voidWriteSpecialCharToCGRAM+0x6>
    2764:	00 d0       	rcall	.+0      	; 0x2766 <LCD_voidWriteSpecialCharToCGRAM+0x8>
    2766:	0f 92       	push	r0
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62
    276c:	9c 83       	std	Y+4, r25	; 0x04
    276e:	8b 83       	std	Y+3, r24	; 0x03
    2770:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8CGramAddrss ;
	u8 counter=ZERO ;
    2772:	19 82       	std	Y+1, r1	; 0x01

	Local_u8CGramAddrss = ( (copy_u8ByteNum * EIGHT)+SET_CGRAM_ADDRESS ) ;
    2774:	8d 81       	ldd	r24, Y+5	; 0x05
    2776:	88 2f       	mov	r24, r24
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	08 96       	adiw	r24, 0x08	; 8
    277c:	88 0f       	add	r24, r24
    277e:	99 1f       	adc	r25, r25
    2780:	88 0f       	add	r24, r24
    2782:	99 1f       	adc	r25, r25
    2784:	88 0f       	add	r24, r24
    2786:	99 1f       	adc	r25, r25
    2788:	8a 83       	std	Y+2, r24	; 0x02

	LCD_voidWriteCommand( Local_u8CGramAddrss  ) ;
    278a:	8a 81       	ldd	r24, Y+2	; 0x02
    278c:	0e 94 b6 12 	call	0x256c	; 0x256c <LCD_voidWriteCommand>


	for(counter=ZERO;counter<EIGHT;counter++)
    2790:	19 82       	std	Y+1, r1	; 0x01
    2792:	0e c0       	rjmp	.+28     	; 0x27b0 <LCD_voidWriteSpecialCharToCGRAM+0x52>
	{
		LCD_voidWriteData(copy_u8data[counter]);
    2794:	89 81       	ldd	r24, Y+1	; 0x01
    2796:	28 2f       	mov	r18, r24
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	8b 81       	ldd	r24, Y+3	; 0x03
    279c:	9c 81       	ldd	r25, Y+4	; 0x04
    279e:	fc 01       	movw	r30, r24
    27a0:	e2 0f       	add	r30, r18
    27a2:	f3 1f       	adc	r31, r19
    27a4:	80 81       	ld	r24, Z
    27a6:	0e 94 a4 12 	call	0x2548	; 0x2548 <LCD_voidWriteData>
	Local_u8CGramAddrss = ( (copy_u8ByteNum * EIGHT)+SET_CGRAM_ADDRESS ) ;

	LCD_voidWriteCommand( Local_u8CGramAddrss  ) ;


	for(counter=ZERO;counter<EIGHT;counter++)
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
    27ac:	8f 5f       	subi	r24, 0xFF	; 255
    27ae:	89 83       	std	Y+1, r24	; 0x01
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
    27b2:	88 30       	cpi	r24, 0x08	; 8
    27b4:	78 f3       	brcs	.-34     	; 0x2794 <LCD_voidWriteSpecialCharToCGRAM+0x36>
	{
		LCD_voidWriteData(copy_u8data[counter]);
	}

	//Reset cursor
	LCD_voidGoToXY(0,0);
    27b6:	80 e0       	ldi	r24, 0x00	; 0
    27b8:	60 e0       	ldi	r22, 0x00	; 0
    27ba:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LCD_voidGoToXY>

}
    27be:	0f 90       	pop	r0
    27c0:	0f 90       	pop	r0
    27c2:	0f 90       	pop	r0
    27c4:	0f 90       	pop	r0
    27c6:	0f 90       	pop	r0
    27c8:	cf 91       	pop	r28
    27ca:	df 91       	pop	r29
    27cc:	08 95       	ret

000027ce <LCD_voidDisplaySpecialChar>:

/***********************************************************************************/

void LCD_voidDisplaySpecialChar(u8 copy_u8ByteNum )
{
    27ce:	df 93       	push	r29
    27d0:	cf 93       	push	r28
    27d2:	0f 92       	push	r0
    27d4:	cd b7       	in	r28, 0x3d	; 61
    27d6:	de b7       	in	r29, 0x3e	; 62
    27d8:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidWriteData(copy_u8ByteNum);
    27da:	89 81       	ldd	r24, Y+1	; 0x01
    27dc:	0e 94 a4 12 	call	0x2548	; 0x2548 <LCD_voidWriteData>

}
    27e0:	0f 90       	pop	r0
    27e2:	cf 91       	pop	r28
    27e4:	df 91       	pop	r29
    27e6:	08 95       	ret

000027e8 <main>:

#include "MTR_Interface.h"

#include "ULTRASONIC_Interface.h"

int main(){
    27e8:	df 93       	push	r29
    27ea:	cf 93       	push	r28
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62
    27f0:	ec 97       	sbiw	r28, 0x3c	; 60
    27f2:	0f b6       	in	r0, 0x3f	; 63
    27f4:	f8 94       	cli
    27f6:	de bf       	out	0x3e, r29	; 62
    27f8:	0f be       	out	0x3f, r0	; 63
    27fa:	cd bf       	out	0x3d, r28	; 61

	//LCD
	LCD_voidInit();
    27fc:	0e 94 95 10 	call	0x212a	; 0x212a <LCD_voidInit>

	//Custom character

	u8 LCD_MTR_Forward_ADDRESS = (u8)0;
    2800:	18 86       	std	Y+8, r1	; 0x08
		(u8)0b00100,
		(u8)0b00100,
		(u8)0b00100,
		(u8)0b00100,
		(u8)0b00100
	};
    2802:	ce 01       	movw	r24, r28
    2804:	09 96       	adiw	r24, 0x09	; 9
    2806:	9a a7       	std	Y+42, r25	; 0x2a
    2808:	89 a7       	std	Y+41, r24	; 0x29
    280a:	e4 e8       	ldi	r30, 0x84	; 132
    280c:	f1 e0       	ldi	r31, 0x01	; 1
    280e:	fc a7       	std	Y+44, r31	; 0x2c
    2810:	eb a7       	std	Y+43, r30	; 0x2b
    2812:	f8 e0       	ldi	r31, 0x08	; 8
    2814:	fd a7       	std	Y+45, r31	; 0x2d
    2816:	eb a5       	ldd	r30, Y+43	; 0x2b
    2818:	fc a5       	ldd	r31, Y+44	; 0x2c
    281a:	00 80       	ld	r0, Z
    281c:	8b a5       	ldd	r24, Y+43	; 0x2b
    281e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2820:	01 96       	adiw	r24, 0x01	; 1
    2822:	9c a7       	std	Y+44, r25	; 0x2c
    2824:	8b a7       	std	Y+43, r24	; 0x2b
    2826:	e9 a5       	ldd	r30, Y+41	; 0x29
    2828:	fa a5       	ldd	r31, Y+42	; 0x2a
    282a:	00 82       	st	Z, r0
    282c:	89 a5       	ldd	r24, Y+41	; 0x29
    282e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2830:	01 96       	adiw	r24, 0x01	; 1
    2832:	9a a7       	std	Y+42, r25	; 0x2a
    2834:	89 a7       	std	Y+41, r24	; 0x29
    2836:	9d a5       	ldd	r25, Y+45	; 0x2d
    2838:	91 50       	subi	r25, 0x01	; 1
    283a:	9d a7       	std	Y+45, r25	; 0x2d
    283c:	ed a5       	ldd	r30, Y+45	; 0x2d
    283e:	ee 23       	and	r30, r30
    2840:	51 f7       	brne	.-44     	; 0x2816 <main+0x2e>

	u8 LCD_MTR_Reverce_ADDRESS = (u8)1;
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	8f 83       	std	Y+7, r24	; 0x07
		(u8)0b00100,
		(u8)0b00100,
		(u8)0b11111,
		(u8)0b01110,
		(u8)0b00100
	};
    2846:	ce 01       	movw	r24, r28
    2848:	41 96       	adiw	r24, 0x11	; 17
    284a:	9f a7       	std	Y+47, r25	; 0x2f
    284c:	8e a7       	std	Y+46, r24	; 0x2e
    284e:	ec e7       	ldi	r30, 0x7C	; 124
    2850:	f1 e0       	ldi	r31, 0x01	; 1
    2852:	f9 ab       	std	Y+49, r31	; 0x31
    2854:	e8 ab       	std	Y+48, r30	; 0x30
    2856:	f8 e0       	ldi	r31, 0x08	; 8
    2858:	fa ab       	std	Y+50, r31	; 0x32
    285a:	e8 a9       	ldd	r30, Y+48	; 0x30
    285c:	f9 a9       	ldd	r31, Y+49	; 0x31
    285e:	00 80       	ld	r0, Z
    2860:	88 a9       	ldd	r24, Y+48	; 0x30
    2862:	99 a9       	ldd	r25, Y+49	; 0x31
    2864:	01 96       	adiw	r24, 0x01	; 1
    2866:	99 ab       	std	Y+49, r25	; 0x31
    2868:	88 ab       	std	Y+48, r24	; 0x30
    286a:	ee a5       	ldd	r30, Y+46	; 0x2e
    286c:	ff a5       	ldd	r31, Y+47	; 0x2f
    286e:	00 82       	st	Z, r0
    2870:	8e a5       	ldd	r24, Y+46	; 0x2e
    2872:	9f a5       	ldd	r25, Y+47	; 0x2f
    2874:	01 96       	adiw	r24, 0x01	; 1
    2876:	9f a7       	std	Y+47, r25	; 0x2f
    2878:	8e a7       	std	Y+46, r24	; 0x2e
    287a:	9a a9       	ldd	r25, Y+50	; 0x32
    287c:	91 50       	subi	r25, 0x01	; 1
    287e:	9a ab       	std	Y+50, r25	; 0x32
    2880:	ea a9       	ldd	r30, Y+50	; 0x32
    2882:	ee 23       	and	r30, r30
    2884:	51 f7       	brne	.-44     	; 0x285a <main+0x72>

	u8 LCD_MTR_Right_ADDRESS = (u8)2;
    2886:	82 e0       	ldi	r24, 0x02	; 2
    2888:	8e 83       	std	Y+6, r24	; 0x06
		(u8)0b11111,
		(u8)0b11111,
		(u8)0b00010,
		(u8)0b00100,
		(u8)0b01000
	};
    288a:	ce 01       	movw	r24, r28
    288c:	49 96       	adiw	r24, 0x19	; 25
    288e:	9c ab       	std	Y+52, r25	; 0x34
    2890:	8b ab       	std	Y+51, r24	; 0x33
    2892:	e4 e7       	ldi	r30, 0x74	; 116
    2894:	f1 e0       	ldi	r31, 0x01	; 1
    2896:	fe ab       	std	Y+54, r31	; 0x36
    2898:	ed ab       	std	Y+53, r30	; 0x35
    289a:	f8 e0       	ldi	r31, 0x08	; 8
    289c:	ff ab       	std	Y+55, r31	; 0x37
    289e:	ed a9       	ldd	r30, Y+53	; 0x35
    28a0:	fe a9       	ldd	r31, Y+54	; 0x36
    28a2:	00 80       	ld	r0, Z
    28a4:	8d a9       	ldd	r24, Y+53	; 0x35
    28a6:	9e a9       	ldd	r25, Y+54	; 0x36
    28a8:	01 96       	adiw	r24, 0x01	; 1
    28aa:	9e ab       	std	Y+54, r25	; 0x36
    28ac:	8d ab       	std	Y+53, r24	; 0x35
    28ae:	eb a9       	ldd	r30, Y+51	; 0x33
    28b0:	fc a9       	ldd	r31, Y+52	; 0x34
    28b2:	00 82       	st	Z, r0
    28b4:	8b a9       	ldd	r24, Y+51	; 0x33
    28b6:	9c a9       	ldd	r25, Y+52	; 0x34
    28b8:	01 96       	adiw	r24, 0x01	; 1
    28ba:	9c ab       	std	Y+52, r25	; 0x34
    28bc:	8b ab       	std	Y+51, r24	; 0x33
    28be:	9f a9       	ldd	r25, Y+55	; 0x37
    28c0:	91 50       	subi	r25, 0x01	; 1
    28c2:	9f ab       	std	Y+55, r25	; 0x37
    28c4:	ef a9       	ldd	r30, Y+55	; 0x37
    28c6:	ee 23       	and	r30, r30
    28c8:	51 f7       	brne	.-44     	; 0x289e <main+0xb6>

	u8 LCD_MTR_Lift_ADDRESS = (u8)3;
    28ca:	83 e0       	ldi	r24, 0x03	; 3
    28cc:	8d 83       	std	Y+5, r24	; 0x05
		(u8)0b11111,
		(u8)0b11111,
		(u8)0b01000,
		(u8)0b00100,
		(u8)0b00010
	};
    28ce:	ce 01       	movw	r24, r28
    28d0:	81 96       	adiw	r24, 0x21	; 33
    28d2:	99 af       	std	Y+57, r25	; 0x39
    28d4:	88 af       	std	Y+56, r24	; 0x38
    28d6:	ec e6       	ldi	r30, 0x6C	; 108
    28d8:	f1 e0       	ldi	r31, 0x01	; 1
    28da:	fb af       	std	Y+59, r31	; 0x3b
    28dc:	ea af       	std	Y+58, r30	; 0x3a
    28de:	f8 e0       	ldi	r31, 0x08	; 8
    28e0:	fc af       	std	Y+60, r31	; 0x3c
    28e2:	ea ad       	ldd	r30, Y+58	; 0x3a
    28e4:	fb ad       	ldd	r31, Y+59	; 0x3b
    28e6:	00 80       	ld	r0, Z
    28e8:	8a ad       	ldd	r24, Y+58	; 0x3a
    28ea:	9b ad       	ldd	r25, Y+59	; 0x3b
    28ec:	01 96       	adiw	r24, 0x01	; 1
    28ee:	9b af       	std	Y+59, r25	; 0x3b
    28f0:	8a af       	std	Y+58, r24	; 0x3a
    28f2:	e8 ad       	ldd	r30, Y+56	; 0x38
    28f4:	f9 ad       	ldd	r31, Y+57	; 0x39
    28f6:	00 82       	st	Z, r0
    28f8:	88 ad       	ldd	r24, Y+56	; 0x38
    28fa:	99 ad       	ldd	r25, Y+57	; 0x39
    28fc:	01 96       	adiw	r24, 0x01	; 1
    28fe:	99 af       	std	Y+57, r25	; 0x39
    2900:	88 af       	std	Y+56, r24	; 0x38
    2902:	9c ad       	ldd	r25, Y+60	; 0x3c
    2904:	91 50       	subi	r25, 0x01	; 1
    2906:	9c af       	std	Y+60, r25	; 0x3c
    2908:	ec ad       	ldd	r30, Y+60	; 0x3c
    290a:	ee 23       	and	r30, r30
    290c:	51 f7       	brne	.-44     	; 0x28e2 <main+0xfa>

	//Send the custom characters to the CGRAM
	LCD_voidWriteSpecialCharToCGRAM(LCD_MTR_Forward,LCD_MTR_Forward_ADDRESS);
    290e:	ce 01       	movw	r24, r28
    2910:	09 96       	adiw	r24, 0x09	; 9
    2912:	68 85       	ldd	r22, Y+8	; 0x08
    2914:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_voidWriteSpecialCharToCGRAM>

	LCD_voidWriteSpecialCharToCGRAM(LCD_MTR_Reverse,LCD_MTR_Reverce_ADDRESS);
    2918:	ce 01       	movw	r24, r28
    291a:	41 96       	adiw	r24, 0x11	; 17
    291c:	6f 81       	ldd	r22, Y+7	; 0x07
    291e:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_voidWriteSpecialCharToCGRAM>

	LCD_voidWriteSpecialCharToCGRAM(LCD_MTR_Right,LCD_MTR_Right_ADDRESS);
    2922:	ce 01       	movw	r24, r28
    2924:	49 96       	adiw	r24, 0x19	; 25
    2926:	6e 81       	ldd	r22, Y+6	; 0x06
    2928:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_voidWriteSpecialCharToCGRAM>

	LCD_voidWriteSpecialCharToCGRAM(LCD_MTR_Lift,LCD_MTR_Lift_ADDRESS);
    292c:	ce 01       	movw	r24, r28
    292e:	81 96       	adiw	r24, 0x21	; 33
    2930:	6d 81       	ldd	r22, Y+5	; 0x05
    2932:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_voidWriteSpecialCharToCGRAM>

	//Motor
	MTR_voidInit();
    2936:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <MTR_voidInit>

	//ULTRASONIC
	ULTRASONIC_voidInit();
    293a:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <ULTRASONIC_voidInit>

	u32 UltrasonicRead = 0;
    293e:	19 82       	std	Y+1, r1	; 0x01
    2940:	1a 82       	std	Y+2, r1	; 0x02
    2942:	1b 82       	std	Y+3, r1	; 0x03
    2944:	1c 82       	std	Y+4, r1	; 0x04

	while (1){
		ULTRASONIC_VoidStart();
    2946:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <ULTRASONIC_VoidStart>

		MTR_voidMovement(MTR_FORWARD,50);
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	62 e3       	ldi	r22, 0x32	; 50
    294e:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <MTR_voidMovement>

		UltrasonicRead = 0;
    2952:	19 82       	std	Y+1, r1	; 0x01
    2954:	1a 82       	std	Y+2, r1	; 0x02
    2956:	1b 82       	std	Y+3, r1	; 0x03
    2958:	1c 82       	std	Y+4, r1	; 0x04

		UltrasonicRead = ULTRASONIC_VoidVal();
    295a:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <ULTRASONIC_VoidVal>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	89 83       	std	Y+1, r24	; 0x01
    2964:	9a 83       	std	Y+2, r25	; 0x02
    2966:	ab 83       	std	Y+3, r26	; 0x03
    2968:	bc 83       	std	Y+4, r27	; 0x04

		if(UltrasonicRead!=0){
    296a:	89 81       	ldd	r24, Y+1	; 0x01
    296c:	9a 81       	ldd	r25, Y+2	; 0x02
    296e:	ab 81       	ldd	r26, Y+3	; 0x03
    2970:	bc 81       	ldd	r27, Y+4	; 0x04
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	a1 05       	cpc	r26, r1
    2976:	b1 05       	cpc	r27, r1
    2978:	31 f3       	breq	.-52     	; 0x2946 <main+0x15e>
			LCD_voidWriteNumber(UltrasonicRead);
    297a:	89 81       	ldd	r24, Y+1	; 0x01
    297c:	9a 81       	ldd	r25, Y+2	; 0x02
    297e:	ab 81       	ldd	r26, Y+3	; 0x03
    2980:	bc 81       	ldd	r27, Y+4	; 0x04
    2982:	bc 01       	movw	r22, r24
    2984:	cd 01       	movw	r24, r26
    2986:	0e 94 40 13 	call	0x2680	; 0x2680 <LCD_voidWriteNumber>
    298a:	dd cf       	rjmp	.-70     	; 0x2946 <main+0x15e>

0000298c <__mulsi3>:
    298c:	62 9f       	mul	r22, r18
    298e:	d0 01       	movw	r26, r0
    2990:	73 9f       	mul	r23, r19
    2992:	f0 01       	movw	r30, r0
    2994:	82 9f       	mul	r24, r18
    2996:	e0 0d       	add	r30, r0
    2998:	f1 1d       	adc	r31, r1
    299a:	64 9f       	mul	r22, r20
    299c:	e0 0d       	add	r30, r0
    299e:	f1 1d       	adc	r31, r1
    29a0:	92 9f       	mul	r25, r18
    29a2:	f0 0d       	add	r31, r0
    29a4:	83 9f       	mul	r24, r19
    29a6:	f0 0d       	add	r31, r0
    29a8:	74 9f       	mul	r23, r20
    29aa:	f0 0d       	add	r31, r0
    29ac:	65 9f       	mul	r22, r21
    29ae:	f0 0d       	add	r31, r0
    29b0:	99 27       	eor	r25, r25
    29b2:	72 9f       	mul	r23, r18
    29b4:	b0 0d       	add	r27, r0
    29b6:	e1 1d       	adc	r30, r1
    29b8:	f9 1f       	adc	r31, r25
    29ba:	63 9f       	mul	r22, r19
    29bc:	b0 0d       	add	r27, r0
    29be:	e1 1d       	adc	r30, r1
    29c0:	f9 1f       	adc	r31, r25
    29c2:	bd 01       	movw	r22, r26
    29c4:	cf 01       	movw	r24, r30
    29c6:	11 24       	eor	r1, r1
    29c8:	08 95       	ret

000029ca <__udivmodsi4>:
    29ca:	a1 e2       	ldi	r26, 0x21	; 33
    29cc:	1a 2e       	mov	r1, r26
    29ce:	aa 1b       	sub	r26, r26
    29d0:	bb 1b       	sub	r27, r27
    29d2:	fd 01       	movw	r30, r26
    29d4:	0d c0       	rjmp	.+26     	; 0x29f0 <__udivmodsi4_ep>

000029d6 <__udivmodsi4_loop>:
    29d6:	aa 1f       	adc	r26, r26
    29d8:	bb 1f       	adc	r27, r27
    29da:	ee 1f       	adc	r30, r30
    29dc:	ff 1f       	adc	r31, r31
    29de:	a2 17       	cp	r26, r18
    29e0:	b3 07       	cpc	r27, r19
    29e2:	e4 07       	cpc	r30, r20
    29e4:	f5 07       	cpc	r31, r21
    29e6:	20 f0       	brcs	.+8      	; 0x29f0 <__udivmodsi4_ep>
    29e8:	a2 1b       	sub	r26, r18
    29ea:	b3 0b       	sbc	r27, r19
    29ec:	e4 0b       	sbc	r30, r20
    29ee:	f5 0b       	sbc	r31, r21

000029f0 <__udivmodsi4_ep>:
    29f0:	66 1f       	adc	r22, r22
    29f2:	77 1f       	adc	r23, r23
    29f4:	88 1f       	adc	r24, r24
    29f6:	99 1f       	adc	r25, r25
    29f8:	1a 94       	dec	r1
    29fa:	69 f7       	brne	.-38     	; 0x29d6 <__udivmodsi4_loop>
    29fc:	60 95       	com	r22
    29fe:	70 95       	com	r23
    2a00:	80 95       	com	r24
    2a02:	90 95       	com	r25
    2a04:	9b 01       	movw	r18, r22
    2a06:	ac 01       	movw	r20, r24
    2a08:	bd 01       	movw	r22, r26
    2a0a:	cf 01       	movw	r24, r30
    2a0c:	08 95       	ret

00002a0e <__prologue_saves__>:
    2a0e:	2f 92       	push	r2
    2a10:	3f 92       	push	r3
    2a12:	4f 92       	push	r4
    2a14:	5f 92       	push	r5
    2a16:	6f 92       	push	r6
    2a18:	7f 92       	push	r7
    2a1a:	8f 92       	push	r8
    2a1c:	9f 92       	push	r9
    2a1e:	af 92       	push	r10
    2a20:	bf 92       	push	r11
    2a22:	cf 92       	push	r12
    2a24:	df 92       	push	r13
    2a26:	ef 92       	push	r14
    2a28:	ff 92       	push	r15
    2a2a:	0f 93       	push	r16
    2a2c:	1f 93       	push	r17
    2a2e:	cf 93       	push	r28
    2a30:	df 93       	push	r29
    2a32:	cd b7       	in	r28, 0x3d	; 61
    2a34:	de b7       	in	r29, 0x3e	; 62
    2a36:	ca 1b       	sub	r28, r26
    2a38:	db 0b       	sbc	r29, r27
    2a3a:	0f b6       	in	r0, 0x3f	; 63
    2a3c:	f8 94       	cli
    2a3e:	de bf       	out	0x3e, r29	; 62
    2a40:	0f be       	out	0x3f, r0	; 63
    2a42:	cd bf       	out	0x3d, r28	; 61
    2a44:	09 94       	ijmp

00002a46 <__epilogue_restores__>:
    2a46:	2a 88       	ldd	r2, Y+18	; 0x12
    2a48:	39 88       	ldd	r3, Y+17	; 0x11
    2a4a:	48 88       	ldd	r4, Y+16	; 0x10
    2a4c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a4e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a50:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a52:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a54:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a56:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a58:	b9 84       	ldd	r11, Y+9	; 0x09
    2a5a:	c8 84       	ldd	r12, Y+8	; 0x08
    2a5c:	df 80       	ldd	r13, Y+7	; 0x07
    2a5e:	ee 80       	ldd	r14, Y+6	; 0x06
    2a60:	fd 80       	ldd	r15, Y+5	; 0x05
    2a62:	0c 81       	ldd	r16, Y+4	; 0x04
    2a64:	1b 81       	ldd	r17, Y+3	; 0x03
    2a66:	aa 81       	ldd	r26, Y+2	; 0x02
    2a68:	b9 81       	ldd	r27, Y+1	; 0x01
    2a6a:	ce 0f       	add	r28, r30
    2a6c:	d1 1d       	adc	r29, r1
    2a6e:	0f b6       	in	r0, 0x3f	; 63
    2a70:	f8 94       	cli
    2a72:	de bf       	out	0x3e, r29	; 62
    2a74:	0f be       	out	0x3f, r0	; 63
    2a76:	cd bf       	out	0x3d, r28	; 61
    2a78:	ed 01       	movw	r28, r26
    2a7a:	08 95       	ret

00002a7c <_exit>:
    2a7c:	f8 94       	cli

00002a7e <__stop_program>:
    2a7e:	ff cf       	rjmp	.-2      	; 0x2a7e <__stop_program>
