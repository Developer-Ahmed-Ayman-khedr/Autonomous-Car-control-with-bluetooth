
AutonomousCarControlWithBluetoothCarControllerCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000136  00800060  00002e9a  00002f2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800196  00800196  00003064  2**0
                  ALLOC
  3 .stab         00003048  00000000  00000000  00003064  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001dee  00000000  00000000  000060ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007e9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000803a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000822c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a637  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b9bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000cb94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000cd54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000d04a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d9b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <__vector_1>
       8:	0c 94 21 0b 	jmp	0x1642	; 0x1642 <__vector_2>
       c:	0c 94 54 0b 	jmp	0x16a8	; 0x16a8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 3f 09 	jmp	0x127e	; 0x127e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 03 16 	call	0x2c06	; 0x2c06 <main>
      8a:	0c 94 4b 17 	jmp	0x2e96	; 0x2e96 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 14 17 	jmp	0x2e28	; 0x2e28 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 30 17 	jmp	0x2e60	; 0x2e60 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 14 17 	jmp	0x2e28	; 0x2e28 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 30 17 	jmp	0x2e60	; 0x2e60 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1c 17 	jmp	0x2e38	; 0x2e38 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e6       	ldi	r22, 0x66	; 102
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 38 17 	jmp	0x2e70	; 0x2e70 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 24 17 	jmp	0x2e48	; 0x2e48 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 40 17 	jmp	0x2e80	; 0x2e80 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 1c 17 	jmp	0x2e38	; 0x2e38 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 38 17 	jmp	0x2e70	; 0x2e70 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e2 59       	subi	r30, 0x92	; 146
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_VoidInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void UART_VoidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	0f 92       	push	r0
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62

	//u8 UCSRC_Data =0;
	UCSRC_REG_Data DATA ;
	DIO_voidSetPinDirection(PORTD_ID,PIN0,PIN_INPUT);
     e38:	83 e0       	ldi	r24, 0x03	; 3
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	40 e0       	ldi	r20, 0x00	; 0
     e3e:	0e 94 09 0c 	call	0x1812	; 0x1812 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD_ID,PIN1,PIN_OUTPUT);
     e42:	83 e0       	ldi	r24, 0x03	; 3
     e44:	61 e0       	ldi	r22, 0x01	; 1
     e46:	41 e0       	ldi	r20, 0x01	; 1
     e48:	0e 94 09 0c 	call	0x1812	; 0x1812 <DIO_voidSetPinDirection>

	/*   TO SELECT BAUD RATE   */
	UBRRL_REG = ( (u32)(F_OSC * 1000000) /((u32)16 * UART_BAUD_RATE)) - 1 ;
     e4c:	e9 e2       	ldi	r30, 0x29	; 41
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	83 e3       	ldi	r24, 0x33	; 51
     e52:	80 83       	st	Z, r24

	DATA.UCSRC_UPM =UART_PARITY_MODE ;
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	87 7e       	andi	r24, 0xE7	; 231
     e58:	89 83       	std	Y+1, r24	; 0x01
	DATA.UCSRC_UCPOL=UART_NUM_STOP_BIT ;
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	8e 7f       	andi	r24, 0xFE	; 254
     e5e:	89 83       	std	Y+1, r24	; 0x01
	/***********************************************/

	/***********************************************/

	/* TO SELECT CHARACTER SIZE -> 8 BITS */
	DATA.UCSRC_UCSZ=0b11 ;
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	86 60       	ori	r24, 0x06	; 6
     e64:	89 83       	std	Y+1, r24	; 0x01
	UCSRB_REG->UCSRB_UCSZ2=0b0 ;
     e66:	ea e2       	ldi	r30, 0x2A	; 42
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	8b 7f       	andi	r24, 0xFB	; 251
     e6e:	80 83       	st	Z, r24


	/***** Write data in UCSRC_REG in one time ***********/
	DATA.UCSRC_URSEL=ONE ;
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	80 64       	ori	r24, 0x40	; 64
     e74:	89 83       	std	Y+1, r24	; 0x01
	UCSRC_REG  = DATA.BYTE ;
     e76:	e0 e4       	ldi	r30, 0x40	; 64
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	80 83       	st	Z, r24

	/* TO ENABLE RX CIRCUIT */
	UCSRB_REG->UCSRB_RXEN =ONE  ;
     e7e:	ea e2       	ldi	r30, 0x2A	; 42
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	80 61       	ori	r24, 0x10	; 16
     e86:	80 83       	st	Z, r24


	/* TO ENABLE TX CIRCUIT */
	UCSRB_REG->UCSRB_TXEN =ONE  ;
     e88:	ea e2       	ldi	r30, 0x2A	; 42
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	88 60       	ori	r24, 0x08	; 8
     e90:	80 83       	st	Z, r24

}
     e92:	0f 90       	pop	r0
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <UART_VoidSendChar>:


UART_ERROR UART_VoidSendChar(u8 Copy_U8_Data)
{
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	00 d0       	rcall	.+0      	; 0xea0 <UART_VoidSendChar+0x6>
     ea0:	00 d0       	rcall	.+0      	; 0xea2 <UART_VoidSendChar+0x8>
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <UART_VoidSendChar+0xa>
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
     ea8:	8e 83       	std	Y+6, r24	; 0x06
	/* while(GET_BIT(UCSRA_REG,UCSRA_UDRE_BIT) ==0);
			UDR_REG = Copy_U8_Data; */
	u32 Local_U32_Counter = 0;
     eaa:	1a 82       	std	Y+2, r1	; 0x02
     eac:	1b 82       	std	Y+3, r1	; 0x03
     eae:	1c 82       	std	Y+4, r1	; 0x04
     eb0:	1d 82       	std	Y+5, r1	; 0x05
	UART_ERROR Send_check_ERROR=UART_NO_ERROR ;
     eb2:	19 82       	std	Y+1, r1	; 0x01
     eb4:	16 c0       	rjmp	.+44     	; 0xee2 <UART_VoidSendChar+0x48>

	while(Local_U32_Counter <= UART_POLLING_TIME)
	{
		Local_U32_Counter++;
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	9b 81       	ldd	r25, Y+3	; 0x03
     eba:	ac 81       	ldd	r26, Y+4	; 0x04
     ebc:	bd 81       	ldd	r27, Y+5	; 0x05
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	a1 1d       	adc	r26, r1
     ec2:	b1 1d       	adc	r27, r1
     ec4:	8a 83       	std	Y+2, r24	; 0x02
     ec6:	9b 83       	std	Y+3, r25	; 0x03
     ec8:	ac 83       	std	Y+4, r26	; 0x04
     eca:	bd 83       	std	Y+5, r27	; 0x05
		if( (UCSRA_REG->UCSRA_UDRE) == UART_FINISHED_TRANSMITTING)
     ecc:	eb e2       	ldi	r30, 0x2B	; 43
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	80 72       	andi	r24, 0x20	; 32
     ed4:	88 23       	and	r24, r24
     ed6:	29 f0       	breq	.+10     	; 0xee2 <UART_VoidSendChar+0x48>
		{
			UDR_REG = Copy_U8_Data;
     ed8:	ec e2       	ldi	r30, 0x2C	; 44
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	8e 81       	ldd	r24, Y+6	; 0x06
     ede:	80 83       	st	Z, r24
     ee0:	0c c0       	rjmp	.+24     	; 0xefa <UART_VoidSendChar+0x60>
	/* while(GET_BIT(UCSRA_REG,UCSRA_UDRE_BIT) ==0);
			UDR_REG = Copy_U8_Data; */
	u32 Local_U32_Counter = 0;
	UART_ERROR Send_check_ERROR=UART_NO_ERROR ;

	while(Local_U32_Counter <= UART_POLLING_TIME)
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	9b 81       	ldd	r25, Y+3	; 0x03
     ee6:	ac 81       	ldd	r26, Y+4	; 0x04
     ee8:	bd 81       	ldd	r27, Y+5	; 0x05
     eea:	81 3d       	cpi	r24, 0xD1	; 209
     eec:	27 e0       	ldi	r18, 0x07	; 7
     eee:	92 07       	cpc	r25, r18
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	a2 07       	cpc	r26, r18
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	b2 07       	cpc	r27, r18
     ef8:	f0 f2       	brcs	.-68     	; 0xeb6 <UART_VoidSendChar+0x1c>
		{
			UDR_REG = Copy_U8_Data;
			break;
		}
	}
	if(Local_U32_Counter == UART_POLLING_TIME)
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	9b 81       	ldd	r25, Y+3	; 0x03
     efe:	ac 81       	ldd	r26, Y+4	; 0x04
     f00:	bd 81       	ldd	r27, Y+5	; 0x05
     f02:	80 3d       	cpi	r24, 0xD0	; 208
     f04:	27 e0       	ldi	r18, 0x07	; 7
     f06:	92 07       	cpc	r25, r18
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	a2 07       	cpc	r26, r18
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	b2 07       	cpc	r27, r18
     f10:	11 f4       	brne	.+4      	; 0xf16 <UART_VoidSendChar+0x7c>
	{
		Send_check_ERROR=UART_TIME_OUT_ERROR ;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	89 83       	std	Y+1, r24	; 0x01
	}

	return  Send_check_ERROR ;
     f16:	89 81       	ldd	r24, Y+1	; 0x01


}
     f18:	26 96       	adiw	r28, 0x06	; 6
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <UART_VoidSendString>:
void UART_VoidSendString(u8* PO_U8_Data)
{
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	00 d0       	rcall	.+0      	; 0xf30 <UART_VoidSendString+0x6>
     f30:	0f 92       	push	r0
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	9b 83       	std	Y+3, r25	; 0x03
     f38:	8a 83       	std	Y+2, r24	; 0x02
	u8 count=0 ;
     f3a:	19 82       	std	Y+1, r1	; 0x01
     f3c:	0e c0       	rjmp	.+28     	; 0xf5a <UART_VoidSendString+0x30>

	while(PO_U8_Data[count] !='\0')
	{
		UART_VoidSendChar(PO_U8_Data[count]);
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	9b 81       	ldd	r25, Y+3	; 0x03
     f48:	fc 01       	movw	r30, r24
     f4a:	e2 0f       	add	r30, r18
     f4c:	f3 1f       	adc	r31, r19
     f4e:	80 81       	ld	r24, Z
     f50:	0e 94 4d 07 	call	0xe9a	; 0xe9a <UART_VoidSendChar>
		count ++ ;
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	8f 5f       	subi	r24, 0xFF	; 255
     f58:	89 83       	std	Y+1, r24	; 0x01
}
void UART_VoidSendString(u8* PO_U8_Data)
{
	u8 count=0 ;

	while(PO_U8_Data[count] !='\0')
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	9b 81       	ldd	r25, Y+3	; 0x03
     f64:	fc 01       	movw	r30, r24
     f66:	e2 0f       	add	r30, r18
     f68:	f3 1f       	adc	r31, r19
     f6a:	80 81       	ld	r24, Z
     f6c:	88 23       	and	r24, r24
     f6e:	39 f7       	brne	.-50     	; 0xf3e <UART_VoidSendString+0x14>
		UART_VoidSendChar(PO_U8_Data[count]);
		count ++ ;
	}


}
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <UART_VoidReceiveString>:

void UART_VoidReceiveString(u8* PO_U8_Data)
{
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	00 d0       	rcall	.+0      	; 0xf82 <UART_VoidReceiveString+0x6>
     f82:	00 d0       	rcall	.+0      	; 0xf84 <UART_VoidReceiveString+0x8>
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	9c 83       	std	Y+4, r25	; 0x04
     f8a:	8b 83       	std	Y+3, r24	; 0x03
	s8 count= -1 ;
     f8c:	8f ef       	ldi	r24, 0xFF	; 255
     f8e:	8a 83       	std	Y+2, r24	; 0x02

	u8 c=0 ;
     f90:	19 82       	std	Y+1, r1	; 0x01
     f92:	0c c0       	rjmp	.+24     	; 0xfac <UART_VoidReceiveString+0x30>
	for( ; c!=10 ; c++)
	{
		PO_U8_Data[c]=0 ;
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	9c 81       	ldd	r25, Y+4	; 0x04
     f9e:	fc 01       	movw	r30, r24
     fa0:	e2 0f       	add	r30, r18
     fa2:	f3 1f       	adc	r31, r19
     fa4:	10 82       	st	Z, r1
void UART_VoidReceiveString(u8* PO_U8_Data)
{
	s8 count= -1 ;

	u8 c=0 ;
	for( ; c!=10 ; c++)
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	8f 5f       	subi	r24, 0xFF	; 255
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	8a 30       	cpi	r24, 0x0A	; 10
     fb0:	89 f7       	brne	.-30     	; 0xf94 <UART_VoidReceiveString+0x18>
	{
		PO_U8_Data[c]=0 ;
	}
	do
	{
		count ++ ;
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	8f 5f       	subi	r24, 0xFF	; 255
     fb6:	8a 83       	std	Y+2, r24	; 0x02
		UART_U8ReceiveChar(&PO_U8_Data[count]);
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	28 2f       	mov	r18, r24
     fbc:	33 27       	eor	r19, r19
     fbe:	27 fd       	sbrc	r18, 7
     fc0:	30 95       	com	r19
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	9c 81       	ldd	r25, Y+4	; 0x04
     fc6:	82 0f       	add	r24, r18
     fc8:	93 1f       	adc	r25, r19
     fca:	0e 94 fb 07 	call	0xff6	; 0xff6 <UART_U8ReceiveChar>

	}while(PO_U8_Data[count] !='#');
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	28 2f       	mov	r18, r24
     fd2:	33 27       	eor	r19, r19
     fd4:	27 fd       	sbrc	r18, 7
     fd6:	30 95       	com	r19
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	9c 81       	ldd	r25, Y+4	; 0x04
     fdc:	fc 01       	movw	r30, r24
     fde:	e2 0f       	add	r30, r18
     fe0:	f3 1f       	adc	r31, r19
     fe2:	80 81       	ld	r24, Z
     fe4:	83 32       	cpi	r24, 0x23	; 35
     fe6:	29 f7       	brne	.-54     	; 0xfb2 <UART_VoidReceiveString+0x36>



}
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	cf 91       	pop	r28
     ff2:	df 91       	pop	r29
     ff4:	08 95       	ret

00000ff6 <UART_U8ReceiveChar>:


UART_ERROR UART_U8ReceiveChar(u8 *copy_p8_Data )
{
     ff6:	df 93       	push	r29
     ff8:	cf 93       	push	r28
     ffa:	00 d0       	rcall	.+0      	; 0xffc <UART_U8ReceiveChar+0x6>
     ffc:	0f 92       	push	r0
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
    1002:	9b 83       	std	Y+3, r25	; 0x03
    1004:	8a 83       	std	Y+2, r24	; 0x02
	UART_ERROR Send_check_ERROR=UART_NO_ERROR ;
    1006:	19 82       	std	Y+1, r1	; 0x01
	//	while( (UCSRA_REG->UCSRA_RXC) == ZERO);
	//	*copy_p8_Data= UDR_REG ;
	//	return Send_check_ERROR;

	if((UCSRA_REG->UCSRA_RXC) == 1)
    1008:	eb e2       	ldi	r30, 0x2B	; 43
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	80 78       	andi	r24, 0x80	; 128
    1010:	88 23       	and	r24, r24
    1012:	39 f0       	breq	.+14     	; 0x1022 <UART_U8ReceiveChar+0x2c>
	{
		*copy_p8_Data= UDR_REG ;
    1014:	ec e2       	ldi	r30, 0x2C	; 44
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	ea 81       	ldd	r30, Y+2	; 0x02
    101c:	fb 81       	ldd	r31, Y+3	; 0x03
    101e:	80 83       	st	Z, r24
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <UART_U8ReceiveChar+0x30>
	}
	else
	{
		Send_check_ERROR=1 ;
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	89 83       	std	Y+1, r24	; 0x01
	}
	return Send_check_ERROR;
    1026:	89 81       	ldd	r24, Y+1	; 0x01

			return  Send_check_ERROR ;
	 */


}
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <TIMER2_VoidInit>:


/**********************************************************************************
 *********************************************************************************/
void TIMER2_VoidInit(void)
{
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62


/**************************************/
#elif  MOOD2==PWM2_MOOD
/**************************************/
	TCCR2_REG->TCCR2_WGM00=1;
    103c:	e5 e4       	ldi	r30, 0x45	; 69
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	80 64       	ori	r24, 0x40	; 64
    1044:	80 83       	st	Z, r24
	TCCR2_REG->TCCR2_WGM01=1;
    1046:	e5 e4       	ldi	r30, 0x45	; 69
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	88 60       	ori	r24, 0x08	; 8
    104e:	80 83       	st	Z, r24

	TCCR2_REG->TCCR2_COM = PWM2_COMPARE_MATCH;
    1050:	e5 e4       	ldi	r30, 0x45	; 69
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	8f 7c       	andi	r24, 0xCF	; 207
    1058:	80 62       	ori	r24, 0x20	; 32
    105a:	80 83       	st	Z, r24
#endif /*Related to (#if MOOD==NORMAL_MOOD) and (#elif MOOD==CTC_MOOD) and (#elif MOOD==PWM_MOOD) */
	/**************************************/



}
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	08 95       	ret

00001062 <TIMER2_VoidStop>:

/*****************************************************************************/
void TIMER2_VoidStop(void)
{
    1062:	df 93       	push	r29
    1064:	cf 93       	push	r28
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
	TCCR2_REG->TCCR2_CS0=No2_FREQ;
    106a:	e5 e4       	ldi	r30, 0x45	; 69
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	88 7f       	andi	r24, 0xF8	; 248
    1072:	80 83       	st	Z, r24

}
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <TIMER2_VoidStart>:


/*****************************************************************************/
void TIMER2_VoidStart(void)
{
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62

	TCCR2_REG->TCCR2_CS0=PRESCALER2;
    1082:	e5 e4       	ldi	r30, 0x45	; 69
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	88 7f       	andi	r24, 0xF8	; 248
    108a:	85 60       	ori	r24, 0x05	; 5
    108c:	80 83       	st	Z, r24

}
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	08 95       	ret

00001094 <TIMER2_VoidSetPreload>:

/*****************************************************************************/
void TIMER2_VoidSetPreload(u8 copy_u8PRELOAD )
{
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	0f 92       	push	r0
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	89 83       	std	Y+1, r24	; 0x01

	TCNT2_REG=copy_u8PRELOAD;
    10a0:	e4 e4       	ldi	r30, 0x44	; 68
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	80 83       	st	Z, r24
}
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <TIMER2_VoidVal>:

/*****************************************************************************/

u8 TIMER2_VoidVal(void )
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62

	return  TCNT2_REG ;
    10b8:	e4 e4       	ldi	r30, 0x44	; 68
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
}
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <TIMER2_VoidSetPWMCompareMatch>:

/*****************************************************************************/
void TIMER2_VoidSetPWMCompareMatch(u8 copy_u8Val )
{
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	0f 92       	push	r0
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	89 83       	std	Y+1, r24	; 0x01
#if PWM_COMPARE_MATCH == CLEAR_ON_COMPARE_MATCH_SET_ON_TOP
	//OCR2_REG =   ( ( (f32)copy_u8Val / 100 ) * (255) );
	  OCR2_REG =   ( ( (u32)copy_u8Val * 255 ) / (100) );
    10d4:	03 e4       	ldi	r16, 0x43	; 67
    10d6:	10 e0       	ldi	r17, 0x00	; 0
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	a0 e0       	ldi	r26, 0x00	; 0
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	2f ef       	ldi	r18, 0xFF	; 255
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	40 e0       	ldi	r20, 0x00	; 0
    10e8:	50 e0       	ldi	r21, 0x00	; 0
    10ea:	bc 01       	movw	r22, r24
    10ec:	cd 01       	movw	r24, r26
    10ee:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <__mulsi3>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	24 e6       	ldi	r18, 0x64	; 100
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	50 e0       	ldi	r21, 0x00	; 0
    10fe:	bc 01       	movw	r22, r24
    1100:	cd 01       	movw	r24, r26
    1102:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__udivmodsi4>
    1106:	da 01       	movw	r26, r20
    1108:	c9 01       	movw	r24, r18
    110a:	f8 01       	movw	r30, r16
    110c:	80 83       	st	Z, r24

#elif PWM_COMPARE_MATCH == SET_ON_COMPARE_MATCH_CLR_ON_TOP
	//OCR2_REG = (255) - ( ( (f32)copy_u8Val / 100 ) * (255) ) ;
	  OCR2_REG = (255) - ( ( (u32)copy_u8Val * 255 ) / (100) ) ;
#endif
}
    110e:	0f 90       	pop	r0
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	1f 91       	pop	r17
    1116:	0f 91       	pop	r16
    1118:	08 95       	ret

0000111a <TIMER1_voidPwm1Init>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTIONS BODY   */
/*--------------------------------------------------------------------------------------------*/
void TIMER1_voidPwm1Init(void)
{
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
	/* to enable output circuit for PD5 pin */

	DIO_voidSetPinDirection(PORTD_ID,PIN5,PIN_OUTPUT);
    1122:	83 e0       	ldi	r24, 0x03	; 3
    1124:	65 e0       	ldi	r22, 0x05	; 5
    1126:	41 e0       	ldi	r20, 0x01	; 1
    1128:	0e 94 09 0c 	call	0x1812	; 0x1812 <DIO_voidSetPinDirection>

	/* to select mode 14 in table 47 */
	CLR_BIT(TCCR1A_REG,WGM10);
    112c:	af e4       	ldi	r26, 0x4F	; 79
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	ef e4       	ldi	r30, 0x4F	; 79
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	8e 7f       	andi	r24, 0xFE	; 254
    1138:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_REG,WGM11);
    113a:	af e4       	ldi	r26, 0x4F	; 79
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	ef e4       	ldi	r30, 0x4F	; 79
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	82 60       	ori	r24, 0x02	; 2
    1146:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,WGM12);
    1148:	ae e4       	ldi	r26, 0x4E	; 78
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	ee e4       	ldi	r30, 0x4E	; 78
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	88 60       	ori	r24, 0x08	; 8
    1154:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,WGM13);
    1156:	ae e4       	ldi	r26, 0x4E	; 78
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	ee e4       	ldi	r30, 0x4E	; 78
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	80 61       	ori	r24, 0x10	; 16
    1162:	8c 93       	st	X, r24

	/* to select non inverting mode */
	SET_BIT(TCCR1A_REG,COM1A1);
    1164:	af e4       	ldi	r26, 0x4F	; 79
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	ef e4       	ldi	r30, 0x4F	; 79
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	80 68       	ori	r24, 0x80	; 128
    1170:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A_REG,COM1A0);
    1172:	af e4       	ldi	r26, 0x4F	; 79
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	ef e4       	ldi	r30, 0x4F	; 79
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	8f 7b       	andi	r24, 0xBF	; 191
    117e:	8c 93       	st	X, r24
}
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <TIMER1_voidPwm1SetTop>:
void TIMER1_voidPwm1SetTop(u32 copy_u32top)
{
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	00 d0       	rcall	.+0      	; 0x118c <TIMER1_voidPwm1SetTop+0x6>
    118c:	00 d0       	rcall	.+0      	; 0x118e <TIMER1_voidPwm1SetTop+0x8>
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	69 83       	std	Y+1, r22	; 0x01
    1194:	7a 83       	std	Y+2, r23	; 0x02
    1196:	8b 83       	std	Y+3, r24	; 0x03
    1198:	9c 83       	std	Y+4, r25	; 0x04
	//PRESCALER = 8  at  16M F
	ICR1_REG = copy_u32top;
    119a:	e6 e4       	ldi	r30, 0x46	; 70
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	9a 81       	ldd	r25, Y+2	; 0x02
    11a2:	91 83       	std	Z+1, r25	; 0x01
    11a4:	80 83       	st	Z, r24
}
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <TIMER1_voidPwm1SetDutyCycle>:

void TIMER1_voidPwm1SetDutyCycle(u32 copy_u32duty)
{
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <TIMER1_voidPwm1SetDutyCycle+0x6>
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <TIMER1_voidPwm1SetDutyCycle+0x8>
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	69 83       	std	Y+1, r22	; 0x01
    11c2:	7a 83       	std	Y+2, r23	; 0x02
    11c4:	8b 83       	std	Y+3, r24	; 0x03
    11c6:	9c 83       	std	Y+4, r25	; 0x04
	// pass num between 25 and 65
	//OCR1A_REG = 62;

	OCR1A_REG = copy_u32duty;
    11c8:	ea e4       	ldi	r30, 0x4A	; 74
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	9a 81       	ldd	r25, Y+2	; 0x02
    11d0:	91 83       	std	Z+1, r25	; 0x01
    11d2:	80 83       	st	Z, r24

}
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	08 95       	ret

000011e2 <TIMER1_voidPwm1Start>:
void TIMER1_voidPwm1Start(void)
{
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
#elif TIMER1_PRESCALER   ==   256
	CLR_BIT(TCCR1B_REG,CS10);
	CLR_BIT(TCCR1B_REG,CS11);
	SET_BIT(TCCR1B_REG,CS12);
#elif TIMER1_PRESCALER   ==   64
	SET_BIT(TCCR1B_REG,CS10);
    11ea:	ae e4       	ldi	r26, 0x4E	; 78
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	ee e4       	ldi	r30, 0x4E	; 78
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	81 60       	ori	r24, 0x01	; 1
    11f6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,CS11);
    11f8:	ae e4       	ldi	r26, 0x4E	; 78
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	ee e4       	ldi	r30, 0x4E	; 78
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	82 60       	ori	r24, 0x02	; 2
    1204:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,CS12);
    1206:	ae e4       	ldi	r26, 0x4E	; 78
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	ee e4       	ldi	r30, 0x4E	; 78
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	8b 7f       	andi	r24, 0xFB	; 251
    1212:	8c 93       	st	X, r24
#elif TIMER1_PRESCALER   ==   8
	CLR_BIT(TCCR1B_REG,CS10);
	SET_BIT(TCCR1B_REG,CS11);
	CLR_BIT(TCCR1B_REG,CS12);
#endif
}
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <TIMER1_voidPwm1Stop>:
void TIMER1_voidPwm1Stop(void)
{
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B_REG,CS10);
    1222:	ae e4       	ldi	r26, 0x4E	; 78
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	ee e4       	ldi	r30, 0x4E	; 78
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	8e 7f       	andi	r24, 0xFE	; 254
    122e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,CS11);
    1230:	ae e4       	ldi	r26, 0x4E	; 78
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	ee e4       	ldi	r30, 0x4E	; 78
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	8d 7f       	andi	r24, 0xFD	; 253
    123c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,CS12);
    123e:	ae e4       	ldi	r26, 0x4E	; 78
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	ee e4       	ldi	r30, 0x4E	; 78
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	8b 7f       	andi	r24, 0xFB	; 251
    124a:	8c 93       	st	X, r24
}
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <TIMER0_voidSetCallBack>:
//global pointer to fun
static void (*TIMER0_callBack)(void);

//call back fun
void TIMER0_voidSetCallBack(  void (*ptr_timer)(void) )
{
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	00 d0       	rcall	.+0      	; 0x1258 <TIMER0_voidSetCallBack+0x6>
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	9a 83       	std	Y+2, r25	; 0x02
    125e:	89 83       	std	Y+1, r24	; 0x01

	if(ptr_timer!=NULL)
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	9a 81       	ldd	r25, Y+2	; 0x02
    1264:	00 97       	sbiw	r24, 0x00	; 0
    1266:	31 f0       	breq	.+12     	; 0x1274 <TIMER0_voidSetCallBack+0x22>
	{
		TIMER0_callBack=ptr_timer ;
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	9a 81       	ldd	r25, Y+2	; 0x02
    126c:	90 93 97 01 	sts	0x0197, r25
    1270:	80 93 96 01 	sts	0x0196, r24
	}
}
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	08 95       	ret

0000127e <__vector_11>:


#if MOOD== NORMAL_MOOD
void __vector_11 () __attribute__  ((signal));
void __vector_11 ()
{
    127e:	1f 92       	push	r1
    1280:	0f 92       	push	r0
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	0f 92       	push	r0
    1286:	11 24       	eor	r1, r1
    1288:	2f 93       	push	r18
    128a:	3f 93       	push	r19
    128c:	4f 93       	push	r20
    128e:	5f 93       	push	r21
    1290:	6f 93       	push	r22
    1292:	7f 93       	push	r23
    1294:	8f 93       	push	r24
    1296:	9f 93       	push	r25
    1298:	af 93       	push	r26
    129a:	bf 93       	push	r27
    129c:	ef 93       	push	r30
    129e:	ff 93       	push	r31
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62

	TIMER0_callBack();
    12a8:	e0 91 96 01 	lds	r30, 0x0196
    12ac:	f0 91 97 01 	lds	r31, 0x0197
    12b0:	09 95       	icall

}
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	ff 91       	pop	r31
    12b8:	ef 91       	pop	r30
    12ba:	bf 91       	pop	r27
    12bc:	af 91       	pop	r26
    12be:	9f 91       	pop	r25
    12c0:	8f 91       	pop	r24
    12c2:	7f 91       	pop	r23
    12c4:	6f 91       	pop	r22
    12c6:	5f 91       	pop	r21
    12c8:	4f 91       	pop	r20
    12ca:	3f 91       	pop	r19
    12cc:	2f 91       	pop	r18
    12ce:	0f 90       	pop	r0
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	0f 90       	pop	r0
    12d4:	1f 90       	pop	r1
    12d6:	18 95       	reti

000012d8 <TIMER0_VoidInit>:


/**********************************************************************************
 *********************************************************************************/
void TIMER0_VoidInit(void)
{
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62

/**************************************/
#if MOOD==NORMAL_MOOD
/**************************************/
	TCCR0_REG->TCCR0_WGM00 = ZERO;
    12e0:	e3 e5       	ldi	r30, 0x53	; 83
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	8f 7b       	andi	r24, 0xBF	; 191
    12e8:	80 83       	st	Z, r24
	TCCR0_REG->TCCR0_WGM01 = ZERO;
    12ea:	e3 e5       	ldi	r30, 0x53	; 83
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	87 7f       	andi	r24, 0xF7	; 247
    12f2:	80 83       	st	Z, r24
	TCNT0_REG=PRELOAD;
    12f4:	e2 e5       	ldi	r30, 0x52	; 82
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	10 82       	st	Z, r1
	/*------------------------------------*/
#if ISR == ISR_EN
	/*enabel  NORMAL_MOOD interrupt*/
	TIMSK_REG->TIMSK_TOIE0 = ONE ;
    12fa:	e9 e5       	ldi	r30, 0x59	; 89
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	81 60       	ori	r24, 0x01	; 1
    1302:	80 83       	st	Z, r24
#endif /*Related to (#if MOOD==NORMAL_MOOD) and (#elif MOOD==CTC_MOOD) and (#elif MOOD==PWM_MOOD) */
	/**************************************/



}
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <TIMER0_VoidStop>:

/*****************************************************************************/
void TIMER0_VoidStop(void)
{
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG->TCCR0_CS0=No_FREQ;
    1312:	e3 e5       	ldi	r30, 0x53	; 83
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	88 7f       	andi	r24, 0xF8	; 248
    131a:	80 83       	st	Z, r24

}
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <TIMER0_VoidStart>:


/*****************************************************************************/
void TIMER0_VoidStart(void)
{
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62

	TCCR0_REG->TCCR0_CS0=PRESCALER;
    132a:	e3 e5       	ldi	r30, 0x53	; 83
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	88 7f       	andi	r24, 0xF8	; 248
    1332:	83 60       	ori	r24, 0x03	; 3
    1334:	80 83       	st	Z, r24

}
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	08 95       	ret

0000133c <TIMER0_VoidSetPreload>:

/*****************************************************************************/
void TIMER0_VoidSetPreload(u8 copy_u8PRELOAD )
{
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	0f 92       	push	r0
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	89 83       	std	Y+1, r24	; 0x01

	TCNT0_REG=copy_u8PRELOAD;
    1348:	e2 e5       	ldi	r30, 0x52	; 82
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	80 83       	st	Z, r24
}
    1350:	0f 90       	pop	r0
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <TIMER0_VoidVal>:

/*****************************************************************************/

u8 TIMER0_VoidVal(void )
{
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62

	return  TCNT0_REG ;
    1360:	e2 e5       	ldi	r30, 0x52	; 82
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
}
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <TIMER0_VoidSetPWMCompareMatch>:

/*****************************************************************************/
void TIMER0_VoidSetPWMCompareMatch(u8 copy_u8Val )
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	0f 92       	push	r0
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	89 83       	std	Y+1, r24	; 0x01

#elif PWM_COMPARE_MATCH == SET_ON_COMPARE_MATCH_CLR_ON_TOP
	//OCR0_REG = (255) - ( ( (f32)copy_u8Val / 100 ) * (255) ) ;
	  OCR0_REG = (255) - ( ( (u32)copy_u8Val * 255 ) / (100) ) ;
#endif
}
    1378:	0f 90       	pop	r0
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	08 95       	ret

00001380 <WDT_VoidEnabel>:

/*
 * watch dog timer IN TIMER_1
 */
void WDT_VoidEnabel(void )
{
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62

	//SET_BIT(WDTCR_,3);
	WDTCR_REG->WDTCR_WDE=1;
    1388:	e1 e4       	ldi	r30, 0x41	; 65
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	88 60       	ori	r24, 0x08	; 8
    1390:	80 83       	st	Z, r24
}
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <WDT_VoidDisEnabel>:

void WDT_VoidDisEnabel(void )
{
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
//	WDTCR_==(1<<4)|(1<<3);
//	WDTCR_=0 ;

WDTCR_REG->WDTCR_Data=(1<<4)|(1<<3);
    13a0:	e1 e4       	ldi	r30, 0x41	; 65
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	88 e1       	ldi	r24, 0x18	; 24
    13a6:	80 83       	st	Z, r24
WDTCR_REG->WDTCR_WDE=0;
    13a8:	e1 e4       	ldi	r30, 0x41	; 65
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	87 7f       	andi	r24, 0xF7	; 247
    13b0:	80 83       	st	Z, r24
}
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <WDT_VoidSleep>:
void WDT_VoidSleep(u8 sleep_time )
{
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	0f 92       	push	r0
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	89 83       	std	Y+1, r24	; 0x01

	//WDTCR_=(WDTCR_&0xF8) |sleep_time ;

	WDTCR_REG->WDTCR_WDP=sleep_time;
    13c4:	e1 e4       	ldi	r30, 0x41	; 65
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	87 70       	andi	r24, 0x07	; 7
    13cc:	98 2f       	mov	r25, r24
    13ce:	97 70       	andi	r25, 0x07	; 7
    13d0:	80 81       	ld	r24, Z
    13d2:	88 7f       	andi	r24, 0xF8	; 248
    13d4:	89 2b       	or	r24, r25
    13d6:	80 83       	st	Z, r24

}
    13d8:	0f 90       	pop	r0
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	08 95       	ret

000013e0 <GIE_Enable>:
#include "GIE_Interface.h"
#include "GIE_private.h"


void GIE_Enable(void)
{
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
     SET_BIT(GIE_SREG,I_bit);
    13e8:	af e5       	ldi	r26, 0x5F	; 95
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	ef e5       	ldi	r30, 0x5F	; 95
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	80 68       	ori	r24, 0x80	; 128
    13f4:	8c 93       	st	X, r24

}
    13f6:	cf 91       	pop	r28
    13f8:	df 91       	pop	r29
    13fa:	08 95       	ret

000013fc <GIE_Disable>:

void GIE_Disable(void)
{
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
 CLR_BIT(GIE_SREG,I_bit);
    1404:	af e5       	ldi	r26, 0x5F	; 95
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	ef e5       	ldi	r30, 0x5F	; 95
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	8f 77       	andi	r24, 0x7F	; 127
    1410:	8c 93       	st	X, r24

}
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <EXTINT_voidInit>:



#ifdef EXT_Init_NORMAL
void EXTINT_voidInit(u8 copy_u8ExtNum,u8 copy_u8ControlSens)
{
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	00 d0       	rcall	.+0      	; 0x141e <EXTINT_voidInit+0x6>
    141e:	00 d0       	rcall	.+0      	; 0x1420 <EXTINT_voidInit+0x8>
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	89 83       	std	Y+1, r24	; 0x01
    1426:	6a 83       	std	Y+2, r22	; 0x02

	switch(copy_u8ExtNum)
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	3c 83       	std	Y+4, r19	; 0x04
    1430:	2b 83       	std	Y+3, r18	; 0x03
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	9c 81       	ldd	r25, Y+4	; 0x04
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	91 05       	cpc	r25, r1
    143a:	d9 f1       	breq	.+118    	; 0x14b2 <EXTINT_voidInit+0x9a>
    143c:	2b 81       	ldd	r18, Y+3	; 0x03
    143e:	3c 81       	ldd	r19, Y+4	; 0x04
    1440:	22 30       	cpi	r18, 0x02	; 2
    1442:	31 05       	cpc	r19, r1
    1444:	09 f4       	brne	.+2      	; 0x1448 <EXTINT_voidInit+0x30>
    1446:	65 c0       	rjmp	.+202    	; 0x1512 <EXTINT_voidInit+0xfa>
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	9c 81       	ldd	r25, Y+4	; 0x04
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	09 f0       	breq	.+2      	; 0x1452 <EXTINT_voidInit+0x3a>
    1450:	81 c0       	rjmp	.+258    	; 0x1554 <EXTINT_voidInit+0x13c>
	{
	case EXT0_ID :

		DIO_voidSetPinDirection(PORTD_ID,PIN2,PIN_INPUT);
    1452:	83 e0       	ldi	r24, 0x03	; 3
    1454:	62 e0       	ldi	r22, 0x02	; 2
    1456:	40 e0       	ldi	r20, 0x00	; 0
    1458:	0e 94 09 0c 	call	0x1812	; 0x1812 <DIO_voidSetPinDirection>

		if(copy_u8ControlSens==FALLING_EDGE)
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	88 23       	and	r24, r24
    1460:	79 f4       	brne	.+30     	; 0x1480 <EXTINT_voidInit+0x68>
		{

			CLR_BIT(MCUCR_REG,MCUCR_ISC00);
    1462:	a5 e5       	ldi	r26, 0x55	; 85
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e5 e5       	ldi	r30, 0x55	; 85
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	8e 7f       	andi	r24, 0xFE	; 254
    146e:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,MCUCR_ISC01);
    1470:	a5 e5       	ldi	r26, 0x55	; 85
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	e5 e5       	ldi	r30, 0x55	; 85
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	82 60       	ori	r24, 0x02	; 2
    147c:	8c 93       	st	X, r24
    147e:	11 c0       	rjmp	.+34     	; 0x14a2 <EXTINT_voidInit+0x8a>

		}


		else if(copy_u8ControlSens==RISING_EDGE)
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	71 f4       	brne	.+28     	; 0x14a2 <EXTINT_voidInit+0x8a>
		{
			SET_BIT(MCUCR_REG,MCUCR_ISC00);
    1486:	a5 e5       	ldi	r26, 0x55	; 85
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e5 e5       	ldi	r30, 0x55	; 85
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	81 60       	ori	r24, 0x01	; 1
    1492:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,MCUCR_ISC01);
    1494:	a5 e5       	ldi	r26, 0x55	; 85
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e5 e5       	ldi	r30, 0x55	; 85
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	82 60       	ori	r24, 0x02	; 2
    14a0:	8c 93       	st	X, r24
		}

		SET_BIT(GICR_REG,GICR_INT0);
    14a2:	ab e5       	ldi	r26, 0x5B	; 91
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	eb e5       	ldi	r30, 0x5B	; 91
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	80 64       	ori	r24, 0x40	; 64
    14ae:	8c 93       	st	X, r24
    14b0:	51 c0       	rjmp	.+162    	; 0x1554 <EXTINT_voidInit+0x13c>
		break ;


	case EXT1_ID :

		DIO_voidSetPinDirection(PORTD_ID,PIN3,PIN_INPUT);
    14b2:	83 e0       	ldi	r24, 0x03	; 3
    14b4:	63 e0       	ldi	r22, 0x03	; 3
    14b6:	40 e0       	ldi	r20, 0x00	; 0
    14b8:	0e 94 09 0c 	call	0x1812	; 0x1812 <DIO_voidSetPinDirection>

		if(copy_u8ControlSens==FALLING_EDGE)
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	88 23       	and	r24, r24
    14c0:	79 f4       	brne	.+30     	; 0x14e0 <EXTINT_voidInit+0xc8>
		{

			CLR_BIT(MCUCR_REG,MCUCR_ISC10);
    14c2:	a5 e5       	ldi	r26, 0x55	; 85
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e5 e5       	ldi	r30, 0x55	; 85
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	8b 7f       	andi	r24, 0xFB	; 251
    14ce:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,MCUCR_ISC11);
    14d0:	a5 e5       	ldi	r26, 0x55	; 85
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e5 e5       	ldi	r30, 0x55	; 85
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	88 60       	ori	r24, 0x08	; 8
    14dc:	8c 93       	st	X, r24
    14de:	11 c0       	rjmp	.+34     	; 0x1502 <EXTINT_voidInit+0xea>

		}

		else if(copy_u8ControlSens==RISING_EDGE)
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	81 30       	cpi	r24, 0x01	; 1
    14e4:	71 f4       	brne	.+28     	; 0x1502 <EXTINT_voidInit+0xea>
		{
			SET_BIT(MCUCR_REG,MCUCR_ISC10);
    14e6:	a5 e5       	ldi	r26, 0x55	; 85
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e5 e5       	ldi	r30, 0x55	; 85
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	84 60       	ori	r24, 0x04	; 4
    14f2:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,MCUCR_ISC11);
    14f4:	a5 e5       	ldi	r26, 0x55	; 85
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e5 e5       	ldi	r30, 0x55	; 85
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	88 60       	ori	r24, 0x08	; 8
    1500:	8c 93       	st	X, r24
		}
		SET_BIT(GICR_REG,GICR_INT1);
    1502:	ab e5       	ldi	r26, 0x5B	; 91
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	eb e5       	ldi	r30, 0x5B	; 91
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	80 68       	ori	r24, 0x80	; 128
    150e:	8c 93       	st	X, r24
    1510:	21 c0       	rjmp	.+66     	; 0x1554 <EXTINT_voidInit+0x13c>

		break ;

	case EXT2_ID :

		DIO_voidSetPinDirection(PORTB_ID,PIN2,PIN_INPUT);
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	62 e0       	ldi	r22, 0x02	; 2
    1516:	40 e0       	ldi	r20, 0x00	; 0
    1518:	0e 94 09 0c 	call	0x1812	; 0x1812 <DIO_voidSetPinDirection>

		if(copy_u8ControlSens==FALLING_EDGE)
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	88 23       	and	r24, r24
    1520:	41 f4       	brne	.+16     	; 0x1532 <EXTINT_voidInit+0x11a>
		{
			CLR_BIT(MCUCSR_REG,MCUCSR_ISC2);
    1522:	a4 e5       	ldi	r26, 0x54	; 84
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e4 e5       	ldi	r30, 0x54	; 84
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	8f 7b       	andi	r24, 0xBF	; 191
    152e:	8c 93       	st	X, r24
    1530:	0a c0       	rjmp	.+20     	; 0x1546 <EXTINT_voidInit+0x12e>
		}

		else if(copy_u8ControlSens==RISING_EDGE)
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	39 f4       	brne	.+14     	; 0x1546 <EXTINT_voidInit+0x12e>
		{
			SET_BIT(MCUCSR_REG,MCUCSR_ISC2);
    1538:	a4 e5       	ldi	r26, 0x54	; 84
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e4 e5       	ldi	r30, 0x54	; 84
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	80 64       	ori	r24, 0x40	; 64
    1544:	8c 93       	st	X, r24
		}
		SET_BIT(GICR_REG,GICR_INT2);
    1546:	ab e5       	ldi	r26, 0x5B	; 91
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	eb e5       	ldi	r30, 0x5B	; 91
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	80 62       	ori	r24, 0x20	; 32
    1552:	8c 93       	st	X, r24

		break ;

	}
}
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	cf 91       	pop	r28
    155e:	df 91       	pop	r29
    1560:	08 95       	ret

00001562 <EXTINT_voidSetCallBack>:




void EXTINT_voidSetCallBack (  void (*ptr_ext)(void) ,u8 copy_u8ExtNum )
{
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	00 d0       	rcall	.+0      	; 0x1568 <EXTINT_voidSetCallBack+0x6>
    1568:	00 d0       	rcall	.+0      	; 0x156a <EXTINT_voidSetCallBack+0x8>
    156a:	0f 92       	push	r0
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	9a 83       	std	Y+2, r25	; 0x02
    1572:	89 83       	std	Y+1, r24	; 0x01
    1574:	6b 83       	std	Y+3, r22	; 0x03

	if(ptr_ext!=NULL)
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	9a 81       	ldd	r25, Y+2	; 0x02
    157a:	00 97       	sbiw	r24, 0x00	; 0
    157c:	39 f1       	breq	.+78     	; 0x15cc <EXTINT_voidSetCallBack+0x6a>
	{
		switch(copy_u8ExtNum)
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	3d 83       	std	Y+5, r19	; 0x05
    1586:	2c 83       	std	Y+4, r18	; 0x04
    1588:	8c 81       	ldd	r24, Y+4	; 0x04
    158a:	9d 81       	ldd	r25, Y+5	; 0x05
    158c:	81 30       	cpi	r24, 0x01	; 1
    158e:	91 05       	cpc	r25, r1
    1590:	81 f0       	breq	.+32     	; 0x15b2 <EXTINT_voidSetCallBack+0x50>
    1592:	2c 81       	ldd	r18, Y+4	; 0x04
    1594:	3d 81       	ldd	r19, Y+5	; 0x05
    1596:	22 30       	cpi	r18, 0x02	; 2
    1598:	31 05       	cpc	r19, r1
    159a:	91 f0       	breq	.+36     	; 0x15c0 <EXTINT_voidSetCallBack+0x5e>
    159c:	8c 81       	ldd	r24, Y+4	; 0x04
    159e:	9d 81       	ldd	r25, Y+5	; 0x05
    15a0:	00 97       	sbiw	r24, 0x00	; 0
    15a2:	a1 f4       	brne	.+40     	; 0x15cc <EXTINT_voidSetCallBack+0x6a>
		{
		case EXT0_ID:
			ptr_ArrCallBack[ 0 ]= ptr_ext;
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	9a 81       	ldd	r25, Y+2	; 0x02
    15a8:	90 93 99 01 	sts	0x0199, r25
    15ac:	80 93 98 01 	sts	0x0198, r24
    15b0:	0d c0       	rjmp	.+26     	; 0x15cc <EXTINT_voidSetCallBack+0x6a>
			break;
		case EXT1_ID:
			ptr_ArrCallBack[ 1 ]= ptr_ext;
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	9a 81       	ldd	r25, Y+2	; 0x02
    15b6:	90 93 9b 01 	sts	0x019B, r25
    15ba:	80 93 9a 01 	sts	0x019A, r24
    15be:	06 c0       	rjmp	.+12     	; 0x15cc <EXTINT_voidSetCallBack+0x6a>
			break;
		case EXT2_ID:
			ptr_ArrCallBack[ 2 ]= ptr_ext;
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	9a 81       	ldd	r25, Y+2	; 0x02
    15c4:	90 93 9d 01 	sts	0x019D, r25
    15c8:	80 93 9c 01 	sts	0x019C, r24
		}



	}
}
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <__vector_1>:



void __vector_1 () __attribute__ ((signal));
void __vector_1 ()
{
    15dc:	1f 92       	push	r1
    15de:	0f 92       	push	r0
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	0f 92       	push	r0
    15e4:	11 24       	eor	r1, r1
    15e6:	2f 93       	push	r18
    15e8:	3f 93       	push	r19
    15ea:	4f 93       	push	r20
    15ec:	5f 93       	push	r21
    15ee:	6f 93       	push	r22
    15f0:	7f 93       	push	r23
    15f2:	8f 93       	push	r24
    15f4:	9f 93       	push	r25
    15f6:	af 93       	push	r26
    15f8:	bf 93       	push	r27
    15fa:	ef 93       	push	r30
    15fc:	ff 93       	push	r31
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62

	if(ptr_ArrCallBack[0] !=NULL)
    1606:	80 91 98 01 	lds	r24, 0x0198
    160a:	90 91 99 01 	lds	r25, 0x0199
    160e:	00 97       	sbiw	r24, 0x00	; 0
    1610:	29 f0       	breq	.+10     	; 0x161c <__vector_1+0x40>
	{
		ptr_ArrCallBack[0]();
    1612:	e0 91 98 01 	lds	r30, 0x0198
    1616:	f0 91 99 01 	lds	r31, 0x0199
    161a:	09 95       	icall
	}



}
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	ff 91       	pop	r31
    1622:	ef 91       	pop	r30
    1624:	bf 91       	pop	r27
    1626:	af 91       	pop	r26
    1628:	9f 91       	pop	r25
    162a:	8f 91       	pop	r24
    162c:	7f 91       	pop	r23
    162e:	6f 91       	pop	r22
    1630:	5f 91       	pop	r21
    1632:	4f 91       	pop	r20
    1634:	3f 91       	pop	r19
    1636:	2f 91       	pop	r18
    1638:	0f 90       	pop	r0
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	0f 90       	pop	r0
    163e:	1f 90       	pop	r1
    1640:	18 95       	reti

00001642 <__vector_2>:

void __vector_2 () __attribute__ ((signal));
void __vector_2 ()
{
    1642:	1f 92       	push	r1
    1644:	0f 92       	push	r0
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	0f 92       	push	r0
    164a:	11 24       	eor	r1, r1
    164c:	2f 93       	push	r18
    164e:	3f 93       	push	r19
    1650:	4f 93       	push	r20
    1652:	5f 93       	push	r21
    1654:	6f 93       	push	r22
    1656:	7f 93       	push	r23
    1658:	8f 93       	push	r24
    165a:	9f 93       	push	r25
    165c:	af 93       	push	r26
    165e:	bf 93       	push	r27
    1660:	ef 93       	push	r30
    1662:	ff 93       	push	r31
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
	if(ptr_ArrCallBack[1] !=NULL)
    166c:	80 91 9a 01 	lds	r24, 0x019A
    1670:	90 91 9b 01 	lds	r25, 0x019B
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	29 f0       	breq	.+10     	; 0x1682 <__vector_2+0x40>
		{
		ptr_ArrCallBack[1]();
    1678:	e0 91 9a 01 	lds	r30, 0x019A
    167c:	f0 91 9b 01 	lds	r31, 0x019B
    1680:	09 95       	icall
		}


}
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	ff 91       	pop	r31
    1688:	ef 91       	pop	r30
    168a:	bf 91       	pop	r27
    168c:	af 91       	pop	r26
    168e:	9f 91       	pop	r25
    1690:	8f 91       	pop	r24
    1692:	7f 91       	pop	r23
    1694:	6f 91       	pop	r22
    1696:	5f 91       	pop	r21
    1698:	4f 91       	pop	r20
    169a:	3f 91       	pop	r19
    169c:	2f 91       	pop	r18
    169e:	0f 90       	pop	r0
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	0f 90       	pop	r0
    16a4:	1f 90       	pop	r1
    16a6:	18 95       	reti

000016a8 <__vector_3>:

void __vector_3 () __attribute__ ((signal));
void __vector_3 ()
{
    16a8:	1f 92       	push	r1
    16aa:	0f 92       	push	r0
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	0f 92       	push	r0
    16b0:	11 24       	eor	r1, r1
    16b2:	2f 93       	push	r18
    16b4:	3f 93       	push	r19
    16b6:	4f 93       	push	r20
    16b8:	5f 93       	push	r21
    16ba:	6f 93       	push	r22
    16bc:	7f 93       	push	r23
    16be:	8f 93       	push	r24
    16c0:	9f 93       	push	r25
    16c2:	af 93       	push	r26
    16c4:	bf 93       	push	r27
    16c6:	ef 93       	push	r30
    16c8:	ff 93       	push	r31
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
	if(ptr_ArrCallBack[2] !=NULL)
    16d2:	80 91 9c 01 	lds	r24, 0x019C
    16d6:	90 91 9d 01 	lds	r25, 0x019D
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	29 f0       	breq	.+10     	; 0x16e8 <__vector_3+0x40>
		{
		ptr_ArrCallBack[2]();
    16de:	e0 91 9c 01 	lds	r30, 0x019C
    16e2:	f0 91 9d 01 	lds	r31, 0x019D
    16e6:	09 95       	icall
		}


}
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	ff 91       	pop	r31
    16ee:	ef 91       	pop	r30
    16f0:	bf 91       	pop	r27
    16f2:	af 91       	pop	r26
    16f4:	9f 91       	pop	r25
    16f6:	8f 91       	pop	r24
    16f8:	7f 91       	pop	r23
    16fa:	6f 91       	pop	r22
    16fc:	5f 91       	pop	r21
    16fe:	4f 91       	pop	r20
    1700:	3f 91       	pop	r19
    1702:	2f 91       	pop	r18
    1704:	0f 90       	pop	r0
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	0f 90       	pop	r0
    170a:	1f 90       	pop	r1
    170c:	18 95       	reti

0000170e <DIO_voidSetPortDirection>:
#include"DIO_Interface.h"

/*****************************************************************************/

void DIO_voidSetPortDirection(u8 Copy_u8portID,u8 Copy_u8PortDir )
{
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	00 d0       	rcall	.+0      	; 0x1714 <DIO_voidSetPortDirection+0x6>
    1714:	00 d0       	rcall	.+0      	; 0x1716 <DIO_voidSetPortDirection+0x8>
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	89 83       	std	Y+1, r24	; 0x01
    171c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8portID)
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	3c 83       	std	Y+4, r19	; 0x04
    1726:	2b 83       	std	Y+3, r18	; 0x03
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	9c 81       	ldd	r25, Y+4	; 0x04
    172c:	81 30       	cpi	r24, 0x01	; 1
    172e:	91 05       	cpc	r25, r1
    1730:	d1 f0       	breq	.+52     	; 0x1766 <DIO_voidSetPortDirection+0x58>
    1732:	2b 81       	ldd	r18, Y+3	; 0x03
    1734:	3c 81       	ldd	r19, Y+4	; 0x04
    1736:	22 30       	cpi	r18, 0x02	; 2
    1738:	31 05       	cpc	r19, r1
    173a:	2c f4       	brge	.+10     	; 0x1746 <DIO_voidSetPortDirection+0x38>
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	9c 81       	ldd	r25, Y+4	; 0x04
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	61 f0       	breq	.+24     	; 0x175c <DIO_voidSetPortDirection+0x4e>
    1744:	1e c0       	rjmp	.+60     	; 0x1782 <DIO_voidSetPortDirection+0x74>
    1746:	2b 81       	ldd	r18, Y+3	; 0x03
    1748:	3c 81       	ldd	r19, Y+4	; 0x04
    174a:	22 30       	cpi	r18, 0x02	; 2
    174c:	31 05       	cpc	r19, r1
    174e:	81 f0       	breq	.+32     	; 0x1770 <DIO_voidSetPortDirection+0x62>
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	9c 81       	ldd	r25, Y+4	; 0x04
    1754:	83 30       	cpi	r24, 0x03	; 3
    1756:	91 05       	cpc	r25, r1
    1758:	81 f0       	breq	.+32     	; 0x177a <DIO_voidSetPortDirection+0x6c>
    175a:	13 c0       	rjmp	.+38     	; 0x1782 <DIO_voidSetPortDirection+0x74>
	{
	case PORTA_ID :   DDRA_REG= Copy_u8PortDir ; break ;
    175c:	ea e3       	ldi	r30, 0x3A	; 58
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	80 83       	st	Z, r24
    1764:	0e c0       	rjmp	.+28     	; 0x1782 <DIO_voidSetPortDirection+0x74>
	case PORTB_ID :   DDRB_REG= Copy_u8PortDir ; break ;
    1766:	e7 e3       	ldi	r30, 0x37	; 55
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	80 83       	st	Z, r24
    176e:	09 c0       	rjmp	.+18     	; 0x1782 <DIO_voidSetPortDirection+0x74>
	case PORTC_ID :   DDRC_REG= Copy_u8PortDir ; break ;
    1770:	e4 e3       	ldi	r30, 0x34	; 52
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	80 83       	st	Z, r24
    1778:	04 c0       	rjmp	.+8      	; 0x1782 <DIO_voidSetPortDirection+0x74>
	case PORTD_ID :   DDRD_REG= Copy_u8PortDir ; break ;
    177a:	e1 e3       	ldi	r30, 0x31	; 49
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	80 83       	st	Z, r24

	}
}
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	08 95       	ret

00001790 <DIO_voidSetPortValue>:
/*****************************************************************************/

void DIO_voidSetPortValue(u8 Copy_u8PortID,u8 Copy_u8PortVal )

{
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	00 d0       	rcall	.+0      	; 0x1796 <DIO_voidSetPortValue+0x6>
    1796:	00 d0       	rcall	.+0      	; 0x1798 <DIO_voidSetPortValue+0x8>
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    179c:	89 83       	std	Y+1, r24	; 0x01
    179e:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8PortID)
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	3c 83       	std	Y+4, r19	; 0x04
    17a8:	2b 83       	std	Y+3, r18	; 0x03
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	9c 81       	ldd	r25, Y+4	; 0x04
    17ae:	81 30       	cpi	r24, 0x01	; 1
    17b0:	91 05       	cpc	r25, r1
    17b2:	d1 f0       	breq	.+52     	; 0x17e8 <DIO_voidSetPortValue+0x58>
    17b4:	2b 81       	ldd	r18, Y+3	; 0x03
    17b6:	3c 81       	ldd	r19, Y+4	; 0x04
    17b8:	22 30       	cpi	r18, 0x02	; 2
    17ba:	31 05       	cpc	r19, r1
    17bc:	2c f4       	brge	.+10     	; 0x17c8 <DIO_voidSetPortValue+0x38>
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	9c 81       	ldd	r25, Y+4	; 0x04
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	61 f0       	breq	.+24     	; 0x17de <DIO_voidSetPortValue+0x4e>
    17c6:	1e c0       	rjmp	.+60     	; 0x1804 <DIO_voidSetPortValue+0x74>
    17c8:	2b 81       	ldd	r18, Y+3	; 0x03
    17ca:	3c 81       	ldd	r19, Y+4	; 0x04
    17cc:	22 30       	cpi	r18, 0x02	; 2
    17ce:	31 05       	cpc	r19, r1
    17d0:	81 f0       	breq	.+32     	; 0x17f2 <DIO_voidSetPortValue+0x62>
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	9c 81       	ldd	r25, Y+4	; 0x04
    17d6:	83 30       	cpi	r24, 0x03	; 3
    17d8:	91 05       	cpc	r25, r1
    17da:	81 f0       	breq	.+32     	; 0x17fc <DIO_voidSetPortValue+0x6c>
    17dc:	13 c0       	rjmp	.+38     	; 0x1804 <DIO_voidSetPortValue+0x74>
	{

	case PORTA_ID :   PORTA_REG= Copy_u8PortVal ; break ;
    17de:	eb e3       	ldi	r30, 0x3B	; 59
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	80 83       	st	Z, r24
    17e6:	0e c0       	rjmp	.+28     	; 0x1804 <DIO_voidSetPortValue+0x74>
	case PORTB_ID :   PORTB_REG= Copy_u8PortVal ; break ;
    17e8:	e8 e3       	ldi	r30, 0x38	; 56
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	80 83       	st	Z, r24
    17f0:	09 c0       	rjmp	.+18     	; 0x1804 <DIO_voidSetPortValue+0x74>
	case PORTC_ID :   PORTC_REG= Copy_u8PortVal ; break ;
    17f2:	e5 e3       	ldi	r30, 0x35	; 53
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	80 83       	st	Z, r24
    17fa:	04 c0       	rjmp	.+8      	; 0x1804 <DIO_voidSetPortValue+0x74>
	case PORTD_ID :   PORTD_REG= Copy_u8PortVal ; break ;
    17fc:	e2 e3       	ldi	r30, 0x32	; 50
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	80 83       	st	Z, r24

	}
}
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	08 95       	ret

00001812 <DIO_voidSetPinDirection>:

/*****************************************************************************/


void	DIO_voidSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinDir)
{
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	27 97       	sbiw	r28, 0x07	; 7
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	89 83       	std	Y+1, r24	; 0x01
    1828:	6a 83       	std	Y+2, r22	; 0x02
    182a:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinID>=PIN0 &&Copy_u8PinID<=PIN7)
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	88 30       	cpi	r24, 0x08	; 8
    1830:	08 f0       	brcs	.+2      	; 0x1834 <DIO_voidSetPinDirection+0x22>
    1832:	ea c0       	rjmp	.+468    	; 0x1a08 <DIO_voidSetPinDirection+0x1f6>
	{
		if(Copy_u8PinDir==PIN_OUTPUT)//Output
    1834:	8b 81       	ldd	r24, Y+3	; 0x03
    1836:	81 30       	cpi	r24, 0x01	; 1
    1838:	09 f0       	breq	.+2      	; 0x183c <DIO_voidSetPinDirection+0x2a>
    183a:	6f c0       	rjmp	.+222    	; 0x191a <DIO_voidSetPinDirection+0x108>
		{
			switch(Copy_u8PortID)
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	3f 83       	std	Y+7, r19	; 0x07
    1844:	2e 83       	std	Y+6, r18	; 0x06
    1846:	8e 81       	ldd	r24, Y+6	; 0x06
    1848:	9f 81       	ldd	r25, Y+7	; 0x07
    184a:	81 30       	cpi	r24, 0x01	; 1
    184c:	91 05       	cpc	r25, r1
    184e:	49 f1       	breq	.+82     	; 0x18a2 <DIO_voidSetPinDirection+0x90>
    1850:	2e 81       	ldd	r18, Y+6	; 0x06
    1852:	3f 81       	ldd	r19, Y+7	; 0x07
    1854:	22 30       	cpi	r18, 0x02	; 2
    1856:	31 05       	cpc	r19, r1
    1858:	2c f4       	brge	.+10     	; 0x1864 <DIO_voidSetPinDirection+0x52>
    185a:	8e 81       	ldd	r24, Y+6	; 0x06
    185c:	9f 81       	ldd	r25, Y+7	; 0x07
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	61 f0       	breq	.+24     	; 0x187a <DIO_voidSetPinDirection+0x68>
    1862:	d2 c0       	rjmp	.+420    	; 0x1a08 <DIO_voidSetPinDirection+0x1f6>
    1864:	2e 81       	ldd	r18, Y+6	; 0x06
    1866:	3f 81       	ldd	r19, Y+7	; 0x07
    1868:	22 30       	cpi	r18, 0x02	; 2
    186a:	31 05       	cpc	r19, r1
    186c:	71 f1       	breq	.+92     	; 0x18ca <DIO_voidSetPinDirection+0xb8>
    186e:	8e 81       	ldd	r24, Y+6	; 0x06
    1870:	9f 81       	ldd	r25, Y+7	; 0x07
    1872:	83 30       	cpi	r24, 0x03	; 3
    1874:	91 05       	cpc	r25, r1
    1876:	e9 f1       	breq	.+122    	; 0x18f2 <DIO_voidSetPinDirection+0xe0>
    1878:	c7 c0       	rjmp	.+398    	; 0x1a08 <DIO_voidSetPinDirection+0x1f6>
			{
			case PORTA_ID:    SET_BIT(DDRA_REG,Copy_u8PinID); break;
    187a:	aa e3       	ldi	r26, 0x3A	; 58
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	ea e3       	ldi	r30, 0x3A	; 58
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	48 2f       	mov	r20, r24
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	02 2e       	mov	r0, r18
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <DIO_voidSetPinDirection+0x86>
    1894:	88 0f       	add	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	0a 94       	dec	r0
    189a:	e2 f7       	brpl	.-8      	; 0x1894 <DIO_voidSetPinDirection+0x82>
    189c:	84 2b       	or	r24, r20
    189e:	8c 93       	st	X, r24
    18a0:	b3 c0       	rjmp	.+358    	; 0x1a08 <DIO_voidSetPinDirection+0x1f6>
			case PORTB_ID:    SET_BIT(DDRB_REG,Copy_u8PinID); break;
    18a2:	a7 e3       	ldi	r26, 0x37	; 55
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e7 e3       	ldi	r30, 0x37	; 55
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	48 2f       	mov	r20, r24
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	02 2e       	mov	r0, r18
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <DIO_voidSetPinDirection+0xae>
    18bc:	88 0f       	add	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	0a 94       	dec	r0
    18c2:	e2 f7       	brpl	.-8      	; 0x18bc <DIO_voidSetPinDirection+0xaa>
    18c4:	84 2b       	or	r24, r20
    18c6:	8c 93       	st	X, r24
    18c8:	9f c0       	rjmp	.+318    	; 0x1a08 <DIO_voidSetPinDirection+0x1f6>
			case PORTC_ID:    SET_BIT(DDRC_REG,Copy_u8PinID); break;
    18ca:	a4 e3       	ldi	r26, 0x34	; 52
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	e4 e3       	ldi	r30, 0x34	; 52
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	48 2f       	mov	r20, r24
    18d6:	8a 81       	ldd	r24, Y+2	; 0x02
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	02 2e       	mov	r0, r18
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <DIO_voidSetPinDirection+0xd6>
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	0a 94       	dec	r0
    18ea:	e2 f7       	brpl	.-8      	; 0x18e4 <DIO_voidSetPinDirection+0xd2>
    18ec:	84 2b       	or	r24, r20
    18ee:	8c 93       	st	X, r24
    18f0:	8b c0       	rjmp	.+278    	; 0x1a08 <DIO_voidSetPinDirection+0x1f6>
			case PORTD_ID:    SET_BIT(DDRD_REG,Copy_u8PinID); break;
    18f2:	a1 e3       	ldi	r26, 0x31	; 49
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e1 e3       	ldi	r30, 0x31	; 49
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	48 2f       	mov	r20, r24
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	02 2e       	mov	r0, r18
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <DIO_voidSetPinDirection+0xfe>
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	0a 94       	dec	r0
    1912:	e2 f7       	brpl	.-8      	; 0x190c <DIO_voidSetPinDirection+0xfa>
    1914:	84 2b       	or	r24, r20
    1916:	8c 93       	st	X, r24
    1918:	77 c0       	rjmp	.+238    	; 0x1a08 <DIO_voidSetPinDirection+0x1f6>

			default:   break;

			}
		}
		else if(Copy_u8PinDir==PIN_INPUT)//Input
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	88 23       	and	r24, r24
    191e:	09 f0       	breq	.+2      	; 0x1922 <DIO_voidSetPinDirection+0x110>
    1920:	73 c0       	rjmp	.+230    	; 0x1a08 <DIO_voidSetPinDirection+0x1f6>
		{
			switch(Copy_u8PortID)
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	28 2f       	mov	r18, r24
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	3d 83       	std	Y+5, r19	; 0x05
    192a:	2c 83       	std	Y+4, r18	; 0x04
    192c:	8c 81       	ldd	r24, Y+4	; 0x04
    192e:	9d 81       	ldd	r25, Y+5	; 0x05
    1930:	81 30       	cpi	r24, 0x01	; 1
    1932:	91 05       	cpc	r25, r1
    1934:	59 f1       	breq	.+86     	; 0x198c <DIO_voidSetPinDirection+0x17a>
    1936:	2c 81       	ldd	r18, Y+4	; 0x04
    1938:	3d 81       	ldd	r19, Y+5	; 0x05
    193a:	22 30       	cpi	r18, 0x02	; 2
    193c:	31 05       	cpc	r19, r1
    193e:	2c f4       	brge	.+10     	; 0x194a <DIO_voidSetPinDirection+0x138>
    1940:	8c 81       	ldd	r24, Y+4	; 0x04
    1942:	9d 81       	ldd	r25, Y+5	; 0x05
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	69 f0       	breq	.+26     	; 0x1962 <DIO_voidSetPinDirection+0x150>
    1948:	5f c0       	rjmp	.+190    	; 0x1a08 <DIO_voidSetPinDirection+0x1f6>
    194a:	2c 81       	ldd	r18, Y+4	; 0x04
    194c:	3d 81       	ldd	r19, Y+5	; 0x05
    194e:	22 30       	cpi	r18, 0x02	; 2
    1950:	31 05       	cpc	r19, r1
    1952:	89 f1       	breq	.+98     	; 0x19b6 <DIO_voidSetPinDirection+0x1a4>
    1954:	8c 81       	ldd	r24, Y+4	; 0x04
    1956:	9d 81       	ldd	r25, Y+5	; 0x05
    1958:	83 30       	cpi	r24, 0x03	; 3
    195a:	91 05       	cpc	r25, r1
    195c:	09 f4       	brne	.+2      	; 0x1960 <DIO_voidSetPinDirection+0x14e>
    195e:	40 c0       	rjmp	.+128    	; 0x19e0 <DIO_voidSetPinDirection+0x1ce>
    1960:	53 c0       	rjmp	.+166    	; 0x1a08 <DIO_voidSetPinDirection+0x1f6>
			{
			case PORTA_ID:   CLR_BIT(DDRA_REG,Copy_u8PinID); break;
    1962:	aa e3       	ldi	r26, 0x3A	; 58
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	ea e3       	ldi	r30, 0x3A	; 58
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	48 2f       	mov	r20, r24
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	02 2e       	mov	r0, r18
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <DIO_voidSetPinDirection+0x16e>
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	0a 94       	dec	r0
    1982:	e2 f7       	brpl	.-8      	; 0x197c <DIO_voidSetPinDirection+0x16a>
    1984:	80 95       	com	r24
    1986:	84 23       	and	r24, r20
    1988:	8c 93       	st	X, r24
    198a:	3e c0       	rjmp	.+124    	; 0x1a08 <DIO_voidSetPinDirection+0x1f6>
			case PORTB_ID:   CLR_BIT(DDRB_REG,Copy_u8PinID); break;
    198c:	a7 e3       	ldi	r26, 0x37	; 55
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e7 e3       	ldi	r30, 0x37	; 55
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	48 2f       	mov	r20, r24
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	02 2e       	mov	r0, r18
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <DIO_voidSetPinDirection+0x198>
    19a6:	88 0f       	add	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	0a 94       	dec	r0
    19ac:	e2 f7       	brpl	.-8      	; 0x19a6 <DIO_voidSetPinDirection+0x194>
    19ae:	80 95       	com	r24
    19b0:	84 23       	and	r24, r20
    19b2:	8c 93       	st	X, r24
    19b4:	29 c0       	rjmp	.+82     	; 0x1a08 <DIO_voidSetPinDirection+0x1f6>
			case PORTC_ID:   CLR_BIT(DDRC_REG,Copy_u8PinID); break;
    19b6:	a4 e3       	ldi	r26, 0x34	; 52
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e4 e3       	ldi	r30, 0x34	; 52
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	48 2f       	mov	r20, r24
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	02 2e       	mov	r0, r18
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <DIO_voidSetPinDirection+0x1c2>
    19d0:	88 0f       	add	r24, r24
    19d2:	99 1f       	adc	r25, r25
    19d4:	0a 94       	dec	r0
    19d6:	e2 f7       	brpl	.-8      	; 0x19d0 <DIO_voidSetPinDirection+0x1be>
    19d8:	80 95       	com	r24
    19da:	84 23       	and	r24, r20
    19dc:	8c 93       	st	X, r24
    19de:	14 c0       	rjmp	.+40     	; 0x1a08 <DIO_voidSetPinDirection+0x1f6>
			case PORTD_ID:   CLR_BIT(DDRD_REG,Copy_u8PinID); break;
    19e0:	a1 e3       	ldi	r26, 0x31	; 49
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e1 e3       	ldi	r30, 0x31	; 49
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	48 2f       	mov	r20, r24
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	02 2e       	mov	r0, r18
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <DIO_voidSetPinDirection+0x1ec>
    19fa:	88 0f       	add	r24, r24
    19fc:	99 1f       	adc	r25, r25
    19fe:	0a 94       	dec	r0
    1a00:	e2 f7       	brpl	.-8      	; 0x19fa <DIO_voidSetPinDirection+0x1e8>
    1a02:	80 95       	com	r24
    1a04:	84 23       	and	r24, r20
    1a06:	8c 93       	st	X, r24
			default:   break;
			}
		}
	}

}
    1a08:	27 96       	adiw	r28, 0x07	; 7
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	de bf       	out	0x3e, r29	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	cd bf       	out	0x3d, r28	; 61
    1a14:	cf 91       	pop	r28
    1a16:	df 91       	pop	r29
    1a18:	08 95       	ret

00001a1a <DIO_voidSetPinValue>:
/*****************************************************************************/
void    DIO_voidSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue)
{
    1a1a:	df 93       	push	r29
    1a1c:	cf 93       	push	r28
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
    1a22:	27 97       	sbiw	r28, 0x07	; 7
    1a24:	0f b6       	in	r0, 0x3f	; 63
    1a26:	f8 94       	cli
    1a28:	de bf       	out	0x3e, r29	; 62
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	cd bf       	out	0x3d, r28	; 61
    1a2e:	89 83       	std	Y+1, r24	; 0x01
    1a30:	6a 83       	std	Y+2, r22	; 0x02
    1a32:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinID>=PIN0&&Copy_u8PinID<=PIN7)
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	88 30       	cpi	r24, 0x08	; 8
    1a38:	08 f0       	brcs	.+2      	; 0x1a3c <DIO_voidSetPinValue+0x22>
    1a3a:	ea c0       	rjmp	.+468    	; 0x1c10 <DIO_voidSetPinValue+0x1f6>
	{
		if(Copy_u8PinValue==PIN_HIGH)//High
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	81 30       	cpi	r24, 0x01	; 1
    1a40:	09 f0       	breq	.+2      	; 0x1a44 <DIO_voidSetPinValue+0x2a>
    1a42:	6f c0       	rjmp	.+222    	; 0x1b22 <DIO_voidSetPinValue+0x108>
		{

			switch(Copy_u8PortID)
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	28 2f       	mov	r18, r24
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	3f 83       	std	Y+7, r19	; 0x07
    1a4c:	2e 83       	std	Y+6, r18	; 0x06
    1a4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a50:	9f 81       	ldd	r25, Y+7	; 0x07
    1a52:	81 30       	cpi	r24, 0x01	; 1
    1a54:	91 05       	cpc	r25, r1
    1a56:	49 f1       	breq	.+82     	; 0x1aaa <DIO_voidSetPinValue+0x90>
    1a58:	2e 81       	ldd	r18, Y+6	; 0x06
    1a5a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a5c:	22 30       	cpi	r18, 0x02	; 2
    1a5e:	31 05       	cpc	r19, r1
    1a60:	2c f4       	brge	.+10     	; 0x1a6c <DIO_voidSetPinValue+0x52>
    1a62:	8e 81       	ldd	r24, Y+6	; 0x06
    1a64:	9f 81       	ldd	r25, Y+7	; 0x07
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	61 f0       	breq	.+24     	; 0x1a82 <DIO_voidSetPinValue+0x68>
    1a6a:	d2 c0       	rjmp	.+420    	; 0x1c10 <DIO_voidSetPinValue+0x1f6>
    1a6c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a6e:	3f 81       	ldd	r19, Y+7	; 0x07
    1a70:	22 30       	cpi	r18, 0x02	; 2
    1a72:	31 05       	cpc	r19, r1
    1a74:	71 f1       	breq	.+92     	; 0x1ad2 <DIO_voidSetPinValue+0xb8>
    1a76:	8e 81       	ldd	r24, Y+6	; 0x06
    1a78:	9f 81       	ldd	r25, Y+7	; 0x07
    1a7a:	83 30       	cpi	r24, 0x03	; 3
    1a7c:	91 05       	cpc	r25, r1
    1a7e:	e9 f1       	breq	.+122    	; 0x1afa <DIO_voidSetPinValue+0xe0>
    1a80:	c7 c0       	rjmp	.+398    	; 0x1c10 <DIO_voidSetPinValue+0x1f6>
			{
			case PORTA_ID :    SET_BIT(PORTA_REG,Copy_u8PinID); break;
    1a82:	ab e3       	ldi	r26, 0x3B	; 59
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	eb e3       	ldi	r30, 0x3B	; 59
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	48 2f       	mov	r20, r24
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	02 2e       	mov	r0, r18
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <DIO_voidSetPinValue+0x86>
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	0a 94       	dec	r0
    1aa2:	e2 f7       	brpl	.-8      	; 0x1a9c <DIO_voidSetPinValue+0x82>
    1aa4:	84 2b       	or	r24, r20
    1aa6:	8c 93       	st	X, r24
    1aa8:	b3 c0       	rjmp	.+358    	; 0x1c10 <DIO_voidSetPinValue+0x1f6>
			case PORTB_ID :    SET_BIT(PORTB_REG,Copy_u8PinID); break;
    1aaa:	a8 e3       	ldi	r26, 0x38	; 56
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	e8 e3       	ldi	r30, 0x38	; 56
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	48 2f       	mov	r20, r24
    1ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	02 2e       	mov	r0, r18
    1ac2:	02 c0       	rjmp	.+4      	; 0x1ac8 <DIO_voidSetPinValue+0xae>
    1ac4:	88 0f       	add	r24, r24
    1ac6:	99 1f       	adc	r25, r25
    1ac8:	0a 94       	dec	r0
    1aca:	e2 f7       	brpl	.-8      	; 0x1ac4 <DIO_voidSetPinValue+0xaa>
    1acc:	84 2b       	or	r24, r20
    1ace:	8c 93       	st	X, r24
    1ad0:	9f c0       	rjmp	.+318    	; 0x1c10 <DIO_voidSetPinValue+0x1f6>
			case PORTC_ID :    SET_BIT(PORTC_REG,Copy_u8PinID); break;
    1ad2:	a5 e3       	ldi	r26, 0x35	; 53
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e5 e3       	ldi	r30, 0x35	; 53
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	48 2f       	mov	r20, r24
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	28 2f       	mov	r18, r24
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	02 2e       	mov	r0, r18
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <DIO_voidSetPinValue+0xd6>
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	0a 94       	dec	r0
    1af2:	e2 f7       	brpl	.-8      	; 0x1aec <DIO_voidSetPinValue+0xd2>
    1af4:	84 2b       	or	r24, r20
    1af6:	8c 93       	st	X, r24
    1af8:	8b c0       	rjmp	.+278    	; 0x1c10 <DIO_voidSetPinValue+0x1f6>
			case PORTD_ID :    SET_BIT(PORTD_REG,Copy_u8PinID); break;
    1afa:	a2 e3       	ldi	r26, 0x32	; 50
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e2 e3       	ldi	r30, 0x32	; 50
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	48 2f       	mov	r20, r24
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	02 2e       	mov	r0, r18
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <DIO_voidSetPinValue+0xfe>
    1b14:	88 0f       	add	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	0a 94       	dec	r0
    1b1a:	e2 f7       	brpl	.-8      	; 0x1b14 <DIO_voidSetPinValue+0xfa>
    1b1c:	84 2b       	or	r24, r20
    1b1e:	8c 93       	st	X, r24
    1b20:	77 c0       	rjmp	.+238    	; 0x1c10 <DIO_voidSetPinValue+0x1f6>

			}
		}
		else if(Copy_u8PinValue==PIN_LOW)//Low
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	88 23       	and	r24, r24
    1b26:	09 f0       	breq	.+2      	; 0x1b2a <DIO_voidSetPinValue+0x110>
    1b28:	73 c0       	rjmp	.+230    	; 0x1c10 <DIO_voidSetPinValue+0x1f6>
		{
			switch(Copy_u8PortID)
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	3d 83       	std	Y+5, r19	; 0x05
    1b32:	2c 83       	std	Y+4, r18	; 0x04
    1b34:	8c 81       	ldd	r24, Y+4	; 0x04
    1b36:	9d 81       	ldd	r25, Y+5	; 0x05
    1b38:	81 30       	cpi	r24, 0x01	; 1
    1b3a:	91 05       	cpc	r25, r1
    1b3c:	59 f1       	breq	.+86     	; 0x1b94 <DIO_voidSetPinValue+0x17a>
    1b3e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b40:	3d 81       	ldd	r19, Y+5	; 0x05
    1b42:	22 30       	cpi	r18, 0x02	; 2
    1b44:	31 05       	cpc	r19, r1
    1b46:	2c f4       	brge	.+10     	; 0x1b52 <DIO_voidSetPinValue+0x138>
    1b48:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	69 f0       	breq	.+26     	; 0x1b6a <DIO_voidSetPinValue+0x150>
    1b50:	5f c0       	rjmp	.+190    	; 0x1c10 <DIO_voidSetPinValue+0x1f6>
    1b52:	2c 81       	ldd	r18, Y+4	; 0x04
    1b54:	3d 81       	ldd	r19, Y+5	; 0x05
    1b56:	22 30       	cpi	r18, 0x02	; 2
    1b58:	31 05       	cpc	r19, r1
    1b5a:	89 f1       	breq	.+98     	; 0x1bbe <DIO_voidSetPinValue+0x1a4>
    1b5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b60:	83 30       	cpi	r24, 0x03	; 3
    1b62:	91 05       	cpc	r25, r1
    1b64:	09 f4       	brne	.+2      	; 0x1b68 <DIO_voidSetPinValue+0x14e>
    1b66:	40 c0       	rjmp	.+128    	; 0x1be8 <DIO_voidSetPinValue+0x1ce>
    1b68:	53 c0       	rjmp	.+166    	; 0x1c10 <DIO_voidSetPinValue+0x1f6>
			{
			case PORTA_ID : CLR_BIT(PORTA_REG,Copy_u8PinID); break ;
    1b6a:	ab e3       	ldi	r26, 0x3B	; 59
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	eb e3       	ldi	r30, 0x3B	; 59
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	48 2f       	mov	r20, r24
    1b76:	8a 81       	ldd	r24, Y+2	; 0x02
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	02 2e       	mov	r0, r18
    1b82:	02 c0       	rjmp	.+4      	; 0x1b88 <DIO_voidSetPinValue+0x16e>
    1b84:	88 0f       	add	r24, r24
    1b86:	99 1f       	adc	r25, r25
    1b88:	0a 94       	dec	r0
    1b8a:	e2 f7       	brpl	.-8      	; 0x1b84 <DIO_voidSetPinValue+0x16a>
    1b8c:	80 95       	com	r24
    1b8e:	84 23       	and	r24, r20
    1b90:	8c 93       	st	X, r24
    1b92:	3e c0       	rjmp	.+124    	; 0x1c10 <DIO_voidSetPinValue+0x1f6>
			case PORTB_ID : CLR_BIT(PORTB_REG,Copy_u8PinID); break ;
    1b94:	a8 e3       	ldi	r26, 0x38	; 56
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	e8 e3       	ldi	r30, 0x38	; 56
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	48 2f       	mov	r20, r24
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	02 2e       	mov	r0, r18
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <DIO_voidSetPinValue+0x198>
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	0a 94       	dec	r0
    1bb4:	e2 f7       	brpl	.-8      	; 0x1bae <DIO_voidSetPinValue+0x194>
    1bb6:	80 95       	com	r24
    1bb8:	84 23       	and	r24, r20
    1bba:	8c 93       	st	X, r24
    1bbc:	29 c0       	rjmp	.+82     	; 0x1c10 <DIO_voidSetPinValue+0x1f6>
			case PORTC_ID : CLR_BIT(PORTC_REG,Copy_u8PinID) ;break ;
    1bbe:	a5 e3       	ldi	r26, 0x35	; 53
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e5 e3       	ldi	r30, 0x35	; 53
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	48 2f       	mov	r20, r24
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	02 2e       	mov	r0, r18
    1bd6:	02 c0       	rjmp	.+4      	; 0x1bdc <DIO_voidSetPinValue+0x1c2>
    1bd8:	88 0f       	add	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	0a 94       	dec	r0
    1bde:	e2 f7       	brpl	.-8      	; 0x1bd8 <DIO_voidSetPinValue+0x1be>
    1be0:	80 95       	com	r24
    1be2:	84 23       	and	r24, r20
    1be4:	8c 93       	st	X, r24
    1be6:	14 c0       	rjmp	.+40     	; 0x1c10 <DIO_voidSetPinValue+0x1f6>
			case PORTD_ID : CLR_BIT(PORTD_REG,Copy_u8PinID) ;break ;
    1be8:	a2 e3       	ldi	r26, 0x32	; 50
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	e2 e3       	ldi	r30, 0x32	; 50
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	48 2f       	mov	r20, r24
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	02 2e       	mov	r0, r18
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <DIO_voidSetPinValue+0x1ec>
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	0a 94       	dec	r0
    1c08:	e2 f7       	brpl	.-8      	; 0x1c02 <DIO_voidSetPinValue+0x1e8>
    1c0a:	80 95       	com	r24
    1c0c:	84 23       	and	r24, r20
    1c0e:	8c 93       	st	X, r24

			}
		}
	}
}
    1c10:	27 96       	adiw	r28, 0x07	; 7
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	f8 94       	cli
    1c16:	de bf       	out	0x3e, r29	; 62
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	cd bf       	out	0x3d, r28	; 61
    1c1c:	cf 91       	pop	r28
    1c1e:	df 91       	pop	r29
    1c20:	08 95       	ret

00001c22 <DIO_u8GetBitValue>:
/*****************************************************************************/
u8 DIO_u8GetBitValue(u8 copy_u8PortID , u8 Copy_u8PinID )
{
    1c22:	df 93       	push	r29
    1c24:	cf 93       	push	r28
    1c26:	00 d0       	rcall	.+0      	; 0x1c28 <DIO_u8GetBitValue+0x6>
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <DIO_u8GetBitValue+0x8>
    1c2a:	0f 92       	push	r0
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	8a 83       	std	Y+2, r24	; 0x02
    1c32:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_PinVal ;

	if( Copy_u8PinID>=PIN0 && Copy_u8PinID<=PIN7 )
    1c34:	8b 81       	ldd	r24, Y+3	; 0x03
    1c36:	88 30       	cpi	r24, 0x08	; 8
    1c38:	08 f0       	brcs	.+2      	; 0x1c3c <DIO_u8GetBitValue+0x1a>
    1c3a:	67 c0       	rjmp	.+206    	; 0x1d0a <DIO_u8GetBitValue+0xe8>
	{
		switch(copy_u8PortID)
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	28 2f       	mov	r18, r24
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	3d 83       	std	Y+5, r19	; 0x05
    1c44:	2c 83       	std	Y+4, r18	; 0x04
    1c46:	4c 81       	ldd	r20, Y+4	; 0x04
    1c48:	5d 81       	ldd	r21, Y+5	; 0x05
    1c4a:	41 30       	cpi	r20, 0x01	; 1
    1c4c:	51 05       	cpc	r21, r1
    1c4e:	41 f1       	breq	.+80     	; 0x1ca0 <DIO_u8GetBitValue+0x7e>
    1c50:	8c 81       	ldd	r24, Y+4	; 0x04
    1c52:	9d 81       	ldd	r25, Y+5	; 0x05
    1c54:	82 30       	cpi	r24, 0x02	; 2
    1c56:	91 05       	cpc	r25, r1
    1c58:	34 f4       	brge	.+12     	; 0x1c66 <DIO_u8GetBitValue+0x44>
    1c5a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c5c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c5e:	21 15       	cp	r18, r1
    1c60:	31 05       	cpc	r19, r1
    1c62:	61 f0       	breq	.+24     	; 0x1c7c <DIO_u8GetBitValue+0x5a>
    1c64:	52 c0       	rjmp	.+164    	; 0x1d0a <DIO_u8GetBitValue+0xe8>
    1c66:	4c 81       	ldd	r20, Y+4	; 0x04
    1c68:	5d 81       	ldd	r21, Y+5	; 0x05
    1c6a:	42 30       	cpi	r20, 0x02	; 2
    1c6c:	51 05       	cpc	r21, r1
    1c6e:	51 f1       	breq	.+84     	; 0x1cc4 <DIO_u8GetBitValue+0xa2>
    1c70:	8c 81       	ldd	r24, Y+4	; 0x04
    1c72:	9d 81       	ldd	r25, Y+5	; 0x05
    1c74:	83 30       	cpi	r24, 0x03	; 3
    1c76:	91 05       	cpc	r25, r1
    1c78:	b9 f1       	breq	.+110    	; 0x1ce8 <DIO_u8GetBitValue+0xc6>
    1c7a:	47 c0       	rjmp	.+142    	; 0x1d0a <DIO_u8GetBitValue+0xe8>
		{

		case PORTA_ID : Local_PinVal=GET_BIT(PINA_REG,Copy_u8PinID)   ; break ;
    1c7c:	e9 e3       	ldi	r30, 0x39	; 57
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	8b 81       	ldd	r24, Y+3	; 0x03
    1c88:	88 2f       	mov	r24, r24
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	a9 01       	movw	r20, r18
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <DIO_u8GetBitValue+0x72>
    1c90:	55 95       	asr	r21
    1c92:	47 95       	ror	r20
    1c94:	8a 95       	dec	r24
    1c96:	e2 f7       	brpl	.-8      	; 0x1c90 <DIO_u8GetBitValue+0x6e>
    1c98:	ca 01       	movw	r24, r20
    1c9a:	81 70       	andi	r24, 0x01	; 1
    1c9c:	89 83       	std	Y+1, r24	; 0x01
    1c9e:	35 c0       	rjmp	.+106    	; 0x1d0a <DIO_u8GetBitValue+0xe8>
		case PORTB_ID : Local_PinVal=GET_BIT(PINB_REG,Copy_u8PinID)   ; break ;
    1ca0:	e6 e3       	ldi	r30, 0x36	; 54
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	88 2f       	mov	r24, r24
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	a9 01       	movw	r20, r18
    1cb2:	02 c0       	rjmp	.+4      	; 0x1cb8 <DIO_u8GetBitValue+0x96>
    1cb4:	55 95       	asr	r21
    1cb6:	47 95       	ror	r20
    1cb8:	8a 95       	dec	r24
    1cba:	e2 f7       	brpl	.-8      	; 0x1cb4 <DIO_u8GetBitValue+0x92>
    1cbc:	ca 01       	movw	r24, r20
    1cbe:	81 70       	andi	r24, 0x01	; 1
    1cc0:	89 83       	std	Y+1, r24	; 0x01
    1cc2:	23 c0       	rjmp	.+70     	; 0x1d0a <DIO_u8GetBitValue+0xe8>
		case PORTC_ID : Local_PinVal=GET_BIT(PINC_REG,Copy_u8PinID)   ; break ;
    1cc4:	e3 e3       	ldi	r30, 0x33	; 51
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	88 2f       	mov	r24, r24
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	a9 01       	movw	r20, r18
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <DIO_u8GetBitValue+0xba>
    1cd8:	55 95       	asr	r21
    1cda:	47 95       	ror	r20
    1cdc:	8a 95       	dec	r24
    1cde:	e2 f7       	brpl	.-8      	; 0x1cd8 <DIO_u8GetBitValue+0xb6>
    1ce0:	ca 01       	movw	r24, r20
    1ce2:	81 70       	andi	r24, 0x01	; 1
    1ce4:	89 83       	std	Y+1, r24	; 0x01
    1ce6:	11 c0       	rjmp	.+34     	; 0x1d0a <DIO_u8GetBitValue+0xe8>
		case PORTD_ID : Local_PinVal=GET_BIT(PIND_REG,Copy_u8PinID)   ; break ;
    1ce8:	e0 e3       	ldi	r30, 0x30	; 48
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	28 2f       	mov	r18, r24
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	88 2f       	mov	r24, r24
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	a9 01       	movw	r20, r18
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <DIO_u8GetBitValue+0xde>
    1cfc:	55 95       	asr	r21
    1cfe:	47 95       	ror	r20
    1d00:	8a 95       	dec	r24
    1d02:	e2 f7       	brpl	.-8      	; 0x1cfc <DIO_u8GetBitValue+0xda>
    1d04:	ca 01       	movw	r24, r20
    1d06:	81 70       	andi	r24, 0x01	; 1
    1d08:	89 83       	std	Y+1, r24	; 0x01

		}
	}

	return Local_PinVal ;
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01

}
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	08 95       	ret

00001d1c <DIO_voidToggelPin>:
}
 */

/*****************************************************************************/
void DIO_voidToggelPin(u8 copy_u8PortID,u8 Copy_u8PinID)
{
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	00 d0       	rcall	.+0      	; 0x1d22 <DIO_voidToggelPin+0x6>
    1d22:	00 d0       	rcall	.+0      	; 0x1d24 <DIO_voidToggelPin+0x8>
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	89 83       	std	Y+1, r24	; 0x01
    1d2a:	6a 83       	std	Y+2, r22	; 0x02

	if( Copy_u8PinID>=PIN0 && Copy_u8PinID<=PIN7)
    1d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2e:	88 30       	cpi	r24, 0x08	; 8
    1d30:	08 f0       	brcs	.+2      	; 0x1d34 <DIO_voidToggelPin+0x18>
    1d32:	6e c0       	rjmp	.+220    	; 0x1e10 <DIO_voidToggelPin+0xf4>
	{

		switch (copy_u8PortID)
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	28 2f       	mov	r18, r24
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	3c 83       	std	Y+4, r19	; 0x04
    1d3c:	2b 83       	std	Y+3, r18	; 0x03
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	9c 81       	ldd	r25, Y+4	; 0x04
    1d42:	81 30       	cpi	r24, 0x01	; 1
    1d44:	91 05       	cpc	r25, r1
    1d46:	49 f1       	breq	.+82     	; 0x1d9a <DIO_voidToggelPin+0x7e>
    1d48:	2b 81       	ldd	r18, Y+3	; 0x03
    1d4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d4c:	22 30       	cpi	r18, 0x02	; 2
    1d4e:	31 05       	cpc	r19, r1
    1d50:	2c f4       	brge	.+10     	; 0x1d5c <DIO_voidToggelPin+0x40>
    1d52:	8b 81       	ldd	r24, Y+3	; 0x03
    1d54:	9c 81       	ldd	r25, Y+4	; 0x04
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	61 f0       	breq	.+24     	; 0x1d72 <DIO_voidToggelPin+0x56>
    1d5a:	5a c0       	rjmp	.+180    	; 0x1e10 <DIO_voidToggelPin+0xf4>
    1d5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d60:	22 30       	cpi	r18, 0x02	; 2
    1d62:	31 05       	cpc	r19, r1
    1d64:	71 f1       	breq	.+92     	; 0x1dc2 <DIO_voidToggelPin+0xa6>
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6a:	83 30       	cpi	r24, 0x03	; 3
    1d6c:	91 05       	cpc	r25, r1
    1d6e:	e9 f1       	breq	.+122    	; 0x1dea <DIO_voidToggelPin+0xce>
    1d70:	4f c0       	rjmp	.+158    	; 0x1e10 <DIO_voidToggelPin+0xf4>
		{
		case PORTA_ID :  TOG_BIT(PORTA_REG,Copy_u8PinID) ; break ;
    1d72:	ab e3       	ldi	r26, 0x3B	; 59
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	eb e3       	ldi	r30, 0x3B	; 59
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	48 2f       	mov	r20, r24
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	02 2e       	mov	r0, r18
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <DIO_voidToggelPin+0x74>
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	0a 94       	dec	r0
    1d92:	e2 f7       	brpl	.-8      	; 0x1d8c <DIO_voidToggelPin+0x70>
    1d94:	84 27       	eor	r24, r20
    1d96:	8c 93       	st	X, r24
    1d98:	3b c0       	rjmp	.+118    	; 0x1e10 <DIO_voidToggelPin+0xf4>
		case PORTB_ID :  TOG_BIT(PORTB_REG,Copy_u8PinID) ; break ;
    1d9a:	a8 e3       	ldi	r26, 0x38	; 56
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e8 e3       	ldi	r30, 0x38	; 56
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	48 2f       	mov	r20, r24
    1da6:	8a 81       	ldd	r24, Y+2	; 0x02
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	02 2e       	mov	r0, r18
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <DIO_voidToggelPin+0x9c>
    1db4:	88 0f       	add	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	0a 94       	dec	r0
    1dba:	e2 f7       	brpl	.-8      	; 0x1db4 <DIO_voidToggelPin+0x98>
    1dbc:	84 27       	eor	r24, r20
    1dbe:	8c 93       	st	X, r24
    1dc0:	27 c0       	rjmp	.+78     	; 0x1e10 <DIO_voidToggelPin+0xf4>
		case PORTC_ID :  TOG_BIT(PORTC_REG,Copy_u8PinID) ; break ;
    1dc2:	a5 e3       	ldi	r26, 0x35	; 53
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e5 e3       	ldi	r30, 0x35	; 53
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	48 2f       	mov	r20, r24
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	02 2e       	mov	r0, r18
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <DIO_voidToggelPin+0xc4>
    1ddc:	88 0f       	add	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	0a 94       	dec	r0
    1de2:	e2 f7       	brpl	.-8      	; 0x1ddc <DIO_voidToggelPin+0xc0>
    1de4:	84 27       	eor	r24, r20
    1de6:	8c 93       	st	X, r24
    1de8:	13 c0       	rjmp	.+38     	; 0x1e10 <DIO_voidToggelPin+0xf4>
		case PORTD_ID :  TOG_BIT(PORTD_REG,Copy_u8PinID) ; break ;
    1dea:	a2 e3       	ldi	r26, 0x32	; 50
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	e2 e3       	ldi	r30, 0x32	; 50
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	48 2f       	mov	r20, r24
    1df6:	8a 81       	ldd	r24, Y+2	; 0x02
    1df8:	28 2f       	mov	r18, r24
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	02 2e       	mov	r0, r18
    1e02:	02 c0       	rjmp	.+4      	; 0x1e08 <DIO_voidToggelPin+0xec>
    1e04:	88 0f       	add	r24, r24
    1e06:	99 1f       	adc	r25, r25
    1e08:	0a 94       	dec	r0
    1e0a:	e2 f7       	brpl	.-8      	; 0x1e04 <DIO_voidToggelPin+0xe8>
    1e0c:	84 27       	eor	r24, r20
    1e0e:	8c 93       	st	X, r24
		}

	}
}
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	cf 91       	pop	r28
    1e1a:	df 91       	pop	r29
    1e1c:	08 95       	ret

00001e1e <Timer0OvFunc>:
f32 Ttick = 0.004, TONTime=0; //ms
u32 dis = 0;
u32 OvCounter=0, TimeOn=0;
u8 edge = 0;

void Timer0OvFunc(){
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
	OvCounter++;
    1e26:	80 91 a6 01 	lds	r24, 0x01A6
    1e2a:	90 91 a7 01 	lds	r25, 0x01A7
    1e2e:	a0 91 a8 01 	lds	r26, 0x01A8
    1e32:	b0 91 a9 01 	lds	r27, 0x01A9
    1e36:	01 96       	adiw	r24, 0x01	; 1
    1e38:	a1 1d       	adc	r26, r1
    1e3a:	b1 1d       	adc	r27, r1
    1e3c:	80 93 a6 01 	sts	0x01A6, r24
    1e40:	90 93 a7 01 	sts	0x01A7, r25
    1e44:	a0 93 a8 01 	sts	0x01A8, r26
    1e48:	b0 93 a9 01 	sts	0x01A9, r27
}
    1e4c:	cf 91       	pop	r28
    1e4e:	df 91       	pop	r29
    1e50:	08 95       	ret

00001e52 <UltrasonicFunc>:

void UltrasonicFunc(){
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
	//rising
	if (edge==RISING_EDGE){
    1e5a:	80 91 ae 01 	lds	r24, 0x01AE
    1e5e:	81 30       	cpi	r24, 0x01	; 1
    1e60:	a1 f4       	brne	.+40     	; 0x1e8a <UltrasonicFunc+0x38>

		TIMER0_VoidSetPreload(0);
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	0e 94 9e 09 	call	0x133c	; 0x133c <TIMER0_VoidSetPreload>

		TIMER0_VoidStart();
    1e68:	0e 94 91 09 	call	0x1322	; 0x1322 <TIMER0_VoidStart>

		OvCounter = 0;
    1e6c:	10 92 a6 01 	sts	0x01A6, r1
    1e70:	10 92 a7 01 	sts	0x01A7, r1
    1e74:	10 92 a8 01 	sts	0x01A8, r1
    1e78:	10 92 a9 01 	sts	0x01A9, r1

		EXTINT_voidInit(EXT0_ID,FALLING_EDGE);
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	60 e0       	ldi	r22, 0x00	; 0
    1e80:	0e 94 0c 0a 	call	0x1418	; 0x1418 <EXTINT_voidInit>

		edge = FALLING_EDGE;
    1e84:	10 92 ae 01 	sts	0x01AE, r1
    1e88:	70 c0       	rjmp	.+224    	; 0x1f6a <UltrasonicFunc+0x118>

	}
	//falling
	else if (edge==FALLING_EDGE){
    1e8a:	80 91 ae 01 	lds	r24, 0x01AE
    1e8e:	88 23       	and	r24, r24
    1e90:	09 f0       	breq	.+2      	; 0x1e94 <UltrasonicFunc+0x42>
    1e92:	6b c0       	rjmp	.+214    	; 0x1f6a <UltrasonicFunc+0x118>
		TIMER0_VoidStop();
    1e94:	0e 94 85 09 	call	0x130a	; 0x130a <TIMER0_VoidStop>

		TimeOn = TIMER0_VoidVal();
    1e98:	0e 94 ac 09 	call	0x1358	; 0x1358 <TIMER0_VoidVal>
    1e9c:	88 2f       	mov	r24, r24
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	a0 e0       	ldi	r26, 0x00	; 0
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	80 93 aa 01 	sts	0x01AA, r24
    1ea8:	90 93 ab 01 	sts	0x01AB, r25
    1eac:	a0 93 ac 01 	sts	0x01AC, r26
    1eb0:	b0 93 ad 01 	sts	0x01AD, r27

		TONTime = Ttick*(TimeOn+(256*OvCounter));
    1eb4:	80 91 a6 01 	lds	r24, 0x01A6
    1eb8:	90 91 a7 01 	lds	r25, 0x01A7
    1ebc:	a0 91 a8 01 	lds	r26, 0x01A8
    1ec0:	b0 91 a9 01 	lds	r27, 0x01A9
    1ec4:	22 27       	eor	r18, r18
    1ec6:	38 2f       	mov	r19, r24
    1ec8:	49 2f       	mov	r20, r25
    1eca:	5a 2f       	mov	r21, r26
    1ecc:	80 91 aa 01 	lds	r24, 0x01AA
    1ed0:	90 91 ab 01 	lds	r25, 0x01AB
    1ed4:	a0 91 ac 01 	lds	r26, 0x01AC
    1ed8:	b0 91 ad 01 	lds	r27, 0x01AD
    1edc:	82 0f       	add	r24, r18
    1ede:	93 1f       	adc	r25, r19
    1ee0:	a4 1f       	adc	r26, r20
    1ee2:	b5 1f       	adc	r27, r21
    1ee4:	bc 01       	movw	r22, r24
    1ee6:	cd 01       	movw	r24, r26
    1ee8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	20 91 6e 01 	lds	r18, 0x016E
    1ef4:	30 91 6f 01 	lds	r19, 0x016F
    1ef8:	40 91 70 01 	lds	r20, 0x0170
    1efc:	50 91 71 01 	lds	r21, 0x0171
    1f00:	bc 01       	movw	r22, r24
    1f02:	cd 01       	movw	r24, r26
    1f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	80 93 9e 01 	sts	0x019E, r24
    1f10:	90 93 9f 01 	sts	0x019F, r25
    1f14:	a0 93 a0 01 	sts	0x01A0, r26
    1f18:	b0 93 a1 01 	sts	0x01A1, r27
		dis = 17 * TONTime;
    1f1c:	80 91 9e 01 	lds	r24, 0x019E
    1f20:	90 91 9f 01 	lds	r25, 0x019F
    1f24:	a0 91 a0 01 	lds	r26, 0x01A0
    1f28:	b0 91 a1 01 	lds	r27, 0x01A1
    1f2c:	bc 01       	movw	r22, r24
    1f2e:	cd 01       	movw	r24, r26
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	48 e8       	ldi	r20, 0x88	; 136
    1f36:	51 e4       	ldi	r21, 0x41	; 65
    1f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	bc 01       	movw	r22, r24
    1f42:	cd 01       	movw	r24, r26
    1f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	80 93 a2 01 	sts	0x01A2, r24
    1f50:	90 93 a3 01 	sts	0x01A3, r25
    1f54:	a0 93 a4 01 	sts	0x01A4, r26
    1f58:	b0 93 a5 01 	sts	0x01A5, r27

		EXTINT_voidInit(EXT0_ID,RISING_EDGE);
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	61 e0       	ldi	r22, 0x01	; 1
    1f60:	0e 94 0c 0a 	call	0x1418	; 0x1418 <EXTINT_voidInit>

		edge = RISING_EDGE;
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	80 93 ae 01 	sts	0x01AE, r24
	}
}
    1f6a:	cf 91       	pop	r28
    1f6c:	df 91       	pop	r29
    1f6e:	08 95       	ret

00001f70 <ULTRASONIC_voidInit>:

void ULTRASONIC_voidInit(){
    1f70:	df 93       	push	r29
    1f72:	cf 93       	push	r28
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
	//TR
	DIO_voidSetPinDirection(TRIGGER_PORT,TRIGGER_PIN,PIN_OUTPUT);
    1f78:	83 e0       	ldi	r24, 0x03	; 3
    1f7a:	63 e0       	ldi	r22, 0x03	; 3
    1f7c:	41 e0       	ldi	r20, 0x01	; 1
    1f7e:	0e 94 09 0c 	call	0x1812	; 0x1812 <DIO_voidSetPinDirection>

	//ECHO
	DIO_voidSetPinDirection(ECHO_PORT,ECHO_PIN,PIN_INPUT);
    1f82:	83 e0       	ldi	r24, 0x03	; 3
    1f84:	62 e0       	ldi	r22, 0x02	; 2
    1f86:	40 e0       	ldi	r20, 0x00	; 0
    1f88:	0e 94 09 0c 	call	0x1812	; 0x1812 <DIO_voidSetPinDirection>

	//Timer0
	TIMER0_VoidInit();
    1f8c:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <TIMER0_VoidInit>

	TIMER0_voidSetCallBack(Timer0OvFunc);
    1f90:	8f e0       	ldi	r24, 0x0F	; 15
    1f92:	9f e0       	ldi	r25, 0x0F	; 15
    1f94:	0e 94 29 09 	call	0x1252	; 0x1252 <TIMER0_voidSetCallBack>

	//External Interrupt
	EXTINT_voidInit(EXT0_ID,RISING_EDGE);
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	61 e0       	ldi	r22, 0x01	; 1
    1f9c:	0e 94 0c 0a 	call	0x1418	; 0x1418 <EXTINT_voidInit>

	EXTINT_voidSetCallBack(UltrasonicFunc,EXT0_ID);
    1fa0:	89 e2       	ldi	r24, 0x29	; 41
    1fa2:	9f e0       	ldi	r25, 0x0F	; 15
    1fa4:	60 e0       	ldi	r22, 0x00	; 0
    1fa6:	0e 94 b1 0a 	call	0x1562	; 0x1562 <EXTINT_voidSetCallBack>
}
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	08 95       	ret

00001fb0 <ULTRASONIC_VoidStart>:

void ULTRASONIC_VoidStart(){
    1fb0:	df 93       	push	r29
    1fb2:	cf 93       	push	r28
    1fb4:	cd b7       	in	r28, 0x3d	; 61
    1fb6:	de b7       	in	r29, 0x3e	; 62
    1fb8:	68 97       	sbiw	r28, 0x18	; 24
    1fba:	0f b6       	in	r0, 0x3f	; 63
    1fbc:	f8 94       	cli
    1fbe:	de bf       	out	0x3e, r29	; 62
    1fc0:	0f be       	out	0x3f, r0	; 63
    1fc2:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(TRIGGER_PORT,TRIGGER_PIN,PIN_HIGH);
    1fc4:	83 e0       	ldi	r24, 0x03	; 3
    1fc6:	63 e0       	ldi	r22, 0x03	; 3
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	a0 e3       	ldi	r26, 0x30	; 48
    1fd4:	b1 e4       	ldi	r27, 0x41	; 65
    1fd6:	8d 8b       	std	Y+21, r24	; 0x15
    1fd8:	9e 8b       	std	Y+22, r25	; 0x16
    1fda:	af 8b       	std	Y+23, r26	; 0x17
    1fdc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fde:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe6:	2b ea       	ldi	r18, 0xAB	; 171
    1fe8:	3a ea       	ldi	r19, 0xAA	; 170
    1fea:	4a ea       	ldi	r20, 0xAA	; 170
    1fec:	50 e4       	ldi	r21, 0x40	; 64
    1fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	89 8b       	std	Y+17, r24	; 0x11
    1ff8:	9a 8b       	std	Y+18, r25	; 0x12
    1ffa:	ab 8b       	std	Y+19, r26	; 0x13
    1ffc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1ffe:	69 89       	ldd	r22, Y+17	; 0x11
    2000:	7a 89       	ldd	r23, Y+18	; 0x12
    2002:	8b 89       	ldd	r24, Y+19	; 0x13
    2004:	9c 89       	ldd	r25, Y+20	; 0x14
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	40 e8       	ldi	r20, 0x80	; 128
    200c:	5f e3       	ldi	r21, 0x3F	; 63
    200e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2012:	88 23       	and	r24, r24
    2014:	1c f4       	brge	.+6      	; 0x201c <ULTRASONIC_VoidStart+0x6c>
		__ticks = 1;
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	88 8b       	std	Y+16, r24	; 0x10
    201a:	91 c0       	rjmp	.+290    	; 0x213e <ULTRASONIC_VoidStart+0x18e>
	else if (__tmp > 255)
    201c:	69 89       	ldd	r22, Y+17	; 0x11
    201e:	7a 89       	ldd	r23, Y+18	; 0x12
    2020:	8b 89       	ldd	r24, Y+19	; 0x13
    2022:	9c 89       	ldd	r25, Y+20	; 0x14
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	4f e7       	ldi	r20, 0x7F	; 127
    202a:	53 e4       	ldi	r21, 0x43	; 67
    202c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2030:	18 16       	cp	r1, r24
    2032:	0c f0       	brlt	.+2      	; 0x2036 <ULTRASONIC_VoidStart+0x86>
    2034:	7b c0       	rjmp	.+246    	; 0x212c <ULTRASONIC_VoidStart+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2036:	6d 89       	ldd	r22, Y+21	; 0x15
    2038:	7e 89       	ldd	r23, Y+22	; 0x16
    203a:	8f 89       	ldd	r24, Y+23	; 0x17
    203c:	98 8d       	ldd	r25, Y+24	; 0x18
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	4a e7       	ldi	r20, 0x7A	; 122
    2044:	54 e4       	ldi	r21, 0x44	; 68
    2046:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	8c 87       	std	Y+12, r24	; 0x0c
    2050:	9d 87       	std	Y+13, r25	; 0x0d
    2052:	ae 87       	std	Y+14, r26	; 0x0e
    2054:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2056:	6c 85       	ldd	r22, Y+12	; 0x0c
    2058:	7d 85       	ldd	r23, Y+13	; 0x0d
    205a:	8e 85       	ldd	r24, Y+14	; 0x0e
    205c:	9f 85       	ldd	r25, Y+15	; 0x0f
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	4a e7       	ldi	r20, 0x7A	; 122
    2064:	55 e4       	ldi	r21, 0x45	; 69
    2066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	88 87       	std	Y+8, r24	; 0x08
    2070:	99 87       	std	Y+9, r25	; 0x09
    2072:	aa 87       	std	Y+10, r26	; 0x0a
    2074:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2076:	68 85       	ldd	r22, Y+8	; 0x08
    2078:	79 85       	ldd	r23, Y+9	; 0x09
    207a:	8a 85       	ldd	r24, Y+10	; 0x0a
    207c:	9b 85       	ldd	r25, Y+11	; 0x0b
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e8       	ldi	r20, 0x80	; 128
    2084:	5f e3       	ldi	r21, 0x3F	; 63
    2086:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    208a:	88 23       	and	r24, r24
    208c:	2c f4       	brge	.+10     	; 0x2098 <ULTRASONIC_VoidStart+0xe8>
		__ticks = 1;
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	9f 83       	std	Y+7, r25	; 0x07
    2094:	8e 83       	std	Y+6, r24	; 0x06
    2096:	3f c0       	rjmp	.+126    	; 0x2116 <ULTRASONIC_VoidStart+0x166>
	else if (__tmp > 65535)
    2098:	68 85       	ldd	r22, Y+8	; 0x08
    209a:	79 85       	ldd	r23, Y+9	; 0x09
    209c:	8a 85       	ldd	r24, Y+10	; 0x0a
    209e:	9b 85       	ldd	r25, Y+11	; 0x0b
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	3f ef       	ldi	r19, 0xFF	; 255
    20a4:	4f e7       	ldi	r20, 0x7F	; 127
    20a6:	57 e4       	ldi	r21, 0x47	; 71
    20a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20ac:	18 16       	cp	r1, r24
    20ae:	4c f5       	brge	.+82     	; 0x2102 <ULTRASONIC_VoidStart+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b0:	6c 85       	ldd	r22, Y+12	; 0x0c
    20b2:	7d 85       	ldd	r23, Y+13	; 0x0d
    20b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    20b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	40 e2       	ldi	r20, 0x20	; 32
    20be:	51 e4       	ldi	r21, 0x41	; 65
    20c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	bc 01       	movw	r22, r24
    20ca:	cd 01       	movw	r24, r26
    20cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	9f 83       	std	Y+7, r25	; 0x07
    20d6:	8e 83       	std	Y+6, r24	; 0x06
    20d8:	0f c0       	rjmp	.+30     	; 0x20f8 <ULTRASONIC_VoidStart+0x148>
    20da:	80 e9       	ldi	r24, 0x90	; 144
    20dc:	91 e0       	ldi	r25, 0x01	; 1
    20de:	9d 83       	std	Y+5, r25	; 0x05
    20e0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20e2:	8c 81       	ldd	r24, Y+4	; 0x04
    20e4:	9d 81       	ldd	r25, Y+5	; 0x05
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	f1 f7       	brne	.-4      	; 0x20e6 <ULTRASONIC_VoidStart+0x136>
    20ea:	9d 83       	std	Y+5, r25	; 0x05
    20ec:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ee:	8e 81       	ldd	r24, Y+6	; 0x06
    20f0:	9f 81       	ldd	r25, Y+7	; 0x07
    20f2:	01 97       	sbiw	r24, 0x01	; 1
    20f4:	9f 83       	std	Y+7, r25	; 0x07
    20f6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f8:	8e 81       	ldd	r24, Y+6	; 0x06
    20fa:	9f 81       	ldd	r25, Y+7	; 0x07
    20fc:	00 97       	sbiw	r24, 0x00	; 0
    20fe:	69 f7       	brne	.-38     	; 0x20da <ULTRASONIC_VoidStart+0x12a>
    2100:	24 c0       	rjmp	.+72     	; 0x214a <ULTRASONIC_VoidStart+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2102:	68 85       	ldd	r22, Y+8	; 0x08
    2104:	79 85       	ldd	r23, Y+9	; 0x09
    2106:	8a 85       	ldd	r24, Y+10	; 0x0a
    2108:	9b 85       	ldd	r25, Y+11	; 0x0b
    210a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	9f 83       	std	Y+7, r25	; 0x07
    2114:	8e 83       	std	Y+6, r24	; 0x06
    2116:	8e 81       	ldd	r24, Y+6	; 0x06
    2118:	9f 81       	ldd	r25, Y+7	; 0x07
    211a:	9b 83       	std	Y+3, r25	; 0x03
    211c:	8a 83       	std	Y+2, r24	; 0x02
    211e:	8a 81       	ldd	r24, Y+2	; 0x02
    2120:	9b 81       	ldd	r25, Y+3	; 0x03
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <ULTRASONIC_VoidStart+0x172>
    2126:	9b 83       	std	Y+3, r25	; 0x03
    2128:	8a 83       	std	Y+2, r24	; 0x02
    212a:	0f c0       	rjmp	.+30     	; 0x214a <ULTRASONIC_VoidStart+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    212c:	69 89       	ldd	r22, Y+17	; 0x11
    212e:	7a 89       	ldd	r23, Y+18	; 0x12
    2130:	8b 89       	ldd	r24, Y+19	; 0x13
    2132:	9c 89       	ldd	r25, Y+20	; 0x14
    2134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	88 8b       	std	Y+16, r24	; 0x10
    213e:	88 89       	ldd	r24, Y+16	; 0x10
    2140:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	8a 95       	dec	r24
    2146:	f1 f7       	brne	.-4      	; 0x2144 <ULTRASONIC_VoidStart+0x194>
    2148:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(11);

	DIO_voidSetPinValue(TRIGGER_PORT,TRIGGER_PIN,PIN_LOW);
    214a:	83 e0       	ldi	r24, 0x03	; 3
    214c:	63 e0       	ldi	r22, 0x03	; 3
    214e:	40 e0       	ldi	r20, 0x00	; 0
    2150:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>
}
    2154:	68 96       	adiw	r28, 0x18	; 24
    2156:	0f b6       	in	r0, 0x3f	; 63
    2158:	f8 94       	cli
    215a:	de bf       	out	0x3e, r29	; 62
    215c:	0f be       	out	0x3f, r0	; 63
    215e:	cd bf       	out	0x3d, r28	; 61
    2160:	cf 91       	pop	r28
    2162:	df 91       	pop	r29
    2164:	08 95       	ret

00002166 <ULTRASONIC_VoidVal>:

u32 ULTRASONIC_VoidVal(){
    2166:	df 93       	push	r29
    2168:	cf 93       	push	r28
    216a:	cd b7       	in	r28, 0x3d	; 61
    216c:	de b7       	in	r29, 0x3e	; 62

	return dis;
    216e:	80 91 a2 01 	lds	r24, 0x01A2
    2172:	90 91 a3 01 	lds	r25, 0x01A3
    2176:	a0 91 a4 01 	lds	r26, 0x01A4
    217a:	b0 91 a5 01 	lds	r27, 0x01A5
}
    217e:	bc 01       	movw	r22, r24
    2180:	cd 01       	movw	r24, r26
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	08 95       	ret

00002188 <SERVO_voidInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTIONS BODY   */
/*--------------------------------------------------------------------------------------------*/

void SERVO_voidInit(){
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
	TIMER1_voidPwm1Init();
    2190:	0e 94 8d 08 	call	0x111a	; 0x111a <TIMER1_voidPwm1Init>
	TIMER1_voidPwm1SetTop(4999);
    2194:	67 e8       	ldi	r22, 0x87	; 135
    2196:	73 e1       	ldi	r23, 0x13	; 19
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	0e 94 c3 08 	call	0x1186	; 0x1186 <TIMER1_voidPwm1SetTop>
	TIMER1_voidPwm1Start();
    21a0:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <TIMER1_voidPwm1Start>
}
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	08 95       	ret

000021aa <Servo_voidSetAngle>:

void Servo_voidSetAngle(s8 copy_s8angle){
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	00 d0       	rcall	.+0      	; 0x21b0 <Servo_voidSetAngle+0x6>
    21b0:	0f 92       	push	r0
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
    21b6:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_s8angle){
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
    21ba:	28 2f       	mov	r18, r24
    21bc:	33 27       	eor	r19, r19
    21be:	27 fd       	sbrc	r18, 7
    21c0:	30 95       	com	r19
    21c2:	3b 83       	std	Y+3, r19	; 0x03
    21c4:	2a 83       	std	Y+2, r18	; 0x02
    21c6:	8a 81       	ldd	r24, Y+2	; 0x02
    21c8:	9b 81       	ldd	r25, Y+3	; 0x03
    21ca:	00 97       	sbiw	r24, 0x00	; 0
    21cc:	99 f0       	breq	.+38     	; 0x21f4 <Servo_voidSetAngle+0x4a>
    21ce:	2a 81       	ldd	r18, Y+2	; 0x02
    21d0:	3b 81       	ldd	r19, Y+3	; 0x03
    21d2:	2a 35       	cpi	r18, 0x5A	; 90
    21d4:	31 05       	cpc	r19, r1
    21d6:	39 f0       	breq	.+14     	; 0x21e6 <Servo_voidSetAngle+0x3c>
    21d8:	8a 81       	ldd	r24, Y+2	; 0x02
    21da:	9b 81       	ldd	r25, Y+3	; 0x03
    21dc:	2f ef       	ldi	r18, 0xFF	; 255
    21de:	86 3a       	cpi	r24, 0xA6	; 166
    21e0:	92 07       	cpc	r25, r18
    21e2:	79 f0       	breq	.+30     	; 0x2202 <Servo_voidSetAngle+0x58>
    21e4:	14 c0       	rjmp	.+40     	; 0x220e <Servo_voidSetAngle+0x64>
	case 90:
		TIMER1_voidPwm1SetDutyCycle(499);
    21e6:	63 ef       	ldi	r22, 0xF3	; 243
    21e8:	71 e0       	ldi	r23, 0x01	; 1
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	0e 94 da 08 	call	0x11b4	; 0x11b4 <TIMER1_voidPwm1SetDutyCycle>
    21f2:	0d c0       	rjmp	.+26     	; 0x220e <Servo_voidSetAngle+0x64>
		break;
	case 0:
		TIMER1_voidPwm1SetDutyCycle(374);
    21f4:	66 e7       	ldi	r22, 0x76	; 118
    21f6:	71 e0       	ldi	r23, 0x01	; 1
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	0e 94 da 08 	call	0x11b4	; 0x11b4 <TIMER1_voidPwm1SetDutyCycle>
    2200:	06 c0       	rjmp	.+12     	; 0x220e <Servo_voidSetAngle+0x64>
		break;
	case -90:
		TIMER1_voidPwm1SetDutyCycle(249);
    2202:	69 ef       	ldi	r22, 0xF9	; 249
    2204:	70 e0       	ldi	r23, 0x00	; 0
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	0e 94 da 08 	call	0x11b4	; 0x11b4 <TIMER1_voidPwm1SetDutyCycle>
		break;
	default:
		break;
	}

}
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	cf 91       	pop	r28
    2216:	df 91       	pop	r29
    2218:	08 95       	ret

0000221a <MTR_voidInit>:
#include "MTR_Interface.h"

/***********************************************************************************/


void MTR_voidInit(){
    221a:	df 93       	push	r29
    221c:	cf 93       	push	r28
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62

	//Control Pin
	DIO_voidSetPinDirection(CONTROL_PORT,CONTROL_PIN,PIN_OUTPUT);
    2222:	83 e0       	ldi	r24, 0x03	; 3
    2224:	67 e0       	ldi	r22, 0x07	; 7
    2226:	41 e0       	ldi	r20, 0x01	; 1
    2228:	0e 94 09 0c 	call	0x1812	; 0x1812 <DIO_voidSetPinDirection>

	//Direction Pins
	DIO_voidSetPinDirection(DIRECTION_PORT1,DIRECTION_PIN1,PIN_OUTPUT);
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	64 e0       	ldi	r22, 0x04	; 4
    2230:	41 e0       	ldi	r20, 0x01	; 1
    2232:	0e 94 09 0c 	call	0x1812	; 0x1812 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(DIRECTION_PORT2,DIRECTION_PIN2,PIN_OUTPUT);
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	65 e0       	ldi	r22, 0x05	; 5
    223a:	41 e0       	ldi	r20, 0x01	; 1
    223c:	0e 94 09 0c 	call	0x1812	; 0x1812 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(DIRECTION_PORT3,DIRECTION_PIN3,PIN_OUTPUT);
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	66 e0       	ldi	r22, 0x06	; 6
    2244:	41 e0       	ldi	r20, 0x01	; 1
    2246:	0e 94 09 0c 	call	0x1812	; 0x1812 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(DIRECTION_PORT4,DIRECTION_PIN4,PIN_OUTPUT);
    224a:	80 e0       	ldi	r24, 0x00	; 0
    224c:	67 e0       	ldi	r22, 0x07	; 7
    224e:	41 e0       	ldi	r20, 0x01	; 1
    2250:	0e 94 09 0c 	call	0x1812	; 0x1812 <DIO_voidSetPinDirection>

	//Initialize timer2
	TIMER2_VoidInit();
    2254:	0e 94 1a 08 	call	0x1034	; 0x1034 <TIMER2_VoidInit>

	//Make sure the car does not move when the car is started
	MTR_voidMovement(MTR_STOP,0);
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	60 e0       	ldi	r22, 0x00	; 0
    225c:	0e 94 35 11 	call	0x226a	; 0x226a <MTR_voidMovement>

	//Enable Global interrupt enable
	GIE_Enable();
    2260:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <GIE_Enable>

}
    2264:	cf 91       	pop	r28
    2266:	df 91       	pop	r29
    2268:	08 95       	ret

0000226a <MTR_voidMovement>:

void MTR_voidMovement(u8 state, u8 speed){
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	00 d0       	rcall	.+0      	; 0x2270 <MTR_voidMovement+0x6>
    2270:	00 d0       	rcall	.+0      	; 0x2272 <MTR_voidMovement+0x8>
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62
    2276:	89 83       	std	Y+1, r24	; 0x01
    2278:	6a 83       	std	Y+2, r22	; 0x02
	switch(state){
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	28 2f       	mov	r18, r24
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	3c 83       	std	Y+4, r19	; 0x04
    2282:	2b 83       	std	Y+3, r18	; 0x03
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	9c 81       	ldd	r25, Y+4	; 0x04
    2288:	82 30       	cpi	r24, 0x02	; 2
    228a:	91 05       	cpc	r25, r1
    228c:	09 f4       	brne	.+2      	; 0x2290 <MTR_voidMovement+0x26>
    228e:	50 c0       	rjmp	.+160    	; 0x2330 <MTR_voidMovement+0xc6>
    2290:	2b 81       	ldd	r18, Y+3	; 0x03
    2292:	3c 81       	ldd	r19, Y+4	; 0x04
    2294:	23 30       	cpi	r18, 0x03	; 3
    2296:	31 05       	cpc	r19, r1
    2298:	54 f4       	brge	.+20     	; 0x22ae <MTR_voidMovement+0x44>
    229a:	8b 81       	ldd	r24, Y+3	; 0x03
    229c:	9c 81       	ldd	r25, Y+4	; 0x04
    229e:	00 97       	sbiw	r24, 0x00	; 0
    22a0:	99 f0       	breq	.+38     	; 0x22c8 <MTR_voidMovement+0x5e>
    22a2:	2b 81       	ldd	r18, Y+3	; 0x03
    22a4:	3c 81       	ldd	r19, Y+4	; 0x04
    22a6:	21 30       	cpi	r18, 0x01	; 1
    22a8:	31 05       	cpc	r19, r1
    22aa:	29 f1       	breq	.+74     	; 0x22f6 <MTR_voidMovement+0x8c>
    22ac:	97 c0       	rjmp	.+302    	; 0x23dc <MTR_voidMovement+0x172>
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	9c 81       	ldd	r25, Y+4	; 0x04
    22b2:	83 30       	cpi	r24, 0x03	; 3
    22b4:	91 05       	cpc	r25, r1
    22b6:	09 f4       	brne	.+2      	; 0x22ba <MTR_voidMovement+0x50>
    22b8:	58 c0       	rjmp	.+176    	; 0x236a <MTR_voidMovement+0x100>
    22ba:	2b 81       	ldd	r18, Y+3	; 0x03
    22bc:	3c 81       	ldd	r19, Y+4	; 0x04
    22be:	24 30       	cpi	r18, 0x04	; 4
    22c0:	31 05       	cpc	r19, r1
    22c2:	09 f4       	brne	.+2      	; 0x22c6 <MTR_voidMovement+0x5c>
    22c4:	6f c0       	rjmp	.+222    	; 0x23a4 <MTR_voidMovement+0x13a>
    22c6:	8a c0       	rjmp	.+276    	; 0x23dc <MTR_voidMovement+0x172>

	case MTR_STOP:
		//Control Pin
		TIMER2_VoidStop();
    22c8:	0e 94 31 08 	call	0x1062	; 0x1062 <TIMER2_VoidStop>

		//Direction Pins
		DIO_voidSetPinValue(DIRECTION_PORT1,DIRECTION_PIN1,PIN_LOW);
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	64 e0       	ldi	r22, 0x04	; 4
    22d0:	40 e0       	ldi	r20, 0x00	; 0
    22d2:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT2,DIRECTION_PIN2,PIN_LOW);
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	65 e0       	ldi	r22, 0x05	; 5
    22da:	40 e0       	ldi	r20, 0x00	; 0
    22dc:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT3,DIRECTION_PIN3,PIN_LOW);
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	66 e0       	ldi	r22, 0x06	; 6
    22e4:	40 e0       	ldi	r20, 0x00	; 0
    22e6:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT4,DIRECTION_PIN4,PIN_LOW);
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	67 e0       	ldi	r22, 0x07	; 7
    22ee:	40 e0       	ldi	r20, 0x00	; 0
    22f0:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>
    22f4:	73 c0       	rjmp	.+230    	; 0x23dc <MTR_voidMovement+0x172>
		break;

	case MTR_FORWARD:
		//Control Pin
		TIMER2_VoidSetPreload(0);
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	0e 94 4a 08 	call	0x1094	; 0x1094 <TIMER2_VoidSetPreload>
		TIMER2_VoidSetPWMCompareMatch(speed);
    22fc:	8a 81       	ldd	r24, Y+2	; 0x02
    22fe:	0e 94 62 08 	call	0x10c4	; 0x10c4 <TIMER2_VoidSetPWMCompareMatch>
		TIMER2_VoidStart();
    2302:	0e 94 3d 08 	call	0x107a	; 0x107a <TIMER2_VoidStart>

		//Direction Pins
		DIO_voidSetPinValue(DIRECTION_PORT1,DIRECTION_PIN1,PIN_HIGH);
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	64 e0       	ldi	r22, 0x04	; 4
    230a:	41 e0       	ldi	r20, 0x01	; 1
    230c:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT2,DIRECTION_PIN2,PIN_LOW);
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	65 e0       	ldi	r22, 0x05	; 5
    2314:	40 e0       	ldi	r20, 0x00	; 0
    2316:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT3,DIRECTION_PIN3,PIN_HIGH);
    231a:	80 e0       	ldi	r24, 0x00	; 0
    231c:	66 e0       	ldi	r22, 0x06	; 6
    231e:	41 e0       	ldi	r20, 0x01	; 1
    2320:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT4,DIRECTION_PIN4,PIN_LOW);
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	67 e0       	ldi	r22, 0x07	; 7
    2328:	40 e0       	ldi	r20, 0x00	; 0
    232a:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>
    232e:	56 c0       	rjmp	.+172    	; 0x23dc <MTR_voidMovement+0x172>
		break;

	case MTR_REVERSE:
		//Control Pin
		TIMER2_VoidSetPreload(0);
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	0e 94 4a 08 	call	0x1094	; 0x1094 <TIMER2_VoidSetPreload>
		TIMER2_VoidSetPWMCompareMatch(speed);
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	0e 94 62 08 	call	0x10c4	; 0x10c4 <TIMER2_VoidSetPWMCompareMatch>
		TIMER2_VoidStart();
    233c:	0e 94 3d 08 	call	0x107a	; 0x107a <TIMER2_VoidStart>

		//Direction Pins
		DIO_voidSetPinValue(DIRECTION_PORT1,DIRECTION_PIN1,PIN_LOW);
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	64 e0       	ldi	r22, 0x04	; 4
    2344:	40 e0       	ldi	r20, 0x00	; 0
    2346:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT2,DIRECTION_PIN2,PIN_HIGH);
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	65 e0       	ldi	r22, 0x05	; 5
    234e:	41 e0       	ldi	r20, 0x01	; 1
    2350:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT3,DIRECTION_PIN3,PIN_LOW);
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	66 e0       	ldi	r22, 0x06	; 6
    2358:	40 e0       	ldi	r20, 0x00	; 0
    235a:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT4,DIRECTION_PIN4,PIN_HIGH);
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	67 e0       	ldi	r22, 0x07	; 7
    2362:	41 e0       	ldi	r20, 0x01	; 1
    2364:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>
    2368:	39 c0       	rjmp	.+114    	; 0x23dc <MTR_voidMovement+0x172>
		break;

	case MTR_RIGHT:
		//Control Pin
		TIMER2_VoidSetPreload(0);
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	0e 94 4a 08 	call	0x1094	; 0x1094 <TIMER2_VoidSetPreload>
		TIMER2_VoidSetPWMCompareMatch(speed);
    2370:	8a 81       	ldd	r24, Y+2	; 0x02
    2372:	0e 94 62 08 	call	0x10c4	; 0x10c4 <TIMER2_VoidSetPWMCompareMatch>
		TIMER2_VoidStart();
    2376:	0e 94 3d 08 	call	0x107a	; 0x107a <TIMER2_VoidStart>

		//Direction Pins
		DIO_voidSetPinValue(DIRECTION_PORT1,DIRECTION_PIN1,PIN_HIGH);
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	64 e0       	ldi	r22, 0x04	; 4
    237e:	41 e0       	ldi	r20, 0x01	; 1
    2380:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT2,DIRECTION_PIN2,PIN_LOW);
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	65 e0       	ldi	r22, 0x05	; 5
    2388:	40 e0       	ldi	r20, 0x00	; 0
    238a:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT3,DIRECTION_PIN3,PIN_LOW);
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	66 e0       	ldi	r22, 0x06	; 6
    2392:	40 e0       	ldi	r20, 0x00	; 0
    2394:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT4,DIRECTION_PIN4,PIN_LOW);
    2398:	80 e0       	ldi	r24, 0x00	; 0
    239a:	67 e0       	ldi	r22, 0x07	; 7
    239c:	40 e0       	ldi	r20, 0x00	; 0
    239e:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>
    23a2:	1c c0       	rjmp	.+56     	; 0x23dc <MTR_voidMovement+0x172>
		break;

	case MTR_LEFT:
		//Control Pin
		TIMER2_VoidSetPreload(0);
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	0e 94 4a 08 	call	0x1094	; 0x1094 <TIMER2_VoidSetPreload>
		TIMER2_VoidSetPWMCompareMatch(speed);
    23aa:	8a 81       	ldd	r24, Y+2	; 0x02
    23ac:	0e 94 62 08 	call	0x10c4	; 0x10c4 <TIMER2_VoidSetPWMCompareMatch>
		TIMER2_VoidStart();
    23b0:	0e 94 3d 08 	call	0x107a	; 0x107a <TIMER2_VoidStart>

		//Direction Pins
		DIO_voidSetPinValue(DIRECTION_PORT1,DIRECTION_PIN1,PIN_LOW);
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	64 e0       	ldi	r22, 0x04	; 4
    23b8:	40 e0       	ldi	r20, 0x00	; 0
    23ba:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT2,DIRECTION_PIN2,PIN_LOW);
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	65 e0       	ldi	r22, 0x05	; 5
    23c2:	40 e0       	ldi	r20, 0x00	; 0
    23c4:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT3,DIRECTION_PIN3,PIN_HIGH);
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	66 e0       	ldi	r22, 0x06	; 6
    23cc:	41 e0       	ldi	r20, 0x01	; 1
    23ce:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>

		DIO_voidSetPinValue(DIRECTION_PORT4,DIRECTION_PIN4,PIN_LOW);
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	67 e0       	ldi	r22, 0x07	; 7
    23d6:	40 e0       	ldi	r20, 0x00	; 0
    23d8:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>
		break;

	default:
		break;
	}
}
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	0f 90       	pop	r0
    23e4:	cf 91       	pop	r28
    23e6:	df 91       	pop	r29
    23e8:	08 95       	ret

000023ea <LCD_voidInit>:



/***********************************************************************************/
void LCD_voidInit(void)
{
    23ea:	df 93       	push	r29
    23ec:	cf 93       	push	r28
    23ee:	cd b7       	in	r28, 0x3d	; 61
    23f0:	de b7       	in	r29, 0x3e	; 62
    23f2:	2e 97       	sbiw	r28, 0x0e	; 14
    23f4:	0f b6       	in	r0, 0x3f	; 63
    23f6:	f8 94       	cli
    23f8:	de bf       	out	0x3e, r29	; 62
    23fa:	0f be       	out	0x3f, r0	; 63
    23fc:	cd bf       	out	0x3d, r28	; 61
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	a0 ef       	ldi	r26, 0xF0	; 240
    2404:	b1 e4       	ldi	r27, 0x41	; 65
    2406:	8b 87       	std	Y+11, r24	; 0x0b
    2408:	9c 87       	std	Y+12, r25	; 0x0c
    240a:	ad 87       	std	Y+13, r26	; 0x0d
    240c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2410:	7c 85       	ldd	r23, Y+12	; 0x0c
    2412:	8d 85       	ldd	r24, Y+13	; 0x0d
    2414:	9e 85       	ldd	r25, Y+14	; 0x0e
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	4a e7       	ldi	r20, 0x7A	; 122
    241c:	55 e4       	ldi	r21, 0x45	; 69
    241e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	8f 83       	std	Y+7, r24	; 0x07
    2428:	98 87       	std	Y+8, r25	; 0x08
    242a:	a9 87       	std	Y+9, r26	; 0x09
    242c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    242e:	6f 81       	ldd	r22, Y+7	; 0x07
    2430:	78 85       	ldd	r23, Y+8	; 0x08
    2432:	89 85       	ldd	r24, Y+9	; 0x09
    2434:	9a 85       	ldd	r25, Y+10	; 0x0a
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	40 e8       	ldi	r20, 0x80	; 128
    243c:	5f e3       	ldi	r21, 0x3F	; 63
    243e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2442:	88 23       	and	r24, r24
    2444:	2c f4       	brge	.+10     	; 0x2450 <LCD_voidInit+0x66>
		__ticks = 1;
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	9e 83       	std	Y+6, r25	; 0x06
    244c:	8d 83       	std	Y+5, r24	; 0x05
    244e:	3f c0       	rjmp	.+126    	; 0x24ce <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    2450:	6f 81       	ldd	r22, Y+7	; 0x07
    2452:	78 85       	ldd	r23, Y+8	; 0x08
    2454:	89 85       	ldd	r24, Y+9	; 0x09
    2456:	9a 85       	ldd	r25, Y+10	; 0x0a
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	3f ef       	ldi	r19, 0xFF	; 255
    245c:	4f e7       	ldi	r20, 0x7F	; 127
    245e:	57 e4       	ldi	r21, 0x47	; 71
    2460:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2464:	18 16       	cp	r1, r24
    2466:	4c f5       	brge	.+82     	; 0x24ba <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2468:	6b 85       	ldd	r22, Y+11	; 0x0b
    246a:	7c 85       	ldd	r23, Y+12	; 0x0c
    246c:	8d 85       	ldd	r24, Y+13	; 0x0d
    246e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e2       	ldi	r20, 0x20	; 32
    2476:	51 e4       	ldi	r21, 0x41	; 65
    2478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	bc 01       	movw	r22, r24
    2482:	cd 01       	movw	r24, r26
    2484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	9e 83       	std	Y+6, r25	; 0x06
    248e:	8d 83       	std	Y+5, r24	; 0x05
    2490:	0f c0       	rjmp	.+30     	; 0x24b0 <LCD_voidInit+0xc6>
    2492:	80 e9       	ldi	r24, 0x90	; 144
    2494:	91 e0       	ldi	r25, 0x01	; 1
    2496:	9c 83       	std	Y+4, r25	; 0x04
    2498:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    249a:	8b 81       	ldd	r24, Y+3	; 0x03
    249c:	9c 81       	ldd	r25, Y+4	; 0x04
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	f1 f7       	brne	.-4      	; 0x249e <LCD_voidInit+0xb4>
    24a2:	9c 83       	std	Y+4, r25	; 0x04
    24a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a6:	8d 81       	ldd	r24, Y+5	; 0x05
    24a8:	9e 81       	ldd	r25, Y+6	; 0x06
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	9e 83       	std	Y+6, r25	; 0x06
    24ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b0:	8d 81       	ldd	r24, Y+5	; 0x05
    24b2:	9e 81       	ldd	r25, Y+6	; 0x06
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	69 f7       	brne	.-38     	; 0x2492 <LCD_voidInit+0xa8>
    24b8:	14 c0       	rjmp	.+40     	; 0x24e2 <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ba:	6f 81       	ldd	r22, Y+7	; 0x07
    24bc:	78 85       	ldd	r23, Y+8	; 0x08
    24be:	89 85       	ldd	r24, Y+9	; 0x09
    24c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	9e 83       	std	Y+6, r25	; 0x06
    24cc:	8d 83       	std	Y+5, r24	; 0x05
    24ce:	8d 81       	ldd	r24, Y+5	; 0x05
    24d0:	9e 81       	ldd	r25, Y+6	; 0x06
    24d2:	9a 83       	std	Y+2, r25	; 0x02
    24d4:	89 83       	std	Y+1, r24	; 0x01
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	9a 81       	ldd	r25, Y+2	; 0x02
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	f1 f7       	brne	.-4      	; 0x24da <LCD_voidInit+0xf0>
    24de:	9a 83       	std	Y+2, r25	; 0x02
    24e0:	89 83       	std	Y+1, r24	; 0x01
	/* Delay 30ms to ensure the initialization of the LCD driver */
	_delay_ms(30);

	/* Set Control pins as output */
	DIO_voidSetPinDirection(RS_PORT,RS_PIN,PIN_OUTPUT);
    24e2:	82 e0       	ldi	r24, 0x02	; 2
    24e4:	60 e0       	ldi	r22, 0x00	; 0
    24e6:	41 e0       	ldi	r20, 0x01	; 1
    24e8:	0e 94 09 0c 	call	0x1812	; 0x1812 <DIO_voidSetPinDirection>
	// DIO_voidSetPinDirection(RW_PORT,RW_PIN,PIN_OUTPUT);
	DIO_voidSetPinDirection(EN_PORT, EN_PIN,PIN_OUTPUT);
    24ec:	82 e0       	ldi	r24, 0x02	; 2
    24ee:	61 e0       	ldi	r22, 0x01	; 1
    24f0:	41 e0       	ldi	r20, 0x01	; 1
    24f2:	0e 94 09 0c 	call	0x1812	; 0x1812 <DIO_voidSetPinDirection>

	/* Set Data Port Direction as output */
	DIO_voidSetPinDirection(D4_PORT,D4_PIN,PIN_OUTPUT);
    24f6:	82 e0       	ldi	r24, 0x02	; 2
    24f8:	62 e0       	ldi	r22, 0x02	; 2
    24fa:	41 e0       	ldi	r20, 0x01	; 1
    24fc:	0e 94 09 0c 	call	0x1812	; 0x1812 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D5_PORT,D5_PIN,PIN_OUTPUT);
    2500:	82 e0       	ldi	r24, 0x02	; 2
    2502:	63 e0       	ldi	r22, 0x03	; 3
    2504:	41 e0       	ldi	r20, 0x01	; 1
    2506:	0e 94 09 0c 	call	0x1812	; 0x1812 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D6_PORT,D6_PIN,PIN_OUTPUT);
    250a:	82 e0       	ldi	r24, 0x02	; 2
    250c:	64 e0       	ldi	r22, 0x04	; 4
    250e:	41 e0       	ldi	r20, 0x01	; 1
    2510:	0e 94 09 0c 	call	0x1812	; 0x1812 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D7_PORT,D7_PIN,PIN_OUTPUT);
    2514:	82 e0       	ldi	r24, 0x02	; 2
    2516:	65 e0       	ldi	r22, 0x05	; 5
    2518:	41 e0       	ldi	r20, 0x01	; 1
    251a:	0e 94 09 0c 	call	0x1812	; 0x1812 <DIO_voidSetPinDirection>

	/* Return Home */
	LCD_voidWriteCommand(RETURN_HOME);
    251e:	82 e0       	ldi	r24, 0x02	; 2
    2520:	0e 94 16 14 	call	0x282c	; 0x282c <LCD_voidWriteCommand>

	/* Configure as 4-bit data mode*/
	LCD_voidWriteCommand(FUNCTION_SET_4BIT_2LINES_5X7_DOTS);
    2524:	88 e2       	ldi	r24, 0x28	; 40
    2526:	0e 94 16 14 	call	0x282c	; 0x282c <LCD_voidWriteCommand>

	/*Display ON OFF Control */
	LCD_voidWriteCommand(DISPLAY_ON_CURSOR_OFF);
    252a:	8c e0       	ldi	r24, 0x0C	; 12
    252c:	0e 94 16 14 	call	0x282c	; 0x282c <LCD_voidWriteCommand>

	/* Clear Display */
	LCD_voidWriteCommand(DISPLAY_CLEAR);
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	0e 94 16 14 	call	0x282c	; 0x282c <LCD_voidWriteCommand>

	/*ENTRY MODE*/
	LCD_voidWriteCommand(ENTRY_MODE_SET);
    2536:	86 e0       	ldi	r24, 0x06	; 6
    2538:	0e 94 16 14 	call	0x282c	; 0x282c <LCD_voidWriteCommand>

}
    253c:	2e 96       	adiw	r28, 0x0e	; 14
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	de bf       	out	0x3e, r29	; 62
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	cd bf       	out	0x3d, r28	; 61
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret

0000254e <LCD_voidWriteBitsToSend>:
/***********************************************************************************/

static void LCD_voidWriteBitsToSend(u8 copy_u8Byte)
{
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
    2556:	6d 97       	sbiw	r28, 0x1d	; 29
    2558:	0f b6       	in	r0, 0x3f	; 63
    255a:	f8 94       	cli
    255c:	de bf       	out	0x3e, r29	; 62
    255e:	0f be       	out	0x3f, r0	; 63
    2560:	cd bf       	out	0x3d, r28	; 61
    2562:	8d 8f       	std	Y+29, r24	; 0x1d



	/*prepare 4 bits MSB to send */
	DIO_voidSetPinValue(D7_PORT,D7_PIN, GET_BIT(copy_u8Byte,PIN7) );
    2564:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2566:	98 2f       	mov	r25, r24
    2568:	99 1f       	adc	r25, r25
    256a:	99 27       	eor	r25, r25
    256c:	99 1f       	adc	r25, r25
    256e:	82 e0       	ldi	r24, 0x02	; 2
    2570:	65 e0       	ldi	r22, 0x05	; 5
    2572:	49 2f       	mov	r20, r25
    2574:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6_PORT,D6_PIN, GET_BIT(copy_u8Byte,PIN6) );
    2578:	8d 8d       	ldd	r24, Y+29	; 0x1d
    257a:	82 95       	swap	r24
    257c:	86 95       	lsr	r24
    257e:	86 95       	lsr	r24
    2580:	83 70       	andi	r24, 0x03	; 3
    2582:	98 2f       	mov	r25, r24
    2584:	91 70       	andi	r25, 0x01	; 1
    2586:	82 e0       	ldi	r24, 0x02	; 2
    2588:	64 e0       	ldi	r22, 0x04	; 4
    258a:	49 2f       	mov	r20, r25
    258c:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5_PORT,D5_PIN, GET_BIT(copy_u8Byte,PIN5) );
    2590:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2592:	82 95       	swap	r24
    2594:	86 95       	lsr	r24
    2596:	87 70       	andi	r24, 0x07	; 7
    2598:	98 2f       	mov	r25, r24
    259a:	91 70       	andi	r25, 0x01	; 1
    259c:	82 e0       	ldi	r24, 0x02	; 2
    259e:	63 e0       	ldi	r22, 0x03	; 3
    25a0:	49 2f       	mov	r20, r25
    25a2:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D4_PORT,D4_PIN, GET_BIT(copy_u8Byte,PIN4) );
    25a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25a8:	82 95       	swap	r24
    25aa:	8f 70       	andi	r24, 0x0F	; 15
    25ac:	98 2f       	mov	r25, r24
    25ae:	91 70       	andi	r25, 0x01	; 1
    25b0:	82 e0       	ldi	r24, 0x02	; 2
    25b2:	62 e0       	ldi	r22, 0x02	; 2
    25b4:	49 2f       	mov	r20, r25
    25b6:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>

	/* open EN--> make it high --- then after 2m close EN -->make it low*/
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_HIGH);
    25ba:	82 e0       	ldi	r24, 0x02	; 2
    25bc:	61 e0       	ldi	r22, 0x01	; 1
    25be:	41 e0       	ldi	r20, 0x01	; 1
    25c0:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	a0 e0       	ldi	r26, 0x00	; 0
    25ca:	b0 e4       	ldi	r27, 0x40	; 64
    25cc:	89 8f       	std	Y+25, r24	; 0x19
    25ce:	9a 8f       	std	Y+26, r25	; 0x1a
    25d0:	ab 8f       	std	Y+27, r26	; 0x1b
    25d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d4:	69 8d       	ldd	r22, Y+25	; 0x19
    25d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	4a e7       	ldi	r20, 0x7A	; 122
    25e2:	55 e4       	ldi	r21, 0x45	; 69
    25e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	8d 8b       	std	Y+21, r24	; 0x15
    25ee:	9e 8b       	std	Y+22, r25	; 0x16
    25f0:	af 8b       	std	Y+23, r26	; 0x17
    25f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25f4:	6d 89       	ldd	r22, Y+21	; 0x15
    25f6:	7e 89       	ldd	r23, Y+22	; 0x16
    25f8:	8f 89       	ldd	r24, Y+23	; 0x17
    25fa:	98 8d       	ldd	r25, Y+24	; 0x18
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e8       	ldi	r20, 0x80	; 128
    2602:	5f e3       	ldi	r21, 0x3F	; 63
    2604:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2608:	88 23       	and	r24, r24
    260a:	2c f4       	brge	.+10     	; 0x2616 <LCD_voidWriteBitsToSend+0xc8>
		__ticks = 1;
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	9c 8b       	std	Y+20, r25	; 0x14
    2612:	8b 8b       	std	Y+19, r24	; 0x13
    2614:	3f c0       	rjmp	.+126    	; 0x2694 <LCD_voidWriteBitsToSend+0x146>
	else if (__tmp > 65535)
    2616:	6d 89       	ldd	r22, Y+21	; 0x15
    2618:	7e 89       	ldd	r23, Y+22	; 0x16
    261a:	8f 89       	ldd	r24, Y+23	; 0x17
    261c:	98 8d       	ldd	r25, Y+24	; 0x18
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	3f ef       	ldi	r19, 0xFF	; 255
    2622:	4f e7       	ldi	r20, 0x7F	; 127
    2624:	57 e4       	ldi	r21, 0x47	; 71
    2626:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    262a:	18 16       	cp	r1, r24
    262c:	4c f5       	brge	.+82     	; 0x2680 <LCD_voidWriteBitsToSend+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    262e:	69 8d       	ldd	r22, Y+25	; 0x19
    2630:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2632:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2634:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e2       	ldi	r20, 0x20	; 32
    263c:	51 e4       	ldi	r21, 0x41	; 65
    263e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	bc 01       	movw	r22, r24
    2648:	cd 01       	movw	r24, r26
    264a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	9c 8b       	std	Y+20, r25	; 0x14
    2654:	8b 8b       	std	Y+19, r24	; 0x13
    2656:	0f c0       	rjmp	.+30     	; 0x2676 <LCD_voidWriteBitsToSend+0x128>
    2658:	80 e9       	ldi	r24, 0x90	; 144
    265a:	91 e0       	ldi	r25, 0x01	; 1
    265c:	9a 8b       	std	Y+18, r25	; 0x12
    265e:	89 8b       	std	Y+17, r24	; 0x11
    2660:	89 89       	ldd	r24, Y+17	; 0x11
    2662:	9a 89       	ldd	r25, Y+18	; 0x12
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	f1 f7       	brne	.-4      	; 0x2664 <LCD_voidWriteBitsToSend+0x116>
    2668:	9a 8b       	std	Y+18, r25	; 0x12
    266a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    266c:	8b 89       	ldd	r24, Y+19	; 0x13
    266e:	9c 89       	ldd	r25, Y+20	; 0x14
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	9c 8b       	std	Y+20, r25	; 0x14
    2674:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2676:	8b 89       	ldd	r24, Y+19	; 0x13
    2678:	9c 89       	ldd	r25, Y+20	; 0x14
    267a:	00 97       	sbiw	r24, 0x00	; 0
    267c:	69 f7       	brne	.-38     	; 0x2658 <LCD_voidWriteBitsToSend+0x10a>
    267e:	14 c0       	rjmp	.+40     	; 0x26a8 <LCD_voidWriteBitsToSend+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2680:	6d 89       	ldd	r22, Y+21	; 0x15
    2682:	7e 89       	ldd	r23, Y+22	; 0x16
    2684:	8f 89       	ldd	r24, Y+23	; 0x17
    2686:	98 8d       	ldd	r25, Y+24	; 0x18
    2688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	9c 8b       	std	Y+20, r25	; 0x14
    2692:	8b 8b       	std	Y+19, r24	; 0x13
    2694:	8b 89       	ldd	r24, Y+19	; 0x13
    2696:	9c 89       	ldd	r25, Y+20	; 0x14
    2698:	98 8b       	std	Y+16, r25	; 0x10
    269a:	8f 87       	std	Y+15, r24	; 0x0f
    269c:	8f 85       	ldd	r24, Y+15	; 0x0f
    269e:	98 89       	ldd	r25, Y+16	; 0x10
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	f1 f7       	brne	.-4      	; 0x26a0 <LCD_voidWriteBitsToSend+0x152>
    26a4:	98 8b       	std	Y+16, r25	; 0x10
    26a6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_LOW);
    26a8:	82 e0       	ldi	r24, 0x02	; 2
    26aa:	61 e0       	ldi	r22, 0x01	; 1
    26ac:	40 e0       	ldi	r20, 0x00	; 0
    26ae:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>


	/*prepare 4 bits LSB to send */
	DIO_voidSetPinValue(D7_PORT,D7_PIN, GET_BIT(copy_u8Byte,PIN3) );
    26b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26b4:	86 95       	lsr	r24
    26b6:	86 95       	lsr	r24
    26b8:	86 95       	lsr	r24
    26ba:	98 2f       	mov	r25, r24
    26bc:	91 70       	andi	r25, 0x01	; 1
    26be:	82 e0       	ldi	r24, 0x02	; 2
    26c0:	65 e0       	ldi	r22, 0x05	; 5
    26c2:	49 2f       	mov	r20, r25
    26c4:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6_PORT,D6_PIN, GET_BIT(copy_u8Byte,PIN2) );
    26c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26ca:	86 95       	lsr	r24
    26cc:	86 95       	lsr	r24
    26ce:	98 2f       	mov	r25, r24
    26d0:	91 70       	andi	r25, 0x01	; 1
    26d2:	82 e0       	ldi	r24, 0x02	; 2
    26d4:	64 e0       	ldi	r22, 0x04	; 4
    26d6:	49 2f       	mov	r20, r25
    26d8:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5_PORT,D5_PIN, GET_BIT(copy_u8Byte,PIN1) );
    26dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26de:	86 95       	lsr	r24
    26e0:	98 2f       	mov	r25, r24
    26e2:	91 70       	andi	r25, 0x01	; 1
    26e4:	82 e0       	ldi	r24, 0x02	; 2
    26e6:	63 e0       	ldi	r22, 0x03	; 3
    26e8:	49 2f       	mov	r20, r25
    26ea:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D4_PORT,D4_PIN, GET_BIT(copy_u8Byte,PIN0) );
    26ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26f0:	98 2f       	mov	r25, r24
    26f2:	91 70       	andi	r25, 0x01	; 1
    26f4:	82 e0       	ldi	r24, 0x02	; 2
    26f6:	62 e0       	ldi	r22, 0x02	; 2
    26f8:	49 2f       	mov	r20, r25
    26fa:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>

	/* open EN--> make it high --- then after 2m -- close EN -->make it low*/
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_HIGH);
    26fe:	82 e0       	ldi	r24, 0x02	; 2
    2700:	61 e0       	ldi	r22, 0x01	; 1
    2702:	41 e0       	ldi	r20, 0x01	; 1
    2704:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	a0 e0       	ldi	r26, 0x00	; 0
    270e:	b0 e4       	ldi	r27, 0x40	; 64
    2710:	8b 87       	std	Y+11, r24	; 0x0b
    2712:	9c 87       	std	Y+12, r25	; 0x0c
    2714:	ad 87       	std	Y+13, r26	; 0x0d
    2716:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2718:	6b 85       	ldd	r22, Y+11	; 0x0b
    271a:	7c 85       	ldd	r23, Y+12	; 0x0c
    271c:	8d 85       	ldd	r24, Y+13	; 0x0d
    271e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	4a e7       	ldi	r20, 0x7A	; 122
    2726:	55 e4       	ldi	r21, 0x45	; 69
    2728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	8f 83       	std	Y+7, r24	; 0x07
    2732:	98 87       	std	Y+8, r25	; 0x08
    2734:	a9 87       	std	Y+9, r26	; 0x09
    2736:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2738:	6f 81       	ldd	r22, Y+7	; 0x07
    273a:	78 85       	ldd	r23, Y+8	; 0x08
    273c:	89 85       	ldd	r24, Y+9	; 0x09
    273e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	40 e8       	ldi	r20, 0x80	; 128
    2746:	5f e3       	ldi	r21, 0x3F	; 63
    2748:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    274c:	88 23       	and	r24, r24
    274e:	2c f4       	brge	.+10     	; 0x275a <LCD_voidWriteBitsToSend+0x20c>
		__ticks = 1;
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	9e 83       	std	Y+6, r25	; 0x06
    2756:	8d 83       	std	Y+5, r24	; 0x05
    2758:	3f c0       	rjmp	.+126    	; 0x27d8 <LCD_voidWriteBitsToSend+0x28a>
	else if (__tmp > 65535)
    275a:	6f 81       	ldd	r22, Y+7	; 0x07
    275c:	78 85       	ldd	r23, Y+8	; 0x08
    275e:	89 85       	ldd	r24, Y+9	; 0x09
    2760:	9a 85       	ldd	r25, Y+10	; 0x0a
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	3f ef       	ldi	r19, 0xFF	; 255
    2766:	4f e7       	ldi	r20, 0x7F	; 127
    2768:	57 e4       	ldi	r21, 0x47	; 71
    276a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    276e:	18 16       	cp	r1, r24
    2770:	4c f5       	brge	.+82     	; 0x27c4 <LCD_voidWriteBitsToSend+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2772:	6b 85       	ldd	r22, Y+11	; 0x0b
    2774:	7c 85       	ldd	r23, Y+12	; 0x0c
    2776:	8d 85       	ldd	r24, Y+13	; 0x0d
    2778:	9e 85       	ldd	r25, Y+14	; 0x0e
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e2       	ldi	r20, 0x20	; 32
    2780:	51 e4       	ldi	r21, 0x41	; 65
    2782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	bc 01       	movw	r22, r24
    278c:	cd 01       	movw	r24, r26
    278e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	9e 83       	std	Y+6, r25	; 0x06
    2798:	8d 83       	std	Y+5, r24	; 0x05
    279a:	0f c0       	rjmp	.+30     	; 0x27ba <LCD_voidWriteBitsToSend+0x26c>
    279c:	80 e9       	ldi	r24, 0x90	; 144
    279e:	91 e0       	ldi	r25, 0x01	; 1
    27a0:	9c 83       	std	Y+4, r25	; 0x04
    27a2:	8b 83       	std	Y+3, r24	; 0x03
    27a4:	8b 81       	ldd	r24, Y+3	; 0x03
    27a6:	9c 81       	ldd	r25, Y+4	; 0x04
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	f1 f7       	brne	.-4      	; 0x27a8 <LCD_voidWriteBitsToSend+0x25a>
    27ac:	9c 83       	std	Y+4, r25	; 0x04
    27ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b0:	8d 81       	ldd	r24, Y+5	; 0x05
    27b2:	9e 81       	ldd	r25, Y+6	; 0x06
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	9e 83       	std	Y+6, r25	; 0x06
    27b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ba:	8d 81       	ldd	r24, Y+5	; 0x05
    27bc:	9e 81       	ldd	r25, Y+6	; 0x06
    27be:	00 97       	sbiw	r24, 0x00	; 0
    27c0:	69 f7       	brne	.-38     	; 0x279c <LCD_voidWriteBitsToSend+0x24e>
    27c2:	14 c0       	rjmp	.+40     	; 0x27ec <LCD_voidWriteBitsToSend+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c4:	6f 81       	ldd	r22, Y+7	; 0x07
    27c6:	78 85       	ldd	r23, Y+8	; 0x08
    27c8:	89 85       	ldd	r24, Y+9	; 0x09
    27ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    27cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	9e 83       	std	Y+6, r25	; 0x06
    27d6:	8d 83       	std	Y+5, r24	; 0x05
    27d8:	8d 81       	ldd	r24, Y+5	; 0x05
    27da:	9e 81       	ldd	r25, Y+6	; 0x06
    27dc:	9a 83       	std	Y+2, r25	; 0x02
    27de:	89 83       	std	Y+1, r24	; 0x01
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	9a 81       	ldd	r25, Y+2	; 0x02
    27e4:	01 97       	sbiw	r24, 0x01	; 1
    27e6:	f1 f7       	brne	.-4      	; 0x27e4 <LCD_voidWriteBitsToSend+0x296>
    27e8:	9a 83       	std	Y+2, r25	; 0x02
    27ea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_LOW);
    27ec:	82 e0       	ldi	r24, 0x02	; 2
    27ee:	61 e0       	ldi	r22, 0x01	; 1
    27f0:	40 e0       	ldi	r20, 0x00	; 0
    27f2:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>




}
    27f6:	6d 96       	adiw	r28, 0x1d	; 29
    27f8:	0f b6       	in	r0, 0x3f	; 63
    27fa:	f8 94       	cli
    27fc:	de bf       	out	0x3e, r29	; 62
    27fe:	0f be       	out	0x3f, r0	; 63
    2800:	cd bf       	out	0x3d, r28	; 61
    2802:	cf 91       	pop	r28
    2804:	df 91       	pop	r29
    2806:	08 95       	ret

00002808 <LCD_voidWriteData>:



/***********************************************************************************/
void LCD_voidWriteData(u8 copy_u8data)
{
    2808:	df 93       	push	r29
    280a:	cf 93       	push	r28
    280c:	0f 92       	push	r0
    280e:	cd b7       	in	r28, 0x3d	; 61
    2810:	de b7       	in	r29, 0x3e	; 62
    2812:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to HIGH */
	DIO_voidSetPinValue(RS_PORT,RS_PIN,PIN_HIGH);
    2814:	82 e0       	ldi	r24, 0x02	; 2
    2816:	60 e0       	ldi	r22, 0x00	; 0
    2818:	41 e0       	ldi	r20, 0x01	; 1
    281a:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>

	LCD_voidWriteBitsToSend(copy_u8data);
    281e:	89 81       	ldd	r24, Y+1	; 0x01
    2820:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_voidWriteBitsToSend>
}
    2824:	0f 90       	pop	r0
    2826:	cf 91       	pop	r28
    2828:	df 91       	pop	r29
    282a:	08 95       	ret

0000282c <LCD_voidWriteCommand>:


/***********************************************************************************/

void LCD_voidWriteCommand(u8 copy_u8Command)
{
    282c:	df 93       	push	r29
    282e:	cf 93       	push	r28
    2830:	0f 92       	push	r0
    2832:	cd b7       	in	r28, 0x3d	; 61
    2834:	de b7       	in	r29, 0x3e	; 62
    2836:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to low */
	DIO_voidSetPinValue(RS_PORT,RS_PIN,PIN_LOW);
    2838:	82 e0       	ldi	r24, 0x02	; 2
    283a:	60 e0       	ldi	r22, 0x00	; 0
    283c:	40 e0       	ldi	r20, 0x00	; 0
    283e:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_voidSetPinValue>


	LCD_voidWriteBitsToSend(copy_u8Command);
    2842:	89 81       	ldd	r24, Y+1	; 0x01
    2844:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_voidWriteBitsToSend>
}
    2848:	0f 90       	pop	r0
    284a:	cf 91       	pop	r28
    284c:	df 91       	pop	r29
    284e:	08 95       	ret

00002850 <LCD_voidWriteString>:
/***********************************************************************************/



void LCD_voidWriteString(u8 * copy_str)
{
    2850:	df 93       	push	r29
    2852:	cf 93       	push	r28
    2854:	00 d0       	rcall	.+0      	; 0x2856 <LCD_voidWriteString+0x6>
    2856:	00 d0       	rcall	.+0      	; 0x2858 <LCD_voidWriteString+0x8>
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
    285c:	9c 83       	std	Y+4, r25	; 0x04
    285e:	8b 83       	std	Y+3, r24	; 0x03

	u16 i= ZERO;
    2860:	1a 82       	std	Y+2, r1	; 0x02
    2862:	19 82       	std	Y+1, r1	; 0x01
    2864:	0f c0       	rjmp	.+30     	; 0x2884 <LCD_voidWriteString+0x34>
	while(copy_str[i] != '\0')
	{
		LCD_voidWriteData(copy_str[i]);
    2866:	2b 81       	ldd	r18, Y+3	; 0x03
    2868:	3c 81       	ldd	r19, Y+4	; 0x04
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	9a 81       	ldd	r25, Y+2	; 0x02
    286e:	f9 01       	movw	r30, r18
    2870:	e8 0f       	add	r30, r24
    2872:	f9 1f       	adc	r31, r25
    2874:	80 81       	ld	r24, Z
    2876:	0e 94 04 14 	call	0x2808	; 0x2808 <LCD_voidWriteData>
		i++;
    287a:	89 81       	ldd	r24, Y+1	; 0x01
    287c:	9a 81       	ldd	r25, Y+2	; 0x02
    287e:	01 96       	adiw	r24, 0x01	; 1
    2880:	9a 83       	std	Y+2, r25	; 0x02
    2882:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidWriteString(u8 * copy_str)
{

	u16 i= ZERO;
	while(copy_str[i] != '\0')
    2884:	2b 81       	ldd	r18, Y+3	; 0x03
    2886:	3c 81       	ldd	r19, Y+4	; 0x04
    2888:	89 81       	ldd	r24, Y+1	; 0x01
    288a:	9a 81       	ldd	r25, Y+2	; 0x02
    288c:	f9 01       	movw	r30, r18
    288e:	e8 0f       	add	r30, r24
    2890:	f9 1f       	adc	r31, r25
    2892:	80 81       	ld	r24, Z
    2894:	88 23       	and	r24, r24
    2896:	39 f7       	brne	.-50     	; 0x2866 <LCD_voidWriteString+0x16>
	{
		LCD_voidWriteData(copy_str[i]);
		i++;
	}
}
    2898:	0f 90       	pop	r0
    289a:	0f 90       	pop	r0
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	cf 91       	pop	r28
    28a2:	df 91       	pop	r29
    28a4:	08 95       	ret

000028a6 <LCD_voidGoToXY>:


/***********************************************************************************/
void LCD_voidGoToXY(u8 copy_u8row,u8 copy_u8col)
{
    28a6:	df 93       	push	r29
    28a8:	cf 93       	push	r28
    28aa:	cd b7       	in	r28, 0x3d	; 61
    28ac:	de b7       	in	r29, 0x3e	; 62
    28ae:	27 97       	sbiw	r28, 0x07	; 7
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	f8 94       	cli
    28b4:	de bf       	out	0x3e, r29	; 62
    28b6:	0f be       	out	0x3f, r0	; 63
    28b8:	cd bf       	out	0x3d, r28	; 61
    28ba:	8e 83       	std	Y+6, r24	; 0x06
    28bc:	6f 83       	std	Y+7, r22	; 0x07
	 * 0x40 --> address row 1
	 * 0x14 --> address row 2
	 * 0x54 --> address row 3
	 * copy_u8col --> col num
	 * */
	u8 rows_address[4]={0x00,0x40,0x14,0x54};
    28be:	1a 82       	std	Y+2, r1	; 0x02
    28c0:	80 e4       	ldi	r24, 0x40	; 64
    28c2:	8b 83       	std	Y+3, r24	; 0x03
    28c4:	84 e1       	ldi	r24, 0x14	; 20
    28c6:	8c 83       	std	Y+4, r24	; 0x04
    28c8:	84 e5       	ldi	r24, 0x54	; 84
    28ca:	8d 83       	std	Y+5, r24	; 0x05

	u8 local_address=( rows_address[copy_u8row]  + copy_u8col ) + SET_DDRAM_ADDRESS ;
    28cc:	8e 81       	ldd	r24, Y+6	; 0x06
    28ce:	28 2f       	mov	r18, r24
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	ce 01       	movw	r24, r28
    28d4:	02 96       	adiw	r24, 0x02	; 2
    28d6:	fc 01       	movw	r30, r24
    28d8:	e2 0f       	add	r30, r18
    28da:	f3 1f       	adc	r31, r19
    28dc:	90 81       	ld	r25, Z
    28de:	8f 81       	ldd	r24, Y+7	; 0x07
    28e0:	89 0f       	add	r24, r25
    28e2:	80 58       	subi	r24, 0x80	; 128
    28e4:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidWriteCommand(local_address) ;
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	0e 94 16 14 	call	0x282c	; 0x282c <LCD_voidWriteCommand>

}
    28ec:	27 96       	adiw	r28, 0x07	; 7
    28ee:	0f b6       	in	r0, 0x3f	; 63
    28f0:	f8 94       	cli
    28f2:	de bf       	out	0x3e, r29	; 62
    28f4:	0f be       	out	0x3f, r0	; 63
    28f6:	cd bf       	out	0x3d, r28	; 61
    28f8:	cf 91       	pop	r28
    28fa:	df 91       	pop	r29
    28fc:	08 95       	ret

000028fe <LCD_voidClear>:

/***********************************************************************************/

void LCD_voidClear(void)
{
    28fe:	df 93       	push	r29
    2900:	cf 93       	push	r28
    2902:	cd b7       	in	r28, 0x3d	; 61
    2904:	de b7       	in	r29, 0x3e	; 62
	LCD_voidWriteCommand( DISPLAY_CLEAR);
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	0e 94 16 14 	call	0x282c	; 0x282c <LCD_voidWriteCommand>

}
    290c:	cf 91       	pop	r28
    290e:	df 91       	pop	r29
    2910:	08 95       	ret

00002912 <LCD_voidShift>:



/***********************************************************************************/

void LCD_voidShift(u8 copy_u8direction){
    2912:	df 93       	push	r29
    2914:	cf 93       	push	r28
    2916:	0f 92       	push	r0
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62
    291c:	89 83       	std	Y+1, r24	; 0x01
	if (copy_u8direction==SHIFT_DISPLAY_RIGHT)
    291e:	89 81       	ldd	r24, Y+1	; 0x01
    2920:	8c 31       	cpi	r24, 0x1C	; 28
    2922:	21 f4       	brne	.+8      	; 0x292c <LCD_voidShift+0x1a>
		{
			//Shift right
			LCD_voidWriteCommand(SHIFT_DISPLAY_RIGHT);
    2924:	8c e1       	ldi	r24, 0x1C	; 28
    2926:	0e 94 16 14 	call	0x282c	; 0x282c <LCD_voidWriteCommand>
    292a:	06 c0       	rjmp	.+12     	; 0x2938 <LCD_voidShift+0x26>
		}
		else if (copy_u8direction==SHIFT_DISPLAY_LIFT)
    292c:	89 81       	ldd	r24, Y+1	; 0x01
    292e:	88 31       	cpi	r24, 0x18	; 24
    2930:	19 f4       	brne	.+6      	; 0x2938 <LCD_voidShift+0x26>
		{
			//Shift left
			LCD_voidWriteCommand(SHIFT_DISPLAY_LIFT);
    2932:	88 e1       	ldi	r24, 0x18	; 24
    2934:	0e 94 16 14 	call	0x282c	; 0x282c <LCD_voidWriteCommand>
		}
}
    2938:	0f 90       	pop	r0
    293a:	cf 91       	pop	r28
    293c:	df 91       	pop	r29
    293e:	08 95       	ret

00002940 <LCD_voidWriteNumber>:

/***********************************************************************************/

void LCD_voidWriteNumber( u32 Copy_u8num )

{
    2940:	0f 93       	push	r16
    2942:	1f 93       	push	r17
    2944:	df 93       	push	r29
    2946:	cf 93       	push	r28
    2948:	cd b7       	in	r28, 0x3d	; 61
    294a:	de b7       	in	r29, 0x3e	; 62
    294c:	63 97       	sbiw	r28, 0x13	; 19
    294e:	0f b6       	in	r0, 0x3f	; 63
    2950:	f8 94       	cli
    2952:	de bf       	out	0x3e, r29	; 62
    2954:	0f be       	out	0x3f, r0	; 63
    2956:	cd bf       	out	0x3d, r28	; 61
    2958:	68 8b       	std	Y+16, r22	; 0x10
    295a:	79 8b       	std	Y+17, r23	; 0x11
    295c:	8a 8b       	std	Y+18, r24	; 0x12
    295e:	9b 8b       	std	Y+19, r25	; 0x13
	u32 LOCAL_NUMBER=Copy_u8num ;
    2960:	88 89       	ldd	r24, Y+16	; 0x10
    2962:	99 89       	ldd	r25, Y+17	; 0x11
    2964:	aa 89       	ldd	r26, Y+18	; 0x12
    2966:	bb 89       	ldd	r27, Y+19	; 0x13
    2968:	8a 83       	std	Y+2, r24	; 0x02
    296a:	9b 83       	std	Y+3, r25	; 0x03
    296c:	ac 83       	std	Y+4, r26	; 0x04
    296e:	bd 83       	std	Y+5, r27	; 0x05
	u8 LOCAL_ARR[10]   ;
	u8 i=ZERO ;
    2970:	19 82       	std	Y+1, r1	; 0x01


	do
	{
		LOCAL_ARR[i]= ( (LOCAL_NUMBER%10)+'0' );
    2972:	89 81       	ldd	r24, Y+1	; 0x01
    2974:	08 2f       	mov	r16, r24
    2976:	10 e0       	ldi	r17, 0x00	; 0
    2978:	8a 81       	ldd	r24, Y+2	; 0x02
    297a:	9b 81       	ldd	r25, Y+3	; 0x03
    297c:	ac 81       	ldd	r26, Y+4	; 0x04
    297e:	bd 81       	ldd	r27, Y+5	; 0x05
    2980:	2a e0       	ldi	r18, 0x0A	; 10
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	40 e0       	ldi	r20, 0x00	; 0
    2986:	50 e0       	ldi	r21, 0x00	; 0
    2988:	bc 01       	movw	r22, r24
    298a:	cd 01       	movw	r24, r26
    298c:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__udivmodsi4>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	28 2f       	mov	r18, r24
    2996:	20 5d       	subi	r18, 0xD0	; 208
    2998:	ce 01       	movw	r24, r28
    299a:	06 96       	adiw	r24, 0x06	; 6
    299c:	fc 01       	movw	r30, r24
    299e:	e0 0f       	add	r30, r16
    29a0:	f1 1f       	adc	r31, r17
    29a2:	20 83       	st	Z, r18
		LOCAL_NUMBER=LOCAL_NUMBER/10 ;
    29a4:	8a 81       	ldd	r24, Y+2	; 0x02
    29a6:	9b 81       	ldd	r25, Y+3	; 0x03
    29a8:	ac 81       	ldd	r26, Y+4	; 0x04
    29aa:	bd 81       	ldd	r27, Y+5	; 0x05
    29ac:	2a e0       	ldi	r18, 0x0A	; 10
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	40 e0       	ldi	r20, 0x00	; 0
    29b2:	50 e0       	ldi	r21, 0x00	; 0
    29b4:	bc 01       	movw	r22, r24
    29b6:	cd 01       	movw	r24, r26
    29b8:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__udivmodsi4>
    29bc:	da 01       	movw	r26, r20
    29be:	c9 01       	movw	r24, r18
    29c0:	8a 83       	std	Y+2, r24	; 0x02
    29c2:	9b 83       	std	Y+3, r25	; 0x03
    29c4:	ac 83       	std	Y+4, r26	; 0x04
    29c6:	bd 83       	std	Y+5, r27	; 0x05
		i++ ;
    29c8:	89 81       	ldd	r24, Y+1	; 0x01
    29ca:	8f 5f       	subi	r24, 0xFF	; 255
    29cc:	89 83       	std	Y+1, r24	; 0x01
	}
	while(LOCAL_NUMBER!=ZERO);
    29ce:	8a 81       	ldd	r24, Y+2	; 0x02
    29d0:	9b 81       	ldd	r25, Y+3	; 0x03
    29d2:	ac 81       	ldd	r26, Y+4	; 0x04
    29d4:	bd 81       	ldd	r27, Y+5	; 0x05
    29d6:	00 97       	sbiw	r24, 0x00	; 0
    29d8:	a1 05       	cpc	r26, r1
    29da:	b1 05       	cpc	r27, r1
    29dc:	51 f6       	brne	.-108    	; 0x2972 <LCD_voidWriteNumber+0x32>
    29de:	11 c0       	rjmp	.+34     	; 0x2a02 <LCD_voidWriteNumber+0xc2>


	for(;i>0;i--)
	{
		LCD_voidWriteData(LOCAL_ARR[i-ONE]);
    29e0:	89 81       	ldd	r24, Y+1	; 0x01
    29e2:	88 2f       	mov	r24, r24
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	9c 01       	movw	r18, r24
    29e8:	21 50       	subi	r18, 0x01	; 1
    29ea:	30 40       	sbci	r19, 0x00	; 0
    29ec:	ce 01       	movw	r24, r28
    29ee:	06 96       	adiw	r24, 0x06	; 6
    29f0:	fc 01       	movw	r30, r24
    29f2:	e2 0f       	add	r30, r18
    29f4:	f3 1f       	adc	r31, r19
    29f6:	80 81       	ld	r24, Z
    29f8:	0e 94 04 14 	call	0x2808	; 0x2808 <LCD_voidWriteData>
		i++ ;
	}
	while(LOCAL_NUMBER!=ZERO);


	for(;i>0;i--)
    29fc:	89 81       	ldd	r24, Y+1	; 0x01
    29fe:	81 50       	subi	r24, 0x01	; 1
    2a00:	89 83       	std	Y+1, r24	; 0x01
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	88 23       	and	r24, r24
    2a06:	61 f7       	brne	.-40     	; 0x29e0 <LCD_voidWriteNumber+0xa0>
		LCD_voidWriteData(LOCAL_ARR[i-ONE]);
	}



}
    2a08:	63 96       	adiw	r28, 0x13	; 19
    2a0a:	0f b6       	in	r0, 0x3f	; 63
    2a0c:	f8 94       	cli
    2a0e:	de bf       	out	0x3e, r29	; 62
    2a10:	0f be       	out	0x3f, r0	; 63
    2a12:	cd bf       	out	0x3d, r28	; 61
    2a14:	cf 91       	pop	r28
    2a16:	df 91       	pop	r29
    2a18:	1f 91       	pop	r17
    2a1a:	0f 91       	pop	r16
    2a1c:	08 95       	ret

00002a1e <LCD_voidWriteSpecialCharToCGRAM>:

/***********************************************************************************/

void LCD_voidWriteSpecialCharToCGRAM(u8 *copy_u8data , u8 copy_u8ByteNum )

{
    2a1e:	df 93       	push	r29
    2a20:	cf 93       	push	r28
    2a22:	00 d0       	rcall	.+0      	; 0x2a24 <LCD_voidWriteSpecialCharToCGRAM+0x6>
    2a24:	00 d0       	rcall	.+0      	; 0x2a26 <LCD_voidWriteSpecialCharToCGRAM+0x8>
    2a26:	0f 92       	push	r0
    2a28:	cd b7       	in	r28, 0x3d	; 61
    2a2a:	de b7       	in	r29, 0x3e	; 62
    2a2c:	9c 83       	std	Y+4, r25	; 0x04
    2a2e:	8b 83       	std	Y+3, r24	; 0x03
    2a30:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8CGramAddrss ;
	u8 counter=ZERO ;
    2a32:	19 82       	std	Y+1, r1	; 0x01

	Local_u8CGramAddrss = ( (copy_u8ByteNum * EIGHT)+SET_CGRAM_ADDRESS ) ;
    2a34:	8d 81       	ldd	r24, Y+5	; 0x05
    2a36:	88 2f       	mov	r24, r24
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	08 96       	adiw	r24, 0x08	; 8
    2a3c:	88 0f       	add	r24, r24
    2a3e:	99 1f       	adc	r25, r25
    2a40:	88 0f       	add	r24, r24
    2a42:	99 1f       	adc	r25, r25
    2a44:	88 0f       	add	r24, r24
    2a46:	99 1f       	adc	r25, r25
    2a48:	8a 83       	std	Y+2, r24	; 0x02

	LCD_voidWriteCommand( Local_u8CGramAddrss  ) ;
    2a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4c:	0e 94 16 14 	call	0x282c	; 0x282c <LCD_voidWriteCommand>


	for(counter=ZERO;counter<EIGHT;counter++)
    2a50:	19 82       	std	Y+1, r1	; 0x01
    2a52:	0e c0       	rjmp	.+28     	; 0x2a70 <LCD_voidWriteSpecialCharToCGRAM+0x52>
	{
		LCD_voidWriteData(copy_u8data[counter]);
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
    2a56:	28 2f       	mov	r18, r24
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a5e:	fc 01       	movw	r30, r24
    2a60:	e2 0f       	add	r30, r18
    2a62:	f3 1f       	adc	r31, r19
    2a64:	80 81       	ld	r24, Z
    2a66:	0e 94 04 14 	call	0x2808	; 0x2808 <LCD_voidWriteData>
	Local_u8CGramAddrss = ( (copy_u8ByteNum * EIGHT)+SET_CGRAM_ADDRESS ) ;

	LCD_voidWriteCommand( Local_u8CGramAddrss  ) ;


	for(counter=ZERO;counter<EIGHT;counter++)
    2a6a:	89 81       	ldd	r24, Y+1	; 0x01
    2a6c:	8f 5f       	subi	r24, 0xFF	; 255
    2a6e:	89 83       	std	Y+1, r24	; 0x01
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	88 30       	cpi	r24, 0x08	; 8
    2a74:	78 f3       	brcs	.-34     	; 0x2a54 <LCD_voidWriteSpecialCharToCGRAM+0x36>
	{
		LCD_voidWriteData(copy_u8data[counter]);
	}

	//Reset cursor
	LCD_voidGoToXY(0,0);
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	60 e0       	ldi	r22, 0x00	; 0
    2a7a:	0e 94 53 14 	call	0x28a6	; 0x28a6 <LCD_voidGoToXY>

}
    2a7e:	0f 90       	pop	r0
    2a80:	0f 90       	pop	r0
    2a82:	0f 90       	pop	r0
    2a84:	0f 90       	pop	r0
    2a86:	0f 90       	pop	r0
    2a88:	cf 91       	pop	r28
    2a8a:	df 91       	pop	r29
    2a8c:	08 95       	ret

00002a8e <LCD_voidDisplaySpecialChar>:

/***********************************************************************************/

void LCD_voidDisplaySpecialChar(u8 copy_u8ByteNum )
{
    2a8e:	df 93       	push	r29
    2a90:	cf 93       	push	r28
    2a92:	0f 92       	push	r0
    2a94:	cd b7       	in	r28, 0x3d	; 61
    2a96:	de b7       	in	r29, 0x3e	; 62
    2a98:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidWriteData(copy_u8ByteNum);
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
    2a9c:	0e 94 04 14 	call	0x2808	; 0x2808 <LCD_voidWriteData>

}
    2aa0:	0f 90       	pop	r0
    2aa2:	cf 91       	pop	r28
    2aa4:	df 91       	pop	r29
    2aa6:	08 95       	ret

00002aa8 <LCD_MTR_VoidCustomCharacters>:
u8 LCD_MTR_Right_ADDRESS = (u8)2;

u8 LCD_MTR_Lift_ADDRESS = (u8)3;
/*--------------------------------------------------------------------------------------------*/

void LCD_MTR_VoidCustomCharacters(){
    2aa8:	df 93       	push	r29
    2aaa:	cf 93       	push	r28
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62
    2ab0:	e4 97       	sbiw	r28, 0x34	; 52
    2ab2:	0f b6       	in	r0, 0x3f	; 63
    2ab4:	f8 94       	cli
    2ab6:	de bf       	out	0x3e, r29	; 62
    2ab8:	0f be       	out	0x3f, r0	; 63
    2aba:	cd bf       	out	0x3d, r28	; 61
		(u8)0b00100,
		(u8)0b00100,
		(u8)0b00100,
		(u8)0b00100,
		(u8)0b00100
	};
    2abc:	ce 01       	movw	r24, r28
    2abe:	01 96       	adiw	r24, 0x01	; 1
    2ac0:	9a a3       	std	Y+34, r25	; 0x22
    2ac2:	89 a3       	std	Y+33, r24	; 0x21
    2ac4:	ed e8       	ldi	r30, 0x8D	; 141
    2ac6:	f1 e0       	ldi	r31, 0x01	; 1
    2ac8:	fc a3       	std	Y+36, r31	; 0x24
    2aca:	eb a3       	std	Y+35, r30	; 0x23
    2acc:	f8 e0       	ldi	r31, 0x08	; 8
    2ace:	fd a3       	std	Y+37, r31	; 0x25
    2ad0:	eb a1       	ldd	r30, Y+35	; 0x23
    2ad2:	fc a1       	ldd	r31, Y+36	; 0x24
    2ad4:	00 80       	ld	r0, Z
    2ad6:	8b a1       	ldd	r24, Y+35	; 0x23
    2ad8:	9c a1       	ldd	r25, Y+36	; 0x24
    2ada:	01 96       	adiw	r24, 0x01	; 1
    2adc:	9c a3       	std	Y+36, r25	; 0x24
    2ade:	8b a3       	std	Y+35, r24	; 0x23
    2ae0:	e9 a1       	ldd	r30, Y+33	; 0x21
    2ae2:	fa a1       	ldd	r31, Y+34	; 0x22
    2ae4:	00 82       	st	Z, r0
    2ae6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ae8:	9a a1       	ldd	r25, Y+34	; 0x22
    2aea:	01 96       	adiw	r24, 0x01	; 1
    2aec:	9a a3       	std	Y+34, r25	; 0x22
    2aee:	89 a3       	std	Y+33, r24	; 0x21
    2af0:	9d a1       	ldd	r25, Y+37	; 0x25
    2af2:	91 50       	subi	r25, 0x01	; 1
    2af4:	9d a3       	std	Y+37, r25	; 0x25
    2af6:	ed a1       	ldd	r30, Y+37	; 0x25
    2af8:	ee 23       	and	r30, r30
    2afa:	51 f7       	brne	.-44     	; 0x2ad0 <LCD_MTR_VoidCustomCharacters+0x28>
		(u8)0b00100,
		(u8)0b00100,
		(u8)0b11111,
		(u8)0b01110,
		(u8)0b00100
	};
    2afc:	ce 01       	movw	r24, r28
    2afe:	09 96       	adiw	r24, 0x09	; 9
    2b00:	9f a3       	std	Y+39, r25	; 0x27
    2b02:	8e a3       	std	Y+38, r24	; 0x26
    2b04:	e5 e8       	ldi	r30, 0x85	; 133
    2b06:	f1 e0       	ldi	r31, 0x01	; 1
    2b08:	f9 a7       	std	Y+41, r31	; 0x29
    2b0a:	e8 a7       	std	Y+40, r30	; 0x28
    2b0c:	f8 e0       	ldi	r31, 0x08	; 8
    2b0e:	fa a7       	std	Y+42, r31	; 0x2a
    2b10:	e8 a5       	ldd	r30, Y+40	; 0x28
    2b12:	f9 a5       	ldd	r31, Y+41	; 0x29
    2b14:	00 80       	ld	r0, Z
    2b16:	88 a5       	ldd	r24, Y+40	; 0x28
    2b18:	99 a5       	ldd	r25, Y+41	; 0x29
    2b1a:	01 96       	adiw	r24, 0x01	; 1
    2b1c:	99 a7       	std	Y+41, r25	; 0x29
    2b1e:	88 a7       	std	Y+40, r24	; 0x28
    2b20:	ee a1       	ldd	r30, Y+38	; 0x26
    2b22:	ff a1       	ldd	r31, Y+39	; 0x27
    2b24:	00 82       	st	Z, r0
    2b26:	8e a1       	ldd	r24, Y+38	; 0x26
    2b28:	9f a1       	ldd	r25, Y+39	; 0x27
    2b2a:	01 96       	adiw	r24, 0x01	; 1
    2b2c:	9f a3       	std	Y+39, r25	; 0x27
    2b2e:	8e a3       	std	Y+38, r24	; 0x26
    2b30:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b32:	91 50       	subi	r25, 0x01	; 1
    2b34:	9a a7       	std	Y+42, r25	; 0x2a
    2b36:	ea a5       	ldd	r30, Y+42	; 0x2a
    2b38:	ee 23       	and	r30, r30
    2b3a:	51 f7       	brne	.-44     	; 0x2b10 <LCD_MTR_VoidCustomCharacters+0x68>
		(u8)0b11111,
		(u8)0b11111,
		(u8)0b00010,
		(u8)0b00100,
		(u8)0b01000
	};
    2b3c:	ce 01       	movw	r24, r28
    2b3e:	41 96       	adiw	r24, 0x11	; 17
    2b40:	9c a7       	std	Y+44, r25	; 0x2c
    2b42:	8b a7       	std	Y+43, r24	; 0x2b
    2b44:	ed e7       	ldi	r30, 0x7D	; 125
    2b46:	f1 e0       	ldi	r31, 0x01	; 1
    2b48:	fe a7       	std	Y+46, r31	; 0x2e
    2b4a:	ed a7       	std	Y+45, r30	; 0x2d
    2b4c:	f8 e0       	ldi	r31, 0x08	; 8
    2b4e:	ff a7       	std	Y+47, r31	; 0x2f
    2b50:	ed a5       	ldd	r30, Y+45	; 0x2d
    2b52:	fe a5       	ldd	r31, Y+46	; 0x2e
    2b54:	00 80       	ld	r0, Z
    2b56:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b58:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b5a:	01 96       	adiw	r24, 0x01	; 1
    2b5c:	9e a7       	std	Y+46, r25	; 0x2e
    2b5e:	8d a7       	std	Y+45, r24	; 0x2d
    2b60:	eb a5       	ldd	r30, Y+43	; 0x2b
    2b62:	fc a5       	ldd	r31, Y+44	; 0x2c
    2b64:	00 82       	st	Z, r0
    2b66:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b68:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b6a:	01 96       	adiw	r24, 0x01	; 1
    2b6c:	9c a7       	std	Y+44, r25	; 0x2c
    2b6e:	8b a7       	std	Y+43, r24	; 0x2b
    2b70:	9f a5       	ldd	r25, Y+47	; 0x2f
    2b72:	91 50       	subi	r25, 0x01	; 1
    2b74:	9f a7       	std	Y+47, r25	; 0x2f
    2b76:	ef a5       	ldd	r30, Y+47	; 0x2f
    2b78:	ee 23       	and	r30, r30
    2b7a:	51 f7       	brne	.-44     	; 0x2b50 <LCD_MTR_VoidCustomCharacters+0xa8>
		(u8)0b11111,
		(u8)0b11111,
		(u8)0b01000,
		(u8)0b00100,
		(u8)0b00010
	};
    2b7c:	ce 01       	movw	r24, r28
    2b7e:	49 96       	adiw	r24, 0x19	; 25
    2b80:	99 ab       	std	Y+49, r25	; 0x31
    2b82:	88 ab       	std	Y+48, r24	; 0x30
    2b84:	e5 e7       	ldi	r30, 0x75	; 117
    2b86:	f1 e0       	ldi	r31, 0x01	; 1
    2b88:	fb ab       	std	Y+51, r31	; 0x33
    2b8a:	ea ab       	std	Y+50, r30	; 0x32
    2b8c:	f8 e0       	ldi	r31, 0x08	; 8
    2b8e:	fc ab       	std	Y+52, r31	; 0x34
    2b90:	ea a9       	ldd	r30, Y+50	; 0x32
    2b92:	fb a9       	ldd	r31, Y+51	; 0x33
    2b94:	00 80       	ld	r0, Z
    2b96:	8a a9       	ldd	r24, Y+50	; 0x32
    2b98:	9b a9       	ldd	r25, Y+51	; 0x33
    2b9a:	01 96       	adiw	r24, 0x01	; 1
    2b9c:	9b ab       	std	Y+51, r25	; 0x33
    2b9e:	8a ab       	std	Y+50, r24	; 0x32
    2ba0:	e8 a9       	ldd	r30, Y+48	; 0x30
    2ba2:	f9 a9       	ldd	r31, Y+49	; 0x31
    2ba4:	00 82       	st	Z, r0
    2ba6:	88 a9       	ldd	r24, Y+48	; 0x30
    2ba8:	99 a9       	ldd	r25, Y+49	; 0x31
    2baa:	01 96       	adiw	r24, 0x01	; 1
    2bac:	99 ab       	std	Y+49, r25	; 0x31
    2bae:	88 ab       	std	Y+48, r24	; 0x30
    2bb0:	9c a9       	ldd	r25, Y+52	; 0x34
    2bb2:	91 50       	subi	r25, 0x01	; 1
    2bb4:	9c ab       	std	Y+52, r25	; 0x34
    2bb6:	ec a9       	ldd	r30, Y+52	; 0x34
    2bb8:	ee 23       	and	r30, r30
    2bba:	51 f7       	brne	.-44     	; 0x2b90 <LCD_MTR_VoidCustomCharacters+0xe8>

	//Send the custom characters to the CGRAM
	LCD_voidWriteSpecialCharToCGRAM(LCD_MTR_Forward,LCD_MTR_Forward_ADDRESS);
    2bbc:	20 91 af 01 	lds	r18, 0x01AF
    2bc0:	ce 01       	movw	r24, r28
    2bc2:	01 96       	adiw	r24, 0x01	; 1
    2bc4:	62 2f       	mov	r22, r18
    2bc6:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <LCD_voidWriteSpecialCharToCGRAM>

	LCD_voidWriteSpecialCharToCGRAM(LCD_MTR_Reverse,LCD_MTR_Reverce_ADDRESS);
    2bca:	20 91 72 01 	lds	r18, 0x0172
    2bce:	ce 01       	movw	r24, r28
    2bd0:	09 96       	adiw	r24, 0x09	; 9
    2bd2:	62 2f       	mov	r22, r18
    2bd4:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <LCD_voidWriteSpecialCharToCGRAM>

	LCD_voidWriteSpecialCharToCGRAM(LCD_MTR_Right,LCD_MTR_Right_ADDRESS);
    2bd8:	20 91 73 01 	lds	r18, 0x0173
    2bdc:	ce 01       	movw	r24, r28
    2bde:	41 96       	adiw	r24, 0x11	; 17
    2be0:	62 2f       	mov	r22, r18
    2be2:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <LCD_voidWriteSpecialCharToCGRAM>

	LCD_voidWriteSpecialCharToCGRAM(LCD_MTR_Lift,LCD_MTR_Lift_ADDRESS);
    2be6:	20 91 74 01 	lds	r18, 0x0174
    2bea:	ce 01       	movw	r24, r28
    2bec:	49 96       	adiw	r24, 0x19	; 25
    2bee:	62 2f       	mov	r22, r18
    2bf0:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <LCD_voidWriteSpecialCharToCGRAM>

	return;
}
    2bf4:	e4 96       	adiw	r28, 0x34	; 52
    2bf6:	0f b6       	in	r0, 0x3f	; 63
    2bf8:	f8 94       	cli
    2bfa:	de bf       	out	0x3e, r29	; 62
    2bfc:	0f be       	out	0x3f, r0	; 63
    2bfe:	cd bf       	out	0x3d, r28	; 61
    2c00:	cf 91       	pop	r28
    2c02:	df 91       	pop	r29
    2c04:	08 95       	ret

00002c06 <main>:

int main(){
    2c06:	df 93       	push	r29
    2c08:	cf 93       	push	r28
    2c0a:	cd b7       	in	r28, 0x3d	; 61
    2c0c:	de b7       	in	r29, 0x3e	; 62
    2c0e:	62 97       	sbiw	r28, 0x12	; 18
    2c10:	0f b6       	in	r0, 0x3f	; 63
    2c12:	f8 94       	cli
    2c14:	de bf       	out	0x3e, r29	; 62
    2c16:	0f be       	out	0x3f, r0	; 63
    2c18:	cd bf       	out	0x3d, r28	; 61

	//LCD
	LCD_voidInit();
    2c1a:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_voidInit>

	LCD_MTR_VoidCustomCharacters();
    2c1e:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <LCD_MTR_VoidCustomCharacters>

	//Motor

	MTR_voidInit();
    2c22:	0e 94 0d 11 	call	0x221a	; 0x221a <MTR_voidInit>

	//ULTRASONIC
	u32 UltrasonicRead = 0;
    2c26:	1f 86       	std	Y+15, r1	; 0x0f
    2c28:	18 8a       	std	Y+16, r1	; 0x10
    2c2a:	19 8a       	std	Y+17, r1	; 0x11
    2c2c:	1a 8a       	std	Y+18, r1	; 0x12

	ULTRASONIC_voidInit();
    2c2e:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <ULTRASONIC_voidInit>

	while (1){
		//Start the Ultrasonic read
		ULTRASONIC_VoidStart();
    2c32:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <ULTRASONIC_VoidStart>

		UltrasonicRead = 0;
    2c36:	1f 86       	std	Y+15, r1	; 0x0f
    2c38:	18 8a       	std	Y+16, r1	; 0x10
    2c3a:	19 8a       	std	Y+17, r1	; 0x11
    2c3c:	1a 8a       	std	Y+18, r1	; 0x12

		//Read the distance
		UltrasonicRead = ULTRASONIC_VoidVal();
    2c3e:	0e 94 b3 10 	call	0x2166	; 0x2166 <ULTRASONIC_VoidVal>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	8f 87       	std	Y+15, r24	; 0x0f
    2c48:	98 8b       	std	Y+16, r25	; 0x10
    2c4a:	a9 8b       	std	Y+17, r26	; 0x11
    2c4c:	ba 8b       	std	Y+18, r27	; 0x12

		//check if the distance is not 0
		if(UltrasonicRead!=0){
    2c4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c50:	98 89       	ldd	r25, Y+16	; 0x10
    2c52:	a9 89       	ldd	r26, Y+17	; 0x11
    2c54:	ba 89       	ldd	r27, Y+18	; 0x12
    2c56:	00 97       	sbiw	r24, 0x00	; 0
    2c58:	a1 05       	cpc	r26, r1
    2c5a:	b1 05       	cpc	r27, r1
    2c5c:	89 f1       	breq	.+98     	; 0x2cc0 <main+0xba>
			//Clear the display
			LCD_voidClear();
    2c5e:	0e 94 7f 14 	call	0x28fe	; 0x28fe <LCD_voidClear>

			//Write the distance to the LCD
			LCD_voidWriteNumber(UltrasonicRead);
    2c62:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c64:	98 89       	ldd	r25, Y+16	; 0x10
    2c66:	a9 89       	ldd	r26, Y+17	; 0x11
    2c68:	ba 89       	ldd	r27, Y+18	; 0x12
    2c6a:	bc 01       	movw	r22, r24
    2c6c:	cd 01       	movw	r24, r26
    2c6e:	0e 94 a0 14 	call	0x2940	; 0x2940 <LCD_voidWriteNumber>

			//Do to the second row in the LCD
			LCD_voidGoToXY(2,0);
    2c72:	82 e0       	ldi	r24, 0x02	; 2
    2c74:	60 e0       	ldi	r22, 0x00	; 0
    2c76:	0e 94 53 14 	call	0x28a6	; 0x28a6 <LCD_voidGoToXY>

			//check if the distance is greater than 50
			if(UltrasonicRead>=50){
    2c7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c7c:	98 89       	ldd	r25, Y+16	; 0x10
    2c7e:	a9 89       	ldd	r26, Y+17	; 0x11
    2c80:	ba 89       	ldd	r27, Y+18	; 0x12
    2c82:	82 33       	cpi	r24, 0x32	; 50
    2c84:	91 05       	cpc	r25, r1
    2c86:	a1 05       	cpc	r26, r1
    2c88:	b1 05       	cpc	r27, r1
    2c8a:	48 f0       	brcs	.+18     	; 0x2c9e <main+0x98>
				//Send forward custom character to the LCD
				LCD_voidDisplaySpecialChar(LCD_MTR_Forward_ADDRESS);
    2c8c:	80 91 af 01 	lds	r24, 0x01AF
    2c90:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <LCD_voidDisplaySpecialChar>
				//Start the motors
				MTR_voidMovement(MTR_FORWARD, 250);
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	6a ef       	ldi	r22, 0xFA	; 250
    2c98:	0e 94 35 11 	call	0x226a	; 0x226a <MTR_voidMovement>
    2c9c:	11 c0       	rjmp	.+34     	; 0x2cc0 <main+0xba>
			}
			//check if the distance is less than 50 stop the motors
			else if(UltrasonicRead<50){
    2c9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ca0:	98 89       	ldd	r25, Y+16	; 0x10
    2ca2:	a9 89       	ldd	r26, Y+17	; 0x11
    2ca4:	ba 89       	ldd	r27, Y+18	; 0x12
    2ca6:	82 33       	cpi	r24, 0x32	; 50
    2ca8:	91 05       	cpc	r25, r1
    2caa:	a1 05       	cpc	r26, r1
    2cac:	b1 05       	cpc	r27, r1
    2cae:	40 f4       	brcc	.+16     	; 0x2cc0 <main+0xba>

				//Stop the motors
				MTR_voidMovement(MTR_STOP, 0);
    2cb0:	80 e0       	ldi	r24, 0x00	; 0
    2cb2:	60 e0       	ldi	r22, 0x00	; 0
    2cb4:	0e 94 35 11 	call	0x226a	; 0x226a <MTR_voidMovement>

				//Send stop to the LCD
				LCD_voidWriteString("Stop.");
    2cb8:	80 e6       	ldi	r24, 0x60	; 96
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	0e 94 28 14 	call	0x2850	; 0x2850 <LCD_voidWriteString>
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	a8 ec       	ldi	r26, 0xC8	; 200
    2cc6:	b2 e4       	ldi	r27, 0x42	; 66
    2cc8:	8b 87       	std	Y+11, r24	; 0x0b
    2cca:	9c 87       	std	Y+12, r25	; 0x0c
    2ccc:	ad 87       	std	Y+13, r26	; 0x0d
    2cce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	4a e7       	ldi	r20, 0x7A	; 122
    2cde:	55 e4       	ldi	r21, 0x45	; 69
    2ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	8f 83       	std	Y+7, r24	; 0x07
    2cea:	98 87       	std	Y+8, r25	; 0x08
    2cec:	a9 87       	std	Y+9, r26	; 0x09
    2cee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cf0:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf2:	78 85       	ldd	r23, Y+8	; 0x08
    2cf4:	89 85       	ldd	r24, Y+9	; 0x09
    2cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	40 e8       	ldi	r20, 0x80	; 128
    2cfe:	5f e3       	ldi	r21, 0x3F	; 63
    2d00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d04:	88 23       	and	r24, r24
    2d06:	2c f4       	brge	.+10     	; 0x2d12 <main+0x10c>
		__ticks = 1;
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	9e 83       	std	Y+6, r25	; 0x06
    2d0e:	8d 83       	std	Y+5, r24	; 0x05
    2d10:	3f c0       	rjmp	.+126    	; 0x2d90 <main+0x18a>
	else if (__tmp > 65535)
    2d12:	6f 81       	ldd	r22, Y+7	; 0x07
    2d14:	78 85       	ldd	r23, Y+8	; 0x08
    2d16:	89 85       	ldd	r24, Y+9	; 0x09
    2d18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	3f ef       	ldi	r19, 0xFF	; 255
    2d1e:	4f e7       	ldi	r20, 0x7F	; 127
    2d20:	57 e4       	ldi	r21, 0x47	; 71
    2d22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d26:	18 16       	cp	r1, r24
    2d28:	4c f5       	brge	.+82     	; 0x2d7c <main+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d30:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	40 e2       	ldi	r20, 0x20	; 32
    2d38:	51 e4       	ldi	r21, 0x41	; 65
    2d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	bc 01       	movw	r22, r24
    2d44:	cd 01       	movw	r24, r26
    2d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	9e 83       	std	Y+6, r25	; 0x06
    2d50:	8d 83       	std	Y+5, r24	; 0x05
    2d52:	0f c0       	rjmp	.+30     	; 0x2d72 <main+0x16c>
    2d54:	80 e9       	ldi	r24, 0x90	; 144
    2d56:	91 e0       	ldi	r25, 0x01	; 1
    2d58:	9c 83       	std	Y+4, r25	; 0x04
    2d5a:	8b 83       	std	Y+3, r24	; 0x03
    2d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	f1 f7       	brne	.-4      	; 0x2d60 <main+0x15a>
    2d64:	9c 83       	std	Y+4, r25	; 0x04
    2d66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d68:	8d 81       	ldd	r24, Y+5	; 0x05
    2d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d6c:	01 97       	sbiw	r24, 0x01	; 1
    2d6e:	9e 83       	std	Y+6, r25	; 0x06
    2d70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d72:	8d 81       	ldd	r24, Y+5	; 0x05
    2d74:	9e 81       	ldd	r25, Y+6	; 0x06
    2d76:	00 97       	sbiw	r24, 0x00	; 0
    2d78:	69 f7       	brne	.-38     	; 0x2d54 <main+0x14e>
    2d7a:	5b cf       	rjmp	.-330    	; 0x2c32 <main+0x2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d7e:	78 85       	ldd	r23, Y+8	; 0x08
    2d80:	89 85       	ldd	r24, Y+9	; 0x09
    2d82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	9e 83       	std	Y+6, r25	; 0x06
    2d8e:	8d 83       	std	Y+5, r24	; 0x05
    2d90:	8d 81       	ldd	r24, Y+5	; 0x05
    2d92:	9e 81       	ldd	r25, Y+6	; 0x06
    2d94:	9a 83       	std	Y+2, r25	; 0x02
    2d96:	89 83       	std	Y+1, r24	; 0x01
    2d98:	89 81       	ldd	r24, Y+1	; 0x01
    2d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d9c:	01 97       	sbiw	r24, 0x01	; 1
    2d9e:	f1 f7       	brne	.-4      	; 0x2d9c <main+0x196>
    2da0:	9a 83       	std	Y+2, r25	; 0x02
    2da2:	89 83       	std	Y+1, r24	; 0x01
    2da4:	46 cf       	rjmp	.-372    	; 0x2c32 <main+0x2c>

00002da6 <__mulsi3>:
    2da6:	62 9f       	mul	r22, r18
    2da8:	d0 01       	movw	r26, r0
    2daa:	73 9f       	mul	r23, r19
    2dac:	f0 01       	movw	r30, r0
    2dae:	82 9f       	mul	r24, r18
    2db0:	e0 0d       	add	r30, r0
    2db2:	f1 1d       	adc	r31, r1
    2db4:	64 9f       	mul	r22, r20
    2db6:	e0 0d       	add	r30, r0
    2db8:	f1 1d       	adc	r31, r1
    2dba:	92 9f       	mul	r25, r18
    2dbc:	f0 0d       	add	r31, r0
    2dbe:	83 9f       	mul	r24, r19
    2dc0:	f0 0d       	add	r31, r0
    2dc2:	74 9f       	mul	r23, r20
    2dc4:	f0 0d       	add	r31, r0
    2dc6:	65 9f       	mul	r22, r21
    2dc8:	f0 0d       	add	r31, r0
    2dca:	99 27       	eor	r25, r25
    2dcc:	72 9f       	mul	r23, r18
    2dce:	b0 0d       	add	r27, r0
    2dd0:	e1 1d       	adc	r30, r1
    2dd2:	f9 1f       	adc	r31, r25
    2dd4:	63 9f       	mul	r22, r19
    2dd6:	b0 0d       	add	r27, r0
    2dd8:	e1 1d       	adc	r30, r1
    2dda:	f9 1f       	adc	r31, r25
    2ddc:	bd 01       	movw	r22, r26
    2dde:	cf 01       	movw	r24, r30
    2de0:	11 24       	eor	r1, r1
    2de2:	08 95       	ret

00002de4 <__udivmodsi4>:
    2de4:	a1 e2       	ldi	r26, 0x21	; 33
    2de6:	1a 2e       	mov	r1, r26
    2de8:	aa 1b       	sub	r26, r26
    2dea:	bb 1b       	sub	r27, r27
    2dec:	fd 01       	movw	r30, r26
    2dee:	0d c0       	rjmp	.+26     	; 0x2e0a <__udivmodsi4_ep>

00002df0 <__udivmodsi4_loop>:
    2df0:	aa 1f       	adc	r26, r26
    2df2:	bb 1f       	adc	r27, r27
    2df4:	ee 1f       	adc	r30, r30
    2df6:	ff 1f       	adc	r31, r31
    2df8:	a2 17       	cp	r26, r18
    2dfa:	b3 07       	cpc	r27, r19
    2dfc:	e4 07       	cpc	r30, r20
    2dfe:	f5 07       	cpc	r31, r21
    2e00:	20 f0       	brcs	.+8      	; 0x2e0a <__udivmodsi4_ep>
    2e02:	a2 1b       	sub	r26, r18
    2e04:	b3 0b       	sbc	r27, r19
    2e06:	e4 0b       	sbc	r30, r20
    2e08:	f5 0b       	sbc	r31, r21

00002e0a <__udivmodsi4_ep>:
    2e0a:	66 1f       	adc	r22, r22
    2e0c:	77 1f       	adc	r23, r23
    2e0e:	88 1f       	adc	r24, r24
    2e10:	99 1f       	adc	r25, r25
    2e12:	1a 94       	dec	r1
    2e14:	69 f7       	brne	.-38     	; 0x2df0 <__udivmodsi4_loop>
    2e16:	60 95       	com	r22
    2e18:	70 95       	com	r23
    2e1a:	80 95       	com	r24
    2e1c:	90 95       	com	r25
    2e1e:	9b 01       	movw	r18, r22
    2e20:	ac 01       	movw	r20, r24
    2e22:	bd 01       	movw	r22, r26
    2e24:	cf 01       	movw	r24, r30
    2e26:	08 95       	ret

00002e28 <__prologue_saves__>:
    2e28:	2f 92       	push	r2
    2e2a:	3f 92       	push	r3
    2e2c:	4f 92       	push	r4
    2e2e:	5f 92       	push	r5
    2e30:	6f 92       	push	r6
    2e32:	7f 92       	push	r7
    2e34:	8f 92       	push	r8
    2e36:	9f 92       	push	r9
    2e38:	af 92       	push	r10
    2e3a:	bf 92       	push	r11
    2e3c:	cf 92       	push	r12
    2e3e:	df 92       	push	r13
    2e40:	ef 92       	push	r14
    2e42:	ff 92       	push	r15
    2e44:	0f 93       	push	r16
    2e46:	1f 93       	push	r17
    2e48:	cf 93       	push	r28
    2e4a:	df 93       	push	r29
    2e4c:	cd b7       	in	r28, 0x3d	; 61
    2e4e:	de b7       	in	r29, 0x3e	; 62
    2e50:	ca 1b       	sub	r28, r26
    2e52:	db 0b       	sbc	r29, r27
    2e54:	0f b6       	in	r0, 0x3f	; 63
    2e56:	f8 94       	cli
    2e58:	de bf       	out	0x3e, r29	; 62
    2e5a:	0f be       	out	0x3f, r0	; 63
    2e5c:	cd bf       	out	0x3d, r28	; 61
    2e5e:	09 94       	ijmp

00002e60 <__epilogue_restores__>:
    2e60:	2a 88       	ldd	r2, Y+18	; 0x12
    2e62:	39 88       	ldd	r3, Y+17	; 0x11
    2e64:	48 88       	ldd	r4, Y+16	; 0x10
    2e66:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e68:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e6a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e6c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e6e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e70:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e72:	b9 84       	ldd	r11, Y+9	; 0x09
    2e74:	c8 84       	ldd	r12, Y+8	; 0x08
    2e76:	df 80       	ldd	r13, Y+7	; 0x07
    2e78:	ee 80       	ldd	r14, Y+6	; 0x06
    2e7a:	fd 80       	ldd	r15, Y+5	; 0x05
    2e7c:	0c 81       	ldd	r16, Y+4	; 0x04
    2e7e:	1b 81       	ldd	r17, Y+3	; 0x03
    2e80:	aa 81       	ldd	r26, Y+2	; 0x02
    2e82:	b9 81       	ldd	r27, Y+1	; 0x01
    2e84:	ce 0f       	add	r28, r30
    2e86:	d1 1d       	adc	r29, r1
    2e88:	0f b6       	in	r0, 0x3f	; 63
    2e8a:	f8 94       	cli
    2e8c:	de bf       	out	0x3e, r29	; 62
    2e8e:	0f be       	out	0x3f, r0	; 63
    2e90:	cd bf       	out	0x3d, r28	; 61
    2e92:	ed 01       	movw	r28, r26
    2e94:	08 95       	ret

00002e96 <_exit>:
    2e96:	f8 94       	cli

00002e98 <__stop_program>:
    2e98:	ff cf       	rjmp	.-2      	; 0x2e98 <__stop_program>
